/*
Unobtrusive JavaScript
https://github.com/rails/rails/blob/master/actionview/app/assets/javascripts
Released under the MIT license
 */


;

(function() {
  (function() {
    (function() {
      this.Rails = {
        linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]',
        buttonClickSelector: {
          selector: 'button[data-remote]:not([form]), button[data-confirm]:not([form])',
          exclude: 'form button'
        },
        inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',
        formSubmitSelector: 'form',
        formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])',
        formDisableSelector: 'input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled',
        formEnableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled',
        fileInputSelector: 'input[name][type=file]:not([disabled])',
        linkDisableSelector: 'a[data-disable-with], a[data-disable]',
        buttonDisableSelector: 'button[data-remote][data-disable-with], button[data-remote][data-disable]'
      };

    }).call(this);
  }).call(this);

  var Rails = this.Rails;

  (function() {
    (function() {
      var expando, m;

      m = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;

      Rails.matches = function(element, selector) {
        if (selector.exclude != null) {
          return m.call(element, selector.selector) && !m.call(element, selector.exclude);
        } else {
          return m.call(element, selector);
        }
      };

      expando = '_ujsData';

      Rails.getData = function(element, key) {
        var ref;
        return (ref = element[expando]) != null ? ref[key] : void 0;
      };

      Rails.setData = function(element, key, value) {
        if (element[expando] == null) {
          element[expando] = {};
        }
        return element[expando][key] = value;
      };

      Rails.$ = function(selector) {
        return Array.prototype.slice.call(document.querySelectorAll(selector));
      };

    }).call(this);
    (function() {
      var $, csrfParam, csrfToken;

      $ = Rails.$;

      csrfToken = Rails.csrfToken = function() {
        var meta;
        meta = document.querySelector('meta[name=csrf-token]');
        return meta && meta.content;
      };

      csrfParam = Rails.csrfParam = function() {
        var meta;
        meta = document.querySelector('meta[name=csrf-param]');
        return meta && meta.content;
      };

      Rails.CSRFProtection = function(xhr) {
        var token;
        token = csrfToken();
        if (token != null) {
          return xhr.setRequestHeader('X-CSRF-Token', token);
        }
      };

      Rails.refreshCSRFTokens = function() {
        var param, token;
        token = csrfToken();
        param = csrfParam();
        if ((token != null) && (param != null)) {
          return $('form input[name="' + param + '"]').forEach(function(input) {
            return input.value = token;
          });
        }
      };

    }).call(this);
    (function() {
      var CustomEvent, fire, matches;

      matches = Rails.matches;

      CustomEvent = window.CustomEvent;

      if (typeof CustomEvent !== 'function') {
        CustomEvent = function(event, params) {
          var evt;
          evt = document.createEvent('CustomEvent');
          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
          return evt;
        };
        CustomEvent.prototype = window.Event.prototype;
      }

      fire = Rails.fire = function(obj, name, data) {
        var event;
        event = new CustomEvent(name, {
          bubbles: true,
          cancelable: true,
          detail: data
        });
        obj.dispatchEvent(event);
        return !event.defaultPrevented;
      };

      Rails.stopEverything = function(e) {
        fire(e.target, 'ujs:everythingStopped');
        e.preventDefault();
        e.stopPropagation();
        return e.stopImmediatePropagation();
      };

      Rails.delegate = function(element, selector, eventType, handler) {
        return element.addEventListener(eventType, function(e) {
          var target;
          target = e.target;
          while (!(!(target instanceof Element) || matches(target, selector))) {
            target = target.parentNode;
          }
          if (target instanceof Element && handler.call(target, e) === false) {
            e.preventDefault();
            return e.stopPropagation();
          }
        });
      };

    }).call(this);
    (function() {
      var AcceptHeaders, CSRFProtection, createXHR, fire, prepareOptions, processResponse;

      CSRFProtection = Rails.CSRFProtection, fire = Rails.fire;

      AcceptHeaders = {
        '*': '*/*',
        text: 'text/plain',
        html: 'text/html',
        xml: 'application/xml, text/xml',
        json: 'application/json, text/javascript',
        script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript'
      };

      Rails.ajax = function(options) {
        var xhr;
        options = prepareOptions(options);
        xhr = createXHR(options, function() {
          var response;
          response = processResponse(xhr.response, xhr.getResponseHeader('Content-Type'));
          if (Math.floor(xhr.status / 100) === 2) {
            if (typeof options.success === "function") {
              options.success(response, xhr.statusText, xhr);
            }
          } else {
            if (typeof options.error === "function") {
              options.error(response, xhr.statusText, xhr);
            }
          }
          return typeof options.complete === "function" ? options.complete(xhr, xhr.statusText) : void 0;
        });
        if (typeof options.beforeSend === "function") {
          options.beforeSend(xhr, options);
        }
        if (xhr.readyState === XMLHttpRequest.OPENED) {
          return xhr.send(options.data);
        } else {
          return fire(document, 'ajaxStop');
        }
      };

      prepareOptions = function(options) {
        options.url = options.url || location.href;
        options.type = options.type.toUpperCase();
        if (options.type === 'GET' && options.data) {
          if (options.url.indexOf('?') < 0) {
            options.url += '?' + options.data;
          } else {
            options.url += '&' + options.data;
          }
        }
        if (AcceptHeaders[options.dataType] == null) {
          options.dataType = '*';
        }
        options.accept = AcceptHeaders[options.dataType];
        if (options.dataType !== '*') {
          options.accept += ', */*; q=0.01';
        }
        return options;
      };

      createXHR = function(options, done) {
        var xhr;
        xhr = new XMLHttpRequest();
        xhr.open(options.type, options.url, true);
        xhr.setRequestHeader('Accept', options.accept);
        if (typeof options.data === 'string') {
          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
        }
        if (!options.crossDomain) {
          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        }
        CSRFProtection(xhr);
        xhr.withCredentials = !!options.withCredentials;
        xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
            return done(xhr);
          }
        };
        return xhr;
      };

      processResponse = function(response, type) {
        var parser, script;
        if (typeof response === 'string' && typeof type === 'string') {
          if (type.match(/\bjson\b/)) {
            try {
              response = JSON.parse(response);
            } catch (error) {}
          } else if (type.match(/\b(?:java|ecma)script\b/)) {
            script = document.createElement('script');
            script.text = response;
            document.head.appendChild(script).parentNode.removeChild(script);
          } else if (type.match(/\b(xml|html|svg)\b/)) {
            parser = new DOMParser();
            type = type.replace(/;.+/, '');
            try {
              response = parser.parseFromString(response, type);
            } catch (error) {}
          }
        }
        return response;
      };

      Rails.href = function(element) {
        return element.href;
      };

      Rails.isCrossDomain = function(url) {
        var e, originAnchor, urlAnchor;
        originAnchor = document.createElement('a');
        originAnchor.href = location.href;
        urlAnchor = document.createElement('a');
        try {
          urlAnchor.href = url;
          return !(((!urlAnchor.protocol || urlAnchor.protocol === ':') && !urlAnchor.host) || (originAnchor.protocol + '//' + originAnchor.host === urlAnchor.protocol + '//' + urlAnchor.host));
        } catch (error) {
          e = error;
          return true;
        }
      };

    }).call(this);
    (function() {
      var matches, toArray;

      matches = Rails.matches;

      toArray = function(e) {
        return Array.prototype.slice.call(e);
      };

      Rails.serializeElement = function(element, additionalParam) {
        var inputs, params;
        inputs = [element];
        if (matches(element, 'form')) {
          inputs = toArray(element.elements);
        }
        params = [];
        inputs.forEach(function(input) {
          if (!input.name) {
            return;
          }
          if (matches(input, 'select')) {
            return toArray(input.options).forEach(function(option) {
              if (option.selected) {
                return params.push({
                  name: input.name,
                  value: option.value
                });
              }
            });
          } else if (input.checked || ['radio', 'checkbox', 'submit'].indexOf(input.type) === -1) {
            return params.push({
              name: input.name,
              value: input.value
            });
          }
        });
        if (additionalParam) {
          params.push(additionalParam);
        }
        return params.map(function(param) {
          if (param.name != null) {
            return (encodeURIComponent(param.name)) + "=" + (encodeURIComponent(param.value));
          } else {
            return param;
          }
        }).join('&');
      };

      Rails.formElements = function(form, selector) {
        if (matches(form, 'form')) {
          return toArray(form.elements).filter(function(el) {
            return matches(el, selector);
          });
        } else {
          return toArray(form.querySelectorAll(selector));
        }
      };

    }).call(this);
    (function() {
      var allowAction, fire, stopEverything;

      fire = Rails.fire, stopEverything = Rails.stopEverything;

      Rails.handleConfirm = function(e) {
        if (!allowAction(this)) {
          return stopEverything(e);
        }
      };

      allowAction = function(element) {
        var answer, callback, message;
        message = element.getAttribute('data-confirm');
        if (!message) {
          return true;
        }
        answer = false;
        if (fire(element, 'confirm')) {
          try {
            answer = confirm(message);
          } catch (error) {}
          callback = fire(element, 'confirm:complete', [answer]);
        }
        return answer && callback;
      };

    }).call(this);
    (function() {
      var disableFormElement, disableFormElements, disableLinkElement, enableFormElement, enableFormElements, enableLinkElement, formElements, getData, matches, setData, stopEverything;

      matches = Rails.matches, getData = Rails.getData, setData = Rails.setData, stopEverything = Rails.stopEverything, formElements = Rails.formElements;

      Rails.handleDisabledElement = function(e) {
        var element;
        element = this;
        if (element.disabled) {
          return stopEverything(e);
        }
      };

      Rails.enableElement = function(e) {
        var element;
        element = e instanceof Event ? e.target : e;
        if (matches(element, Rails.linkDisableSelector)) {
          return enableLinkElement(element);
        } else if (matches(element, Rails.buttonDisableSelector) || matches(element, Rails.formEnableSelector)) {
          return enableFormElement(element);
        } else if (matches(element, Rails.formSubmitSelector)) {
          return enableFormElements(element);
        }
      };

      Rails.disableElement = function(e) {
        var element;
        element = e instanceof Event ? e.target : e;
        if (matches(element, Rails.linkDisableSelector)) {
          return disableLinkElement(element);
        } else if (matches(element, Rails.buttonDisableSelector) || matches(element, Rails.formDisableSelector)) {
          return disableFormElement(element);
        } else if (matches(element, Rails.formSubmitSelector)) {
          return disableFormElements(element);
        }
      };

      disableLinkElement = function(element) {
        var replacement;
        replacement = element.getAttribute('data-disable-with');
        if (replacement != null) {
          setData(element, 'ujs:enable-with', element.innerHTML);
          element.innerHTML = replacement;
        }
        element.addEventListener('click', stopEverything);
        return setData(element, 'ujs:disabled', true);
      };

      enableLinkElement = function(element) {
        var originalText;
        originalText = getData(element, 'ujs:enable-with');
        if (originalText != null) {
          element.innerHTML = originalText;
          setData(element, 'ujs:enable-with', null);
        }
        element.removeEventListener('click', stopEverything);
        return setData(element, 'ujs:disabled', null);
      };

      disableFormElements = function(form) {
        return formElements(form, Rails.formDisableSelector).forEach(disableFormElement);
      };

      disableFormElement = function(element) {
        var replacement;
        replacement = element.getAttribute('data-disable-with');
        if (replacement != null) {
          if (matches(element, 'button')) {
            setData(element, 'ujs:enable-with', element.innerHTML);
            element.innerHTML = replacement;
          } else {
            setData(element, 'ujs:enable-with', element.value);
            element.value = replacement;
          }
        }
        element.disabled = true;
        return setData(element, 'ujs:disabled', true);
      };

      enableFormElements = function(form) {
        return formElements(form, Rails.formEnableSelector).forEach(enableFormElement);
      };

      enableFormElement = function(element) {
        var originalText;
        originalText = getData(element, 'ujs:enable-with');
        if (originalText != null) {
          if (matches(element, 'button')) {
            element.innerHTML = originalText;
          } else {
            element.value = originalText;
          }
          setData(element, 'ujs:enable-with', null);
        }
        element.disabled = false;
        return setData(element, 'ujs:disabled', null);
      };

    }).call(this);
    (function() {
      var stopEverything;

      stopEverything = Rails.stopEverything;

      Rails.handleMethod = function(e) {
        var csrfParam, csrfToken, form, formContent, href, link, method;
        link = this;
        method = link.getAttribute('data-method');
        if (!method) {
          return;
        }
        href = Rails.href(link);
        csrfToken = Rails.csrfToken();
        csrfParam = Rails.csrfParam();
        form = document.createElement('form');
        formContent = "<input name='_method' value='" + method + "' type='hidden' />";
        if ((csrfParam != null) && (csrfToken != null) && !Rails.isCrossDomain(href)) {
          formContent += "<input name='" + csrfParam + "' value='" + csrfToken + "' type='hidden' />";
        }
        formContent += '<input type="submit" />';
        form.method = 'post';
        form.action = href;
        form.target = link.target;
        form.innerHTML = formContent;
        form.style.display = 'none';
        document.body.appendChild(form);
        form.querySelector('[type="submit"]').click();
        return stopEverything(e);
      };

    }).call(this);
    (function() {
      var ajax, fire, getData, isCrossDomain, isRemote, matches, serializeElement, setData, stopEverything,
        slice = [].slice;

      matches = Rails.matches, getData = Rails.getData, setData = Rails.setData, fire = Rails.fire, stopEverything = Rails.stopEverything, ajax = Rails.ajax, isCrossDomain = Rails.isCrossDomain, serializeElement = Rails.serializeElement;

      isRemote = function(element) {
        var value;
        value = element.getAttribute('data-remote');
        return (value != null) && value !== 'false';
      };

      Rails.handleRemote = function(e) {
        var button, data, dataType, element, method, url, withCredentials;
        element = this;
        if (!isRemote(element)) {
          return true;
        }
        if (!fire(element, 'ajax:before')) {
          fire(element, 'ajax:stopped');
          return false;
        }
        withCredentials = element.getAttribute('data-with-credentials');
        dataType = element.getAttribute('data-type') || 'script';
        if (matches(element, Rails.formSubmitSelector)) {
          button = getData(element, 'ujs:submit-button');
          method = getData(element, 'ujs:submit-button-formmethod') || element.method;
          url = getData(element, 'ujs:submit-button-formaction') || element.getAttribute('action') || location.href;
          if (method.toUpperCase() === 'GET') {
            url = url.replace(/\?.*$/, '');
          }
          if (element.enctype === 'multipart/form-data') {
            data = new FormData(element);
            if (button != null) {
              data.append(button.name, button.value);
            }
          } else {
            data = serializeElement(element, button);
          }
          setData(element, 'ujs:submit-button', null);
          setData(element, 'ujs:submit-button-formmethod', null);
          setData(element, 'ujs:submit-button-formaction', null);
        } else if (matches(element, Rails.buttonClickSelector) || matches(element, Rails.inputChangeSelector)) {
          method = element.getAttribute('data-method');
          url = element.getAttribute('data-url');
          data = serializeElement(element, element.getAttribute('data-params'));
        } else {
          method = element.getAttribute('data-method');
          url = Rails.href(element);
          data = element.getAttribute('data-params');
        }
        ajax({
          type: method || 'GET',
          url: url,
          data: data,
          dataType: dataType,
          beforeSend: function(xhr, options) {
            if (fire(element, 'ajax:beforeSend', [xhr, options])) {
              return fire(element, 'ajax:send', [xhr]);
            } else {
              fire(element, 'ajax:stopped');
              return xhr.abort();
            }
          },
          success: function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return fire(element, 'ajax:success', args);
          },
          error: function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return fire(element, 'ajax:error', args);
          },
          complete: function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return fire(element, 'ajax:complete', args);
          },
          crossDomain: isCrossDomain(url),
          withCredentials: (withCredentials != null) && withCredentials !== 'false'
        });
        return stopEverything(e);
      };

      Rails.formSubmitButtonClick = function(e) {
        var button, form;
        button = this;
        form = button.form;
        if (!form) {
          return;
        }
        if (button.name) {
          setData(form, 'ujs:submit-button', {
            name: button.name,
            value: button.value
          });
        }
        setData(form, 'ujs:formnovalidate-button', button.formNoValidate);
        setData(form, 'ujs:submit-button-formaction', button.getAttribute('formaction'));
        return setData(form, 'ujs:submit-button-formmethod', button.getAttribute('formmethod'));
      };

      Rails.handleMetaClick = function(e) {
        var data, link, metaClick, method;
        link = this;
        method = (link.getAttribute('data-method') || 'GET').toUpperCase();
        data = link.getAttribute('data-params');
        metaClick = e.metaKey || e.ctrlKey;
        if (metaClick && method === 'GET' && !data) {
          return e.stopImmediatePropagation();
        }
      };

    }).call(this);
    (function() {
      var $, CSRFProtection, delegate, disableElement, enableElement, fire, formSubmitButtonClick, getData, handleConfirm, handleDisabledElement, handleMetaClick, handleMethod, handleRemote, refreshCSRFTokens;

      fire = Rails.fire, delegate = Rails.delegate, getData = Rails.getData, $ = Rails.$, refreshCSRFTokens = Rails.refreshCSRFTokens, CSRFProtection = Rails.CSRFProtection, enableElement = Rails.enableElement, disableElement = Rails.disableElement, handleDisabledElement = Rails.handleDisabledElement, handleConfirm = Rails.handleConfirm, handleRemote = Rails.handleRemote, formSubmitButtonClick = Rails.formSubmitButtonClick, handleMetaClick = Rails.handleMetaClick, handleMethod = Rails.handleMethod;

      if ((typeof jQuery !== "undefined" && jQuery !== null) && !jQuery.rails) {
        jQuery.rails = Rails;
        jQuery.ajaxPrefilter(function(options, originalOptions, xhr) {
          if (!options.crossDomain) {
            return CSRFProtection(xhr);
          }
        });
      }

      Rails.start = function() {
        if (window._rails_loaded) {
          throw new Error('rails-ujs has already been loaded!');
        }
        window.addEventListener('pageshow', function() {
          $(Rails.formEnableSelector).forEach(function(el) {
            if (getData(el, 'ujs:disabled')) {
              return enableElement(el);
            }
          });
          return $(Rails.linkDisableSelector).forEach(function(el) {
            if (getData(el, 'ujs:disabled')) {
              return enableElement(el);
            }
          });
        });
        delegate(document, Rails.linkDisableSelector, 'ajax:complete', enableElement);
        delegate(document, Rails.linkDisableSelector, 'ajax:stopped', enableElement);
        delegate(document, Rails.buttonDisableSelector, 'ajax:complete', enableElement);
        delegate(document, Rails.buttonDisableSelector, 'ajax:stopped', enableElement);
        delegate(document, Rails.linkClickSelector, 'click', handleDisabledElement);
        delegate(document, Rails.linkClickSelector, 'click', handleConfirm);
        delegate(document, Rails.linkClickSelector, 'click', handleMetaClick);
        delegate(document, Rails.linkClickSelector, 'click', disableElement);
        delegate(document, Rails.linkClickSelector, 'click', handleRemote);
        delegate(document, Rails.linkClickSelector, 'click', handleMethod);
        delegate(document, Rails.buttonClickSelector, 'click', handleDisabledElement);
        delegate(document, Rails.buttonClickSelector, 'click', handleConfirm);
        delegate(document, Rails.buttonClickSelector, 'click', disableElement);
        delegate(document, Rails.buttonClickSelector, 'click', handleRemote);
        delegate(document, Rails.inputChangeSelector, 'change', handleDisabledElement);
        delegate(document, Rails.inputChangeSelector, 'change', handleConfirm);
        delegate(document, Rails.inputChangeSelector, 'change', handleRemote);
        delegate(document, Rails.formSubmitSelector, 'submit', handleDisabledElement);
        delegate(document, Rails.formSubmitSelector, 'submit', handleConfirm);
        delegate(document, Rails.formSubmitSelector, 'submit', handleRemote);
        delegate(document, Rails.formSubmitSelector, 'submit', function(e) {
          return setTimeout((function() {
            return disableElement(e);
          }), 13);
        });
        delegate(document, Rails.formSubmitSelector, 'ajax:send', disableElement);
        delegate(document, Rails.formSubmitSelector, 'ajax:complete', enableElement);
        delegate(document, Rails.formInputClickSelector, 'click', handleDisabledElement);
        delegate(document, Rails.formInputClickSelector, 'click', handleConfirm);
        delegate(document, Rails.formInputClickSelector, 'click', formSubmitButtonClick);
        document.addEventListener('DOMContentLoaded', refreshCSRFTokens);
        return window._rails_loaded = true;
      };

      if (window.Rails === Rails && fire(document, 'rails:attachBindings')) {
        Rails.start();
      }

    }).call(this);
  }).call(this);

  if (typeof module === "object" && module.exports) {
    module.exports = Rails;
  } else if (typeof define === "function" && define.amd) {
    define(Rails);
  }
}).call(this);
/*
Turbolinks 5.0.3
Copyright © 2017 Basecamp, LLC
 */

(function(){(function(){(function(){this.Turbolinks={supported:function(){return null!=window.history.pushState&&null!=window.requestAnimationFrame&&null!=window.addEventListener}(),visit:function(e,r){return t.controller.visit(e,r)},clearCache:function(){return t.controller.clearCache()}}}).call(this)}).call(this);var t=this.Turbolinks;(function(){(function(){var e,r,n=[].slice;t.copyObject=function(t){var e,r,n;r={};for(e in t)n=t[e],r[e]=n;return r},t.closest=function(t,r){return e.call(t,r)},e=function(){var t,e;return t=document.documentElement,null!=(e=t.closest)?e:function(t){var e;for(e=this;e;){if(e.nodeType===Node.ELEMENT_NODE&&r.call(e,t))return e;e=e.parentNode}}}(),t.defer=function(t){return setTimeout(t,1)},t.throttle=function(t){var e;return e=null,function(){var r;return r=1<=arguments.length?n.call(arguments,0):[],null!=e?e:e=requestAnimationFrame(function(n){return function(){return e=null,t.apply(n,r)}}(this))}},t.dispatch=function(t,e){var r,n,o,i,s;return i=null!=e?e:{},s=i.target,r=i.cancelable,n=i.data,o=document.createEvent("Events"),o.initEvent(t,!0,r===!0),o.data=null!=n?n:{},(null!=s?s:document).dispatchEvent(o),o},t.match=function(t,e){return r.call(t,e)},r=function(){var t,e,r,n;return t=document.documentElement,null!=(e=null!=(r=null!=(n=t.matchesSelector)?n:t.webkitMatchesSelector)?r:t.msMatchesSelector)?e:t.mozMatchesSelector}(),t.uuid=function(){var t,e,r;for(r="",t=e=1;36>=e;t=++e)r+=9===t||14===t||19===t||24===t?"-":15===t?"4":20===t?(Math.floor(4*Math.random())+8).toString(16):Math.floor(15*Math.random()).toString(16);return r}}).call(this),function(){t.Location=function(){function t(t){var e,r;null==t&&(t=""),r=document.createElement("a"),r.href=t.toString(),this.absoluteURL=r.href,e=r.hash.length,2>e?this.requestURL=this.absoluteURL:(this.requestURL=this.absoluteURL.slice(0,-e),this.anchor=r.hash.slice(1))}var e,r,n,o;return t.wrap=function(t){return t instanceof this?t:new this(t)},t.prototype.getOrigin=function(){return this.absoluteURL.split("/",3).join("/")},t.prototype.getPath=function(){var t,e;return null!=(t=null!=(e=this.absoluteURL.match(/\/\/[^\/]*(\/[^?;]*)/))?e[1]:void 0)?t:"/"},t.prototype.getPathComponents=function(){return this.getPath().split("/").slice(1)},t.prototype.getLastPathComponent=function(){return this.getPathComponents().slice(-1)[0]},t.prototype.getExtension=function(){var t,e;return null!=(t=null!=(e=this.getLastPathComponent().match(/\.[^.]*$/))?e[0]:void 0)?t:""},t.prototype.isHTML=function(){return this.getExtension().match(/^(?:|\.(?:htm|html|xhtml))$/)},t.prototype.isPrefixedBy=function(t){var e;return e=r(t),this.isEqualTo(t)||o(this.absoluteURL,e)},t.prototype.isEqualTo=function(t){return this.absoluteURL===(null!=t?t.absoluteURL:void 0)},t.prototype.toCacheKey=function(){return this.requestURL},t.prototype.toJSON=function(){return this.absoluteURL},t.prototype.toString=function(){return this.absoluteURL},t.prototype.valueOf=function(){return this.absoluteURL},r=function(t){return e(t.getOrigin()+t.getPath())},e=function(t){return n(t,"/")?t:t+"/"},o=function(t,e){return t.slice(0,e.length)===e},n=function(t,e){return t.slice(-e.length)===e},t}()}.call(this),function(){var e=function(t,e){return function(){return t.apply(e,arguments)}};t.HttpRequest=function(){function r(r,n,o){this.delegate=r,this.requestCanceled=e(this.requestCanceled,this),this.requestTimedOut=e(this.requestTimedOut,this),this.requestFailed=e(this.requestFailed,this),this.requestLoaded=e(this.requestLoaded,this),this.requestProgressed=e(this.requestProgressed,this),this.url=t.Location.wrap(n).requestURL,this.referrer=t.Location.wrap(o).absoluteURL,this.createXHR()}return r.NETWORK_FAILURE=0,r.TIMEOUT_FAILURE=-1,r.timeout=60,r.prototype.send=function(){var t;return this.xhr&&!this.sent?(this.notifyApplicationBeforeRequestStart(),this.setProgress(0),this.xhr.send(),this.sent=!0,"function"==typeof(t=this.delegate).requestStarted?t.requestStarted():void 0):void 0},r.prototype.cancel=function(){return this.xhr&&this.sent?this.xhr.abort():void 0},r.prototype.requestProgressed=function(t){return t.lengthComputable?this.setProgress(t.loaded/t.total):void 0},r.prototype.requestLoaded=function(){return this.endRequest(function(t){return function(){var e;return 200<=(e=t.xhr.status)&&300>e?t.delegate.requestCompletedWithResponse(t.xhr.responseText,t.xhr.getResponseHeader("Turbolinks-Location")):(t.failed=!0,t.delegate.requestFailedWithStatusCode(t.xhr.status,t.xhr.responseText))}}(this))},r.prototype.requestFailed=function(){return this.endRequest(function(t){return function(){return t.failed=!0,t.delegate.requestFailedWithStatusCode(t.constructor.NETWORK_FAILURE)}}(this))},r.prototype.requestTimedOut=function(){return this.endRequest(function(t){return function(){return t.failed=!0,t.delegate.requestFailedWithStatusCode(t.constructor.TIMEOUT_FAILURE)}}(this))},r.prototype.requestCanceled=function(){return this.endRequest()},r.prototype.notifyApplicationBeforeRequestStart=function(){return t.dispatch("turbolinks:request-start",{data:{url:this.url,xhr:this.xhr}})},r.prototype.notifyApplicationAfterRequestEnd=function(){return t.dispatch("turbolinks:request-end",{data:{url:this.url,xhr:this.xhr}})},r.prototype.createXHR=function(){return this.xhr=new XMLHttpRequest,this.xhr.open("GET",this.url,!0),this.xhr.timeout=1e3*this.constructor.timeout,this.xhr.setRequestHeader("Accept","text/html, application/xhtml+xml"),this.xhr.setRequestHeader("Turbolinks-Referrer",this.referrer),this.xhr.onprogress=this.requestProgressed,this.xhr.onload=this.requestLoaded,this.xhr.onerror=this.requestFailed,this.xhr.ontimeout=this.requestTimedOut,this.xhr.onabort=this.requestCanceled},r.prototype.endRequest=function(t){return this.xhr?(this.notifyApplicationAfterRequestEnd(),null!=t&&t.call(this),this.destroy()):void 0},r.prototype.setProgress=function(t){var e;return this.progress=t,"function"==typeof(e=this.delegate).requestProgressed?e.requestProgressed(this.progress):void 0},r.prototype.destroy=function(){var t;return this.setProgress(1),"function"==typeof(t=this.delegate).requestFinished&&t.requestFinished(),this.delegate=null,this.xhr=null},r}()}.call(this),function(){var e=function(t,e){return function(){return t.apply(e,arguments)}};t.ProgressBar=function(){function t(){this.trickle=e(this.trickle,this),this.stylesheetElement=this.createStylesheetElement(),this.progressElement=this.createProgressElement()}var r;return r=300,t.defaultCSS=".turbolinks-progress-bar {\n  position: fixed;\n  display: block;\n  top: 0;\n  left: 0;\n  height: 3px;\n  background: #0076ff;\n  z-index: 9999;\n  transition: width "+r+"ms ease-out, opacity "+r/2+"ms "+r/2+"ms ease-in;\n  transform: translate3d(0, 0, 0);\n}",t.prototype.show=function(){return this.visible?void 0:(this.visible=!0,this.installStylesheetElement(),this.installProgressElement(),this.startTrickling())},t.prototype.hide=function(){return this.visible&&!this.hiding?(this.hiding=!0,this.fadeProgressElement(function(t){return function(){return t.uninstallProgressElement(),t.stopTrickling(),t.visible=!1,t.hiding=!1}}(this))):void 0},t.prototype.setValue=function(t){return this.value=t,this.refresh()},t.prototype.installStylesheetElement=function(){return document.head.insertBefore(this.stylesheetElement,document.head.firstChild)},t.prototype.installProgressElement=function(){return this.progressElement.style.width=0,this.progressElement.style.opacity=1,document.documentElement.insertBefore(this.progressElement,document.body),this.refresh()},t.prototype.fadeProgressElement=function(t){return this.progressElement.style.opacity=0,setTimeout(t,1.5*r)},t.prototype.uninstallProgressElement=function(){return this.progressElement.parentNode?document.documentElement.removeChild(this.progressElement):void 0},t.prototype.startTrickling=function(){return null!=this.trickleInterval?this.trickleInterval:this.trickleInterval=setInterval(this.trickle,r)},t.prototype.stopTrickling=function(){return clearInterval(this.trickleInterval),this.trickleInterval=null},t.prototype.trickle=function(){return this.setValue(this.value+Math.random()/100)},t.prototype.refresh=function(){return requestAnimationFrame(function(t){return function(){return t.progressElement.style.width=10+90*t.value+"%"}}(this))},t.prototype.createStylesheetElement=function(){var t;return t=document.createElement("style"),t.type="text/css",t.textContent=this.constructor.defaultCSS,t},t.prototype.createProgressElement=function(){var t;return t=document.createElement("div"),t.className="turbolinks-progress-bar",t},t}()}.call(this),function(){var e=function(t,e){return function(){return t.apply(e,arguments)}};t.BrowserAdapter=function(){function r(r){this.controller=r,this.showProgressBar=e(this.showProgressBar,this),this.progressBar=new t.ProgressBar}var n,o,i,s;return s=t.HttpRequest,n=s.NETWORK_FAILURE,i=s.TIMEOUT_FAILURE,o=500,r.prototype.visitProposedToLocationWithAction=function(t,e){return this.controller.startVisitToLocationWithAction(t,e)},r.prototype.visitStarted=function(t){return t.issueRequest(),t.changeHistory(),t.loadCachedSnapshot()},r.prototype.visitRequestStarted=function(t){return this.progressBar.setValue(0),t.hasCachedSnapshot()||"restore"!==t.action?this.showProgressBarAfterDelay():this.showProgressBar()},r.prototype.visitRequestProgressed=function(t){return this.progressBar.setValue(t.progress)},r.prototype.visitRequestCompleted=function(t){return t.loadResponse()},r.prototype.visitRequestFailedWithStatusCode=function(t,e){switch(e){case n:case i:return this.reload();default:return t.loadResponse()}},r.prototype.visitRequestFinished=function(t){return this.hideProgressBar()},r.prototype.visitCompleted=function(t){return t.followRedirect()},r.prototype.pageInvalidated=function(){return this.reload()},r.prototype.showProgressBarAfterDelay=function(){return this.progressBarTimeout=setTimeout(this.showProgressBar,o)},r.prototype.showProgressBar=function(){return this.progressBar.show()},r.prototype.hideProgressBar=function(){return this.progressBar.hide(),clearTimeout(this.progressBarTimeout)},r.prototype.reload=function(){return window.location.reload()},r}()}.call(this),function(){var e=function(t,e){return function(){return t.apply(e,arguments)}};t.History=function(){function r(t){this.delegate=t,this.onPageLoad=e(this.onPageLoad,this),this.onPopState=e(this.onPopState,this)}return r.prototype.start=function(){return this.started?void 0:(addEventListener("popstate",this.onPopState,!1),addEventListener("load",this.onPageLoad,!1),this.started=!0)},r.prototype.stop=function(){return this.started?(removeEventListener("popstate",this.onPopState,!1),removeEventListener("load",this.onPageLoad,!1),this.started=!1):void 0},r.prototype.push=function(e,r){return e=t.Location.wrap(e),this.update("push",e,r)},r.prototype.replace=function(e,r){return e=t.Location.wrap(e),this.update("replace",e,r)},r.prototype.onPopState=function(e){var r,n,o,i;return this.shouldHandlePopState()&&(i=null!=(n=e.state)?n.turbolinks:void 0)?(r=t.Location.wrap(window.location),o=i.restorationIdentifier,this.delegate.historyPoppedToLocationWithRestorationIdentifier(r,o)):void 0},r.prototype.onPageLoad=function(e){return t.defer(function(t){return function(){return t.pageLoaded=!0}}(this))},r.prototype.shouldHandlePopState=function(){return this.pageIsLoaded()},r.prototype.pageIsLoaded=function(){return this.pageLoaded||"complete"===document.readyState},r.prototype.update=function(t,e,r){var n;return n={turbolinks:{restorationIdentifier:r}},history[t+"State"](n,null,e)},r}()}.call(this),function(){t.Snapshot=function(){function e(t){var e,r;r=t.head,e=t.body,this.head=null!=r?r:document.createElement("head"),this.body=null!=e?e:document.createElement("body")}return e.wrap=function(t){return t instanceof this?t:this.fromHTML(t)},e.fromHTML=function(t){var e;return e=document.createElement("html"),e.innerHTML=t,this.fromElement(e)},e.fromElement=function(t){return new this({head:t.querySelector("head"),body:t.querySelector("body")})},e.prototype.clone=function(){return new e({head:this.head.cloneNode(!0),body:this.body.cloneNode(!0)})},e.prototype.getRootLocation=function(){var e,r;return r=null!=(e=this.getSetting("root"))?e:"/",new t.Location(r)},e.prototype.getCacheControlValue=function(){return this.getSetting("cache-control")},e.prototype.hasAnchor=function(t){try{return null!=this.body.querySelector("[id='"+t+"']")}catch(e){}},e.prototype.isPreviewable=function(){return"no-preview"!==this.getCacheControlValue()},e.prototype.isCacheable=function(){return"no-cache"!==this.getCacheControlValue()},e.prototype.getSetting=function(t){var e,r;return r=this.head.querySelectorAll("meta[name='turbolinks-"+t+"']"),e=r[r.length-1],null!=e?e.getAttribute("content"):void 0},e}()}.call(this),function(){var e=[].slice;t.Renderer=function(){function t(){}var r;return t.render=function(){var t,r,n,o;return n=arguments[0],r=arguments[1],t=3<=arguments.length?e.call(arguments,2):[],o=function(t,e,r){r.prototype=t.prototype;var n=new r,o=t.apply(n,e);return Object(o)===o?o:n}(this,t,function(){}),o.delegate=n,o.render(r),o},t.prototype.renderView=function(t){return this.delegate.viewWillRender(this.newBody),t(),this.delegate.viewRendered(this.newBody)},t.prototype.invalidateView=function(){return this.delegate.viewInvalidated()},t.prototype.createScriptElement=function(t){var e;return"false"===t.getAttribute("data-turbolinks-eval")?t:(e=document.createElement("script"),e.textContent=t.textContent,r(e,t),e)},r=function(t,e){var r,n,o,i,s,a,u;for(i=e.attributes,a=[],r=0,n=i.length;n>r;r++)s=i[r],o=s.name,u=s.value,a.push(t.setAttribute(o,u));return a},t}()}.call(this),function(){t.HeadDetails=function(){function t(t){var e,r,i,s,a,u,l;for(this.element=t,this.elements={},l=this.element.childNodes,s=0,u=l.length;u>s;s++)i=l[s],i.nodeType===Node.ELEMENT_NODE&&(a=i.outerHTML,r=null!=(e=this.elements)[a]?e[a]:e[a]={type:o(i),tracked:n(i),elements:[]},r.elements.push(i))}var e,r,n,o;return t.prototype.hasElementWithKey=function(t){return t in this.elements},t.prototype.getTrackedElementSignature=function(){var t,e;return function(){var r,n;r=this.elements,n=[];for(t in r)e=r[t].tracked,e&&n.push(t);return n}.call(this).join("")},t.prototype.getScriptElementsNotInDetails=function(t){return this.getElementsMatchingTypeNotInDetails("script",t)},t.prototype.getStylesheetElementsNotInDetails=function(t){return this.getElementsMatchingTypeNotInDetails("stylesheet",t)},t.prototype.getElementsMatchingTypeNotInDetails=function(t,e){var r,n,o,i,s,a;o=this.elements,s=[];for(n in o)i=o[n],a=i.type,r=i.elements,a!==t||e.hasElementWithKey(n)||s.push(r[0]);return s},t.prototype.getProvisionalElements=function(){var t,e,r,n,o,i,s;r=[],n=this.elements;for(e in n)o=n[e],s=o.type,i=o.tracked,t=o.elements,null!=s||i?t.length>1&&r.push.apply(r,t.slice(1)):r.push.apply(r,t);return r},o=function(t){return e(t)?"script":r(t)?"stylesheet":void 0},n=function(t){return"reload"===t.getAttribute("data-turbolinks-track")},e=function(t){var e;return e=t.tagName.toLowerCase(),"script"===e},r=function(t){var e;return e=t.tagName.toLowerCase(),"style"===e||"link"===e&&"stylesheet"===t.getAttribute("rel")},t}()}.call(this),function(){var e=function(t,e){function n(){this.constructor=t}for(var o in e)r.call(e,o)&&(t[o]=e[o]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},r={}.hasOwnProperty;t.SnapshotRenderer=function(r){function n(e,r){this.currentSnapshot=e,this.newSnapshot=r,this.currentHeadDetails=new t.HeadDetails(this.currentSnapshot.head),this.newHeadDetails=new t.HeadDetails(this.newSnapshot.head),this.newBody=this.newSnapshot.body}return e(n,r),n.prototype.render=function(t){return this.trackedElementsAreIdentical()?(this.mergeHead(),this.renderView(function(e){return function(){return e.replaceBody(),e.focusFirstAutofocusableElement(),t()}}(this))):this.invalidateView()},n.prototype.mergeHead=function(){return this.copyNewHeadStylesheetElements(),this.copyNewHeadScriptElements(),this.removeCurrentHeadProvisionalElements(),this.copyNewHeadProvisionalElements()},n.prototype.replaceBody=function(){return this.activateBodyScriptElements(),this.importBodyPermanentElements(),this.assignNewBody()},n.prototype.trackedElementsAreIdentical=function(){return this.currentHeadDetails.getTrackedElementSignature()===this.newHeadDetails.getTrackedElementSignature()},n.prototype.copyNewHeadStylesheetElements=function(){var t,e,r,n,o;for(n=this.getNewHeadStylesheetElements(),o=[],e=0,r=n.length;r>e;e++)t=n[e],o.push(document.head.appendChild(t));return o},n.prototype.copyNewHeadScriptElements=function(){var t,e,r,n,o;for(n=this.getNewHeadScriptElements(),o=[],e=0,r=n.length;r>e;e++)t=n[e],o.push(document.head.appendChild(this.createScriptElement(t)));return o},n.prototype.removeCurrentHeadProvisionalElements=function(){var t,e,r,n,o;for(n=this.getCurrentHeadProvisionalElements(),o=[],e=0,r=n.length;r>e;e++)t=n[e],o.push(document.head.removeChild(t));return o},n.prototype.copyNewHeadProvisionalElements=function(){var t,e,r,n,o;for(n=this.getNewHeadProvisionalElements(),o=[],e=0,r=n.length;r>e;e++)t=n[e],o.push(document.head.appendChild(t));return o},n.prototype.importBodyPermanentElements=function(){var t,e,r,n,o,i;for(n=this.getNewBodyPermanentElements(),i=[],e=0,r=n.length;r>e;e++)o=n[e],(t=this.findCurrentBodyPermanentElement(o))?i.push(o.parentNode.replaceChild(t,o)):i.push(void 0);return i},n.prototype.activateBodyScriptElements=function(){var t,e,r,n,o,i;for(n=this.getNewBodyScriptElements(),i=[],e=0,r=n.length;r>e;e++)o=n[e],t=this.createScriptElement(o),i.push(o.parentNode.replaceChild(t,o));return i},n.prototype.assignNewBody=function(){return document.body=this.newBody},n.prototype.focusFirstAutofocusableElement=function(){var t;return null!=(t=this.findFirstAutofocusableElement())?t.focus():void 0},n.prototype.getNewHeadStylesheetElements=function(){return this.newHeadDetails.getStylesheetElementsNotInDetails(this.currentHeadDetails)},n.prototype.getNewHeadScriptElements=function(){return this.newHeadDetails.getScriptElementsNotInDetails(this.currentHeadDetails)},n.prototype.getCurrentHeadProvisionalElements=function(){return this.currentHeadDetails.getProvisionalElements()},n.prototype.getNewHeadProvisionalElements=function(){return this.newHeadDetails.getProvisionalElements()},n.prototype.getNewBodyPermanentElements=function(){return this.newBody.querySelectorAll("[id][data-turbolinks-permanent]")},n.prototype.findCurrentBodyPermanentElement=function(t){return document.body.querySelector("#"+t.id+"[data-turbolinks-permanent]")},n.prototype.getNewBodyScriptElements=function(){return this.newBody.querySelectorAll("script")},n.prototype.findFirstAutofocusableElement=function(){return document.body.querySelector("[autofocus]")},n}(t.Renderer)}.call(this),function(){var e=function(t,e){function n(){this.constructor=t}for(var o in e)r.call(e,o)&&(t[o]=e[o]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},r={}.hasOwnProperty;t.ErrorRenderer=function(t){function r(t){this.html=t}return e(r,t),r.prototype.render=function(t){return this.renderView(function(e){return function(){return e.replaceDocumentHTML(),e.activateBodyScriptElements(),t()}}(this))},r.prototype.replaceDocumentHTML=function(){return document.documentElement.innerHTML=this.html},r.prototype.activateBodyScriptElements=function(){var t,e,r,n,o,i;for(n=this.getScriptElements(),i=[],e=0,r=n.length;r>e;e++)o=n[e],t=this.createScriptElement(o),i.push(o.parentNode.replaceChild(t,o));return i},r.prototype.getScriptElements=function(){return document.documentElement.querySelectorAll("script")},r}(t.Renderer)}.call(this),function(){t.View=function(){function e(t){this.delegate=t,this.element=document.documentElement}return e.prototype.getRootLocation=function(){return this.getSnapshot().getRootLocation()},e.prototype.getSnapshot=function(){return t.Snapshot.fromElement(this.element)},e.prototype.render=function(t,e){var r,n,o;return o=t.snapshot,r=t.error,n=t.isPreview,this.markAsPreview(n),null!=o?this.renderSnapshot(o,e):this.renderError(r,e)},e.prototype.markAsPreview=function(t){return t?this.element.setAttribute("data-turbolinks-preview",""):this.element.removeAttribute("data-turbolinks-preview")},e.prototype.renderSnapshot=function(e,r){return t.SnapshotRenderer.render(this.delegate,r,this.getSnapshot(),t.Snapshot.wrap(e))},e.prototype.renderError=function(e,r){return t.ErrorRenderer.render(this.delegate,r,e)},e}()}.call(this),function(){var e=function(t,e){return function(){return t.apply(e,arguments)}};t.ScrollManager=function(){function r(r){this.delegate=r,this.onScroll=e(this.onScroll,this),this.onScroll=t.throttle(this.onScroll)}return r.prototype.start=function(){return this.started?void 0:(addEventListener("scroll",this.onScroll,!1),this.onScroll(),this.started=!0)},r.prototype.stop=function(){return this.started?(removeEventListener("scroll",this.onScroll,!1),this.started=!1):void 0},r.prototype.scrollToElement=function(t){return t.scrollIntoView()},r.prototype.scrollToPosition=function(t){var e,r;return e=t.x,r=t.y,window.scrollTo(e,r)},r.prototype.onScroll=function(t){return this.updatePosition({x:window.pageXOffset,y:window.pageYOffset})},r.prototype.updatePosition=function(t){var e;return this.position=t,null!=(e=this.delegate)?e.scrollPositionChanged(this.position):void 0},r}()}.call(this),function(){t.SnapshotCache=function(){function e(t){this.size=t,this.keys=[],this.snapshots={}}var r;return e.prototype.has=function(t){var e;return e=r(t),e in this.snapshots},e.prototype.get=function(t){var e;if(this.has(t))return e=this.read(t),this.touch(t),e},e.prototype.put=function(t,e){return this.write(t,e),this.touch(t),e},e.prototype.read=function(t){var e;return e=r(t),this.snapshots[e]},e.prototype.write=function(t,e){var n;return n=r(t),this.snapshots[n]=e},e.prototype.touch=function(t){var e,n;return n=r(t),e=this.keys.indexOf(n),e>-1&&this.keys.splice(e,1),this.keys.unshift(n),this.trim()},e.prototype.trim=function(){var t,e,r,n,o;for(n=this.keys.splice(this.size),o=[],t=0,r=n.length;r>t;t++)e=n[t],o.push(delete this.snapshots[e]);return o},r=function(e){return t.Location.wrap(e).toCacheKey()},e}()}.call(this),function(){var e=function(t,e){return function(){return t.apply(e,arguments)}};t.Visit=function(){function r(r,n,o){this.controller=r,this.action=o,this.performScroll=e(this.performScroll,this),this.identifier=t.uuid(),this.location=t.Location.wrap(n),this.adapter=this.controller.adapter,this.state="initialized",this.timingMetrics={}}var n;return r.prototype.start=function(){return"initialized"===this.state?(this.recordTimingMetric("visitStart"),this.state="started",this.adapter.visitStarted(this)):void 0},r.prototype.cancel=function(){var t;return"started"===this.state?(null!=(t=this.request)&&t.cancel(),this.cancelRender(),this.state="canceled"):void 0},r.prototype.complete=function(){var t;return"started"===this.state?(this.recordTimingMetric("visitEnd"),this.state="completed","function"==typeof(t=this.adapter).visitCompleted&&t.visitCompleted(this),this.controller.visitCompleted(this)):void 0},r.prototype.fail=function(){var t;return"started"===this.state?(this.state="failed","function"==typeof(t=this.adapter).visitFailed?t.visitFailed(this):void 0):void 0},r.prototype.changeHistory=function(){var t,e;return this.historyChanged?void 0:(t=this.location.isEqualTo(this.referrer)?"replace":this.action,e=n(t),this.controller[e](this.location,this.restorationIdentifier),this.historyChanged=!0)},r.prototype.issueRequest=function(){return this.shouldIssueRequest()&&null==this.request?(this.progress=0,this.request=new t.HttpRequest(this,this.location,this.referrer),this.request.send()):void 0},r.prototype.getCachedSnapshot=function(){var t;return!(t=this.controller.getCachedSnapshotForLocation(this.location))||null!=this.location.anchor&&!t.hasAnchor(this.location.anchor)||"restore"!==this.action&&!t.isPreviewable()?void 0:t},r.prototype.hasCachedSnapshot=function(){return null!=this.getCachedSnapshot()},r.prototype.loadCachedSnapshot=function(){var t,e;return(e=this.getCachedSnapshot())?(t=this.shouldIssueRequest(),this.render(function(){var r;return this.cacheSnapshot(),this.controller.render({snapshot:e,isPreview:t},this.performScroll),"function"==typeof(r=this.adapter).visitRendered&&r.visitRendered(this),t?void 0:this.complete()})):void 0},r.prototype.loadResponse=function(){return null!=this.response?this.render(function(){var t,e;return this.cacheSnapshot(),this.request.failed?(this.controller.render({error:this.response},this.performScroll),"function"==typeof(t=this.adapter).visitRendered&&t.visitRendered(this),this.fail()):(this.controller.render({snapshot:this.response},this.performScroll),"function"==typeof(e=this.adapter).visitRendered&&e.visitRendered(this),this.complete())}):void 0},r.prototype.followRedirect=function(){return this.redirectedToLocation&&!this.followedRedirect?(this.location=this.redirectedToLocation,this.controller.replaceHistoryWithLocationAndRestorationIdentifier(this.redirectedToLocation,this.restorationIdentifier),this.followedRedirect=!0):void 0},r.prototype.requestStarted=function(){var t;return this.recordTimingMetric("requestStart"),"function"==typeof(t=this.adapter).visitRequestStarted?t.visitRequestStarted(this):void 0},r.prototype.requestProgressed=function(t){var e;return this.progress=t,"function"==typeof(e=this.adapter).visitRequestProgressed?e.visitRequestProgressed(this):void 0},r.prototype.requestCompletedWithResponse=function(e,r){return this.response=e,null!=r&&(this.redirectedToLocation=t.Location.wrap(r)),this.adapter.visitRequestCompleted(this)},r.prototype.requestFailedWithStatusCode=function(t,e){return this.response=e,this.adapter.visitRequestFailedWithStatusCode(this,t)},r.prototype.requestFinished=function(){var t;return this.recordTimingMetric("requestEnd"),"function"==typeof(t=this.adapter).visitRequestFinished?t.visitRequestFinished(this):void 0},r.prototype.performScroll=function(){return this.scrolled?void 0:("restore"===this.action?this.scrollToRestoredPosition()||this.scrollToTop():this.scrollToAnchor()||this.scrollToTop(),this.scrolled=!0)},r.prototype.scrollToRestoredPosition=function(){var t,e;return t=null!=(e=this.restorationData)?e.scrollPosition:void 0,null!=t?(this.controller.scrollToPosition(t),!0):void 0},r.prototype.scrollToAnchor=function(){return null!=this.location.anchor?(this.controller.scrollToAnchor(this.location.anchor),!0):void 0},r.prototype.scrollToTop=function(){return this.controller.scrollToPosition({x:0,y:0})},r.prototype.recordTimingMetric=function(t){var e;return null!=(e=this.timingMetrics)[t]?e[t]:e[t]=(new Date).getTime()},r.prototype.getTimingMetrics=function(){return t.copyObject(this.timingMetrics)},n=function(t){switch(t){case"replace":return"replaceHistoryWithLocationAndRestorationIdentifier";case"advance":case"restore":return"pushHistoryWithLocationAndRestorationIdentifier"}},r.prototype.shouldIssueRequest=function(){return"restore"===this.action?!this.hasCachedSnapshot():!0},r.prototype.cacheSnapshot=function(){return this.snapshotCached?void 0:(this.controller.cacheSnapshot(),this.snapshotCached=!0)},r.prototype.render=function(t){return this.cancelRender(),this.frame=requestAnimationFrame(function(e){return function(){return e.frame=null,t.call(e)}}(this))},r.prototype.cancelRender=function(){return this.frame?cancelAnimationFrame(this.frame):void 0},r}()}.call(this),function(){var e=function(t,e){return function(){return t.apply(e,arguments)}};t.Controller=function(){function r(){this.clickBubbled=e(this.clickBubbled,this),this.clickCaptured=e(this.clickCaptured,this),this.pageLoaded=e(this.pageLoaded,this),this.history=new t.History(this),this.view=new t.View(this),this.scrollManager=new t.ScrollManager(this),this.restorationData={},this.clearCache()}return r.prototype.start=function(){return t.supported&&!this.started?(addEventListener("click",this.clickCaptured,!0),addEventListener("DOMContentLoaded",this.pageLoaded,!1),this.scrollManager.start(),this.startHistory(),this.started=!0,this.enabled=!0):void 0},r.prototype.disable=function(){return this.enabled=!1},r.prototype.stop=function(){return this.started?(removeEventListener("click",this.clickCaptured,!0),removeEventListener("DOMContentLoaded",this.pageLoaded,!1),this.scrollManager.stop(),this.stopHistory(),this.started=!1):void 0},r.prototype.clearCache=function(){return this.cache=new t.SnapshotCache(10)},r.prototype.visit=function(e,r){var n,o;return null==r&&(r={}),e=t.Location.wrap(e),this.applicationAllowsVisitingLocation(e)?this.locationIsVisitable(e)?(n=null!=(o=r.action)?o:"advance",this.adapter.visitProposedToLocationWithAction(e,n)):window.location=e:void 0},r.prototype.startVisitToLocationWithAction=function(e,r,n){var o;return t.supported?(o=this.getRestorationDataForIdentifier(n),this.startVisit(e,r,{restorationData:o})):window.location=e},r.prototype.startHistory=function(){return this.location=t.Location.wrap(window.location),this.restorationIdentifier=t.uuid(),this.history.start(),this.history.replace(this.location,this.restorationIdentifier)},r.prototype.stopHistory=function(){return this.history.stop()},r.prototype.pushHistoryWithLocationAndRestorationIdentifier=function(e,r){return this.restorationIdentifier=r,this.location=t.Location.wrap(e),this.history.push(this.location,this.restorationIdentifier)},r.prototype.replaceHistoryWithLocationAndRestorationIdentifier=function(e,r){return this.restorationIdentifier=r,this.location=t.Location.wrap(e),this.history.replace(this.location,this.restorationIdentifier)},r.prototype.historyPoppedToLocationWithRestorationIdentifier=function(e,r){var n;return this.restorationIdentifier=r,this.enabled?(n=this.getRestorationDataForIdentifier(this.restorationIdentifier),this.startVisit(e,"restore",{restorationIdentifier:this.restorationIdentifier,restorationData:n,historyChanged:!0}),this.location=t.Location.wrap(e)):this.adapter.pageInvalidated()},r.prototype.getCachedSnapshotForLocation=function(t){var e;return e=this.cache.get(t),e?e.clone():void 0},r.prototype.shouldCacheSnapshot=function(){return this.view.getSnapshot().isCacheable()},r.prototype.cacheSnapshot=function(){var t;return this.shouldCacheSnapshot()?(this.notifyApplicationBeforeCachingSnapshot(),t=this.view.getSnapshot(),this.cache.put(this.lastRenderedLocation,t.clone())):void 0},r.prototype.scrollToAnchor=function(t){var e;return(e=document.getElementById(t))?this.scrollToElement(e):this.scrollToPosition({x:0,y:0})},r.prototype.scrollToElement=function(t){return this.scrollManager.scrollToElement(t)},r.prototype.scrollToPosition=function(t){return this.scrollManager.scrollToPosition(t)},r.prototype.scrollPositionChanged=function(t){var e;return e=this.getCurrentRestorationData(),e.scrollPosition=t},r.prototype.render=function(t,e){return this.view.render(t,e)},r.prototype.viewInvalidated=function(){return this.adapter.pageInvalidated()},r.prototype.viewWillRender=function(t){return this.notifyApplicationBeforeRender(t)},r.prototype.viewRendered=function(){return this.lastRenderedLocation=this.currentVisit.location,this.notifyApplicationAfterRender()},r.prototype.pageLoaded=function(){return this.lastRenderedLocation=this.location,this.notifyApplicationAfterPageLoad()},r.prototype.clickCaptured=function(){return removeEventListener("click",this.clickBubbled,!1),addEventListener("click",this.clickBubbled,!1)},r.prototype.clickBubbled=function(t){var e,r,n;return this.enabled&&this.clickEventIsSignificant(t)&&(r=this.getVisitableLinkForNode(t.target))&&(n=this.getVisitableLocationForLink(r))&&this.applicationAllowsFollowingLinkToLocation(r,n)?(t.preventDefault(),e=this.getActionForLink(r),this.visit(n,{action:e})):void 0},r.prototype.applicationAllowsFollowingLinkToLocation=function(t,e){var r;return r=this.notifyApplicationAfterClickingLinkToLocation(t,e),!r.defaultPrevented},r.prototype.applicationAllowsVisitingLocation=function(t){var e;return e=this.notifyApplicationBeforeVisitingLocation(t),!e.defaultPrevented},r.prototype.notifyApplicationAfterClickingLinkToLocation=function(e,r){return t.dispatch("turbolinks:click",{target:e,data:{url:r.absoluteURL},cancelable:!0})},r.prototype.notifyApplicationBeforeVisitingLocation=function(e){return t.dispatch("turbolinks:before-visit",{data:{url:e.absoluteURL},cancelable:!0})},r.prototype.notifyApplicationAfterVisitingLocation=function(e){return t.dispatch("turbolinks:visit",{data:{url:e.absoluteURL}})},r.prototype.notifyApplicationBeforeCachingSnapshot=function(){return t.dispatch("turbolinks:before-cache")},r.prototype.notifyApplicationBeforeRender=function(e){
return t.dispatch("turbolinks:before-render",{data:{newBody:e}})},r.prototype.notifyApplicationAfterRender=function(){return t.dispatch("turbolinks:render")},r.prototype.notifyApplicationAfterPageLoad=function(e){return null==e&&(e={}),t.dispatch("turbolinks:load",{data:{url:this.location.absoluteURL,timing:e}})},r.prototype.startVisit=function(t,e,r){var n;return null!=(n=this.currentVisit)&&n.cancel(),this.currentVisit=this.createVisit(t,e,r),this.currentVisit.start(),this.notifyApplicationAfterVisitingLocation(t)},r.prototype.createVisit=function(e,r,n){var o,i,s,a,u;return i=null!=n?n:{},a=i.restorationIdentifier,s=i.restorationData,o=i.historyChanged,u=new t.Visit(this,e,r),u.restorationIdentifier=null!=a?a:t.uuid(),u.restorationData=t.copyObject(s),u.historyChanged=o,u.referrer=this.location,u},r.prototype.visitCompleted=function(t){return this.notifyApplicationAfterPageLoad(t.getTimingMetrics())},r.prototype.clickEventIsSignificant=function(t){return!(t.defaultPrevented||t.target.isContentEditable||t.which>1||t.altKey||t.ctrlKey||t.metaKey||t.shiftKey)},r.prototype.getVisitableLinkForNode=function(e){return this.nodeIsVisitable(e)?t.closest(e,"a[href]:not([target]):not([download])"):void 0},r.prototype.getVisitableLocationForLink=function(e){var r;return r=new t.Location(e.getAttribute("href")),this.locationIsVisitable(r)?r:void 0},r.prototype.getActionForLink=function(t){var e;return null!=(e=t.getAttribute("data-turbolinks-action"))?e:"advance"},r.prototype.nodeIsVisitable=function(e){var r;return(r=t.closest(e,"[data-turbolinks]"))?"false"!==r.getAttribute("data-turbolinks"):!0},r.prototype.locationIsVisitable=function(t){return t.isPrefixedBy(this.view.getRootLocation())&&t.isHTML()},r.prototype.getCurrentRestorationData=function(){return this.getRestorationDataForIdentifier(this.restorationIdentifier)},r.prototype.getRestorationDataForIdentifier=function(t){var e;return null!=(e=this.restorationData)[t]?e[t]:e[t]={}},r}()}.call(this),function(){var e,r,n;t.start=function(){return r()?(null==t.controller&&(t.controller=e()),t.controller.start()):void 0},r=function(){return null==window.Turbolinks&&(window.Turbolinks=t),n()},e=function(){var e;return e=new t.Controller,e.adapter=new t.BrowserAdapter(e),e},n=function(){return window.Turbolinks===t},n()&&t.start()}.call(this)}).call(this),"object"==typeof module&&module.exports?module.exports=t:"function"==typeof define&&define.amd&&define(t)}).call(this);
(function() {
  (function() {
    (function() {
      var slice = [].slice;

      this.ActionCable = {
        INTERNAL: {
          "message_types": {
            "welcome": "welcome",
            "ping": "ping",
            "confirmation": "confirm_subscription",
            "rejection": "reject_subscription"
          },
          "default_mount_path": "/cable",
          "protocols": ["actioncable-v1-json", "actioncable-unsupported"]
        },
        WebSocket: window.WebSocket,
        logger: window.console,
        createConsumer: function(url) {
          var ref;
          if (url == null) {
            url = (ref = this.getConfig("url")) != null ? ref : this.INTERNAL.default_mount_path;
          }
          return new ActionCable.Consumer(this.createWebSocketURL(url));
        },
        getConfig: function(name) {
          var element;
          element = document.head.querySelector("meta[name='action-cable-" + name + "']");
          return element != null ? element.getAttribute("content") : void 0;
        },
        createWebSocketURL: function(url) {
          var a;
          if (url && !/^wss?:/i.test(url)) {
            a = document.createElement("a");
            a.href = url;
            a.href = a.href;
            a.protocol = a.protocol.replace("http", "ws");
            return a.href;
          } else {
            return url;
          }
        },
        startDebugging: function() {
          return this.debugging = true;
        },
        stopDebugging: function() {
          return this.debugging = null;
        },
        log: function() {
          var messages, ref;
          messages = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          if (this.debugging) {
            messages.push(Date.now());
            return (ref = this.logger).log.apply(ref, ["[ActionCable]"].concat(slice.call(messages)));
          }
        }
      };

    }).call(this);
  }).call(this);

  var ActionCable = this.ActionCable;

  (function() {
    (function() {
      var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

      ActionCable.ConnectionMonitor = (function() {
        var clamp, now, secondsSince;

        ConnectionMonitor.pollInterval = {
          min: 3,
          max: 30
        };

        ConnectionMonitor.staleThreshold = 6;

        function ConnectionMonitor(connection) {
          this.connection = connection;
          this.visibilityDidChange = bind(this.visibilityDidChange, this);
          this.reconnectAttempts = 0;
        }

        ConnectionMonitor.prototype.start = function() {
          if (!this.isRunning()) {
            this.startedAt = now();
            delete this.stoppedAt;
            this.startPolling();
            document.addEventListener("visibilitychange", this.visibilityDidChange);
            return ActionCable.log("ConnectionMonitor started. pollInterval = " + (this.getPollInterval()) + " ms");
          }
        };

        ConnectionMonitor.prototype.stop = function() {
          if (this.isRunning()) {
            this.stoppedAt = now();
            this.stopPolling();
            document.removeEventListener("visibilitychange", this.visibilityDidChange);
            return ActionCable.log("ConnectionMonitor stopped");
          }
        };

        ConnectionMonitor.prototype.isRunning = function() {
          return (this.startedAt != null) && (this.stoppedAt == null);
        };

        ConnectionMonitor.prototype.recordPing = function() {
          return this.pingedAt = now();
        };

        ConnectionMonitor.prototype.recordConnect = function() {
          this.reconnectAttempts = 0;
          this.recordPing();
          delete this.disconnectedAt;
          return ActionCable.log("ConnectionMonitor recorded connect");
        };

        ConnectionMonitor.prototype.recordDisconnect = function() {
          this.disconnectedAt = now();
          return ActionCable.log("ConnectionMonitor recorded disconnect");
        };

        ConnectionMonitor.prototype.startPolling = function() {
          this.stopPolling();
          return this.poll();
        };

        ConnectionMonitor.prototype.stopPolling = function() {
          return clearTimeout(this.pollTimeout);
        };

        ConnectionMonitor.prototype.poll = function() {
          return this.pollTimeout = setTimeout((function(_this) {
            return function() {
              _this.reconnectIfStale();
              return _this.poll();
            };
          })(this), this.getPollInterval());
        };

        ConnectionMonitor.prototype.getPollInterval = function() {
          var interval, max, min, ref;
          ref = this.constructor.pollInterval, min = ref.min, max = ref.max;
          interval = 5 * Math.log(this.reconnectAttempts + 1);
          return Math.round(clamp(interval, min, max) * 1000);
        };

        ConnectionMonitor.prototype.reconnectIfStale = function() {
          if (this.connectionIsStale()) {
            ActionCable.log("ConnectionMonitor detected stale connection. reconnectAttempts = " + this.reconnectAttempts + ", pollInterval = " + (this.getPollInterval()) + " ms, time disconnected = " + (secondsSince(this.disconnectedAt)) + " s, stale threshold = " + this.constructor.staleThreshold + " s");
            this.reconnectAttempts++;
            if (this.disconnectedRecently()) {
              return ActionCable.log("ConnectionMonitor skipping reopening recent disconnect");
            } else {
              ActionCable.log("ConnectionMonitor reopening");
              return this.connection.reopen();
            }
          }
        };

        ConnectionMonitor.prototype.connectionIsStale = function() {
          var ref;
          return secondsSince((ref = this.pingedAt) != null ? ref : this.startedAt) > this.constructor.staleThreshold;
        };

        ConnectionMonitor.prototype.disconnectedRecently = function() {
          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;
        };

        ConnectionMonitor.prototype.visibilityDidChange = function() {
          if (document.visibilityState === "visible") {
            return setTimeout((function(_this) {
              return function() {
                if (_this.connectionIsStale() || !_this.connection.isOpen()) {
                  ActionCable.log("ConnectionMonitor reopening stale connection on visibilitychange. visbilityState = " + document.visibilityState);
                  return _this.connection.reopen();
                }
              };
            })(this), 200);
          }
        };

        now = function() {
          return new Date().getTime();
        };

        secondsSince = function(time) {
          return (now() - time) / 1000;
        };

        clamp = function(number, min, max) {
          return Math.max(min, Math.min(max, number));
        };

        return ConnectionMonitor;

      })();

    }).call(this);
    (function() {
      var i, message_types, protocols, ref, supportedProtocols, unsupportedProtocol,
        slice = [].slice,
        bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
        indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

      ref = ActionCable.INTERNAL, message_types = ref.message_types, protocols = ref.protocols;

      supportedProtocols = 2 <= protocols.length ? slice.call(protocols, 0, i = protocols.length - 1) : (i = 0, []), unsupportedProtocol = protocols[i++];

      ActionCable.Connection = (function() {
        Connection.reopenDelay = 500;

        function Connection(consumer) {
          this.consumer = consumer;
          this.open = bind(this.open, this);
          this.subscriptions = this.consumer.subscriptions;
          this.monitor = new ActionCable.ConnectionMonitor(this);
          this.disconnected = true;
        }

        Connection.prototype.send = function(data) {
          if (this.isOpen()) {
            this.webSocket.send(JSON.stringify(data));
            return true;
          } else {
            return false;
          }
        };

        Connection.prototype.open = function() {
          if (this.isActive()) {
            ActionCable.log("Attempted to open WebSocket, but existing socket is " + (this.getState()));
            return false;
          } else {
            ActionCable.log("Opening WebSocket, current state is " + (this.getState()) + ", subprotocols: " + protocols);
            if (this.webSocket != null) {
              this.uninstallEventHandlers();
            }
            this.webSocket = new ActionCable.WebSocket(this.consumer.url, protocols);
            this.installEventHandlers();
            this.monitor.start();
            return true;
          }
        };

        Connection.prototype.close = function(arg) {
          var allowReconnect, ref1;
          allowReconnect = (arg != null ? arg : {
            allowReconnect: true
          }).allowReconnect;
          if (!allowReconnect) {
            this.monitor.stop();
          }
          if (this.isActive()) {
            return (ref1 = this.webSocket) != null ? ref1.close() : void 0;
          }
        };

        Connection.prototype.reopen = function() {
          var error;
          ActionCable.log("Reopening WebSocket, current state is " + (this.getState()));
          if (this.isActive()) {
            try {
              return this.close();
            } catch (error1) {
              error = error1;
              return ActionCable.log("Failed to reopen WebSocket", error);
            } finally {
              ActionCable.log("Reopening WebSocket in " + this.constructor.reopenDelay + "ms");
              setTimeout(this.open, this.constructor.reopenDelay);
            }
          } else {
            return this.open();
          }
        };

        Connection.prototype.getProtocol = function() {
          var ref1;
          return (ref1 = this.webSocket) != null ? ref1.protocol : void 0;
        };

        Connection.prototype.isOpen = function() {
          return this.isState("open");
        };

        Connection.prototype.isActive = function() {
          return this.isState("open", "connecting");
        };

        Connection.prototype.isProtocolSupported = function() {
          var ref1;
          return ref1 = this.getProtocol(), indexOf.call(supportedProtocols, ref1) >= 0;
        };

        Connection.prototype.isState = function() {
          var ref1, states;
          states = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return ref1 = this.getState(), indexOf.call(states, ref1) >= 0;
        };

        Connection.prototype.getState = function() {
          var ref1, state, value;
          for (state in WebSocket) {
            value = WebSocket[state];
            if (value === ((ref1 = this.webSocket) != null ? ref1.readyState : void 0)) {
              return state.toLowerCase();
            }
          }
          return null;
        };

        Connection.prototype.installEventHandlers = function() {
          var eventName, handler;
          for (eventName in this.events) {
            handler = this.events[eventName].bind(this);
            this.webSocket["on" + eventName] = handler;
          }
        };

        Connection.prototype.uninstallEventHandlers = function() {
          var eventName;
          for (eventName in this.events) {
            this.webSocket["on" + eventName] = function() {};
          }
        };

        Connection.prototype.events = {
          message: function(event) {
            var identifier, message, ref1, type;
            if (!this.isProtocolSupported()) {
              return;
            }
            ref1 = JSON.parse(event.data), identifier = ref1.identifier, message = ref1.message, type = ref1.type;
            switch (type) {
              case message_types.welcome:
                this.monitor.recordConnect();
                return this.subscriptions.reload();
              case message_types.ping:
                return this.monitor.recordPing();
              case message_types.confirmation:
                return this.subscriptions.notify(identifier, "connected");
              case message_types.rejection:
                return this.subscriptions.reject(identifier);
              default:
                return this.subscriptions.notify(identifier, "received", message);
            }
          },
          open: function() {
            ActionCable.log("WebSocket onopen event, using '" + (this.getProtocol()) + "' subprotocol");
            this.disconnected = false;
            if (!this.isProtocolSupported()) {
              ActionCable.log("Protocol is unsupported. Stopping monitor and disconnecting.");
              return this.close({
                allowReconnect: false
              });
            }
          },
          close: function(event) {
            ActionCable.log("WebSocket onclose event");
            if (this.disconnected) {
              return;
            }
            this.disconnected = true;
            this.monitor.recordDisconnect();
            return this.subscriptions.notifyAll("disconnected", {
              willAttemptReconnect: this.monitor.isRunning()
            });
          },
          error: function() {
            return ActionCable.log("WebSocket onerror event");
          }
        };

        return Connection;

      })();

    }).call(this);
    (function() {
      var slice = [].slice;

      ActionCable.Subscriptions = (function() {
        function Subscriptions(consumer) {
          this.consumer = consumer;
          this.subscriptions = [];
        }

        Subscriptions.prototype.create = function(channelName, mixin) {
          var channel, params, subscription;
          channel = channelName;
          params = typeof channel === "object" ? channel : {
            channel: channel
          };
          subscription = new ActionCable.Subscription(this.consumer, params, mixin);
          return this.add(subscription);
        };

        Subscriptions.prototype.add = function(subscription) {
          this.subscriptions.push(subscription);
          this.consumer.ensureActiveConnection();
          this.notify(subscription, "initialized");
          this.sendCommand(subscription, "subscribe");
          return subscription;
        };

        Subscriptions.prototype.remove = function(subscription) {
          this.forget(subscription);
          if (!this.findAll(subscription.identifier).length) {
            this.sendCommand(subscription, "unsubscribe");
          }
          return subscription;
        };

        Subscriptions.prototype.reject = function(identifier) {
          var i, len, ref, results, subscription;
          ref = this.findAll(identifier);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            subscription = ref[i];
            this.forget(subscription);
            this.notify(subscription, "rejected");
            results.push(subscription);
          }
          return results;
        };

        Subscriptions.prototype.forget = function(subscription) {
          var s;
          this.subscriptions = (function() {
            var i, len, ref, results;
            ref = this.subscriptions;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              s = ref[i];
              if (s !== subscription) {
                results.push(s);
              }
            }
            return results;
          }).call(this);
          return subscription;
        };

        Subscriptions.prototype.findAll = function(identifier) {
          var i, len, ref, results, s;
          ref = this.subscriptions;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            s = ref[i];
            if (s.identifier === identifier) {
              results.push(s);
            }
          }
          return results;
        };

        Subscriptions.prototype.reload = function() {
          var i, len, ref, results, subscription;
          ref = this.subscriptions;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            subscription = ref[i];
            results.push(this.sendCommand(subscription, "subscribe"));
          }
          return results;
        };

        Subscriptions.prototype.notifyAll = function() {
          var args, callbackName, i, len, ref, results, subscription;
          callbackName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          ref = this.subscriptions;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            subscription = ref[i];
            results.push(this.notify.apply(this, [subscription, callbackName].concat(slice.call(args))));
          }
          return results;
        };

        Subscriptions.prototype.notify = function() {
          var args, callbackName, i, len, results, subscription, subscriptions;
          subscription = arguments[0], callbackName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
          if (typeof subscription === "string") {
            subscriptions = this.findAll(subscription);
          } else {
            subscriptions = [subscription];
          }
          results = [];
          for (i = 0, len = subscriptions.length; i < len; i++) {
            subscription = subscriptions[i];
            results.push(typeof subscription[callbackName] === "function" ? subscription[callbackName].apply(subscription, args) : void 0);
          }
          return results;
        };

        Subscriptions.prototype.sendCommand = function(subscription, command) {
          var identifier;
          identifier = subscription.identifier;
          return this.consumer.send({
            command: command,
            identifier: identifier
          });
        };

        return Subscriptions;

      })();

    }).call(this);
    (function() {
      ActionCable.Subscription = (function() {
        var extend;

        function Subscription(consumer, params, mixin) {
          this.consumer = consumer;
          if (params == null) {
            params = {};
          }
          this.identifier = JSON.stringify(params);
          extend(this, mixin);
        }

        Subscription.prototype.perform = function(action, data) {
          if (data == null) {
            data = {};
          }
          data.action = action;
          return this.send(data);
        };

        Subscription.prototype.send = function(data) {
          return this.consumer.send({
            command: "message",
            identifier: this.identifier,
            data: JSON.stringify(data)
          });
        };

        Subscription.prototype.unsubscribe = function() {
          return this.consumer.subscriptions.remove(this);
        };

        extend = function(object, properties) {
          var key, value;
          if (properties != null) {
            for (key in properties) {
              value = properties[key];
              object[key] = value;
            }
          }
          return object;
        };

        return Subscription;

      })();

    }).call(this);
    (function() {
      ActionCable.Consumer = (function() {
        function Consumer(url) {
          this.url = url;
          this.subscriptions = new ActionCable.Subscriptions(this);
          this.connection = new ActionCable.Connection(this);
        }

        Consumer.prototype.send = function(data) {
          return this.connection.send(data);
        };

        Consumer.prototype.connect = function() {
          return this.connection.open();
        };

        Consumer.prototype.disconnect = function() {
          return this.connection.close({
            allowReconnect: false
          });
        };

        Consumer.prototype.ensureActiveConnection = function() {
          if (!this.connection.isActive()) {
            return this.connection.open();
          }
        };

        return Consumer;

      })();

    }).call(this);
  }).call(this);

  if (typeof module === "object" && module.exports) {
    module.exports = ActionCable;
  } else if (typeof define === "function" && define.amd) {
    define(ActionCable);
  }
}).call(this);
// Action Cable provides the framework to deal with WebSockets in Rails.
// You can generate new channels where WebSocket features live using the `rails generate channel` command.
//




(function() {
  this.App || (this.App = {});

  App.cable = ActionCable.createConsumer();

}).call(this);
(function() {


}).call(this);
/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under the MIT license
 */

if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";var b=a.fn.jquery.split(" ")[0].split(".");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1||b[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){if(a(b.target).is(this))return b.handleObj.handler.apply(this,arguments)}})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var c=a(this),e=c.data("bs.alert");e||c.data("bs.alert",e=new d(this)),"string"==typeof b&&e[b].call(c)})}var c='[data-dismiss="alert"]',d=function(b){a(b).on("click",c,this.close)};d.VERSION="3.3.7",d.TRANSITION_DURATION=150,d.prototype.close=function(b){function c(){g.detach().trigger("closed.bs.alert").remove()}var e=a(this),f=e.attr("data-target");f||(f=e.attr("href"),f=f&&f.replace(/.*(?=#[^\s]*$)/,""));var g=a("#"===f?[]:f);b&&b.preventDefault(),g.length||(g=e.closest(".alert")),g.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(g.removeClass("in"),a.support.transition&&g.hasClass("fade")?g.one("bsTransitionEnd",c).emulateTransitionEnd(d.TRANSITION_DURATION):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on("click.bs.alert.data-api",c,d.prototype.close)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof b&&b;e||d.data("bs.button",e=new c(this,f)),"toggle"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION="3.3.7",c.DEFAULTS={loadingText:"loading..."},c.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",null==f.resetText&&d.data("resetText",d[e]()),setTimeout(a.proxy(function(){d[e](null==f[b]?this.options[b]:f[b]),"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c).prop(c,!0)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c).prop(c,!1))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")?(c.prop("checked")&&(a=!1),b.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==c.prop("type")&&(c.prop("checked")!==this.$element.hasClass("active")&&(a=!1),this.$element.toggleClass("active")),c.prop("checked",this.$element.hasClass("active")),a&&c.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(c){var d=a(c.target).closest(".btn");b.call(d,"toggle"),a(c.target).is('input[type="radio"], input[type="checkbox"]')||(c.preventDefault(),d.is("input,button")?d.trigger("focus"):d.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(b){a(b.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(b.type))})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b),g="string"==typeof b?b:f.slide;e||d.data("bs.carousel",e=new c(this,f)),"number"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",a.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",a.proxy(this.pause,this)).on("mouseleave.bs.carousel",a.proxy(this.cycle,this))};c.VERSION="3.3.7",c.TRANSITION_DURATION=600,c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},c.prototype.keydown=function(a){if(!/input|textarea/i.test(a.target.tagName)){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()}},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(".item"),this.$items.index(a||this.$active)},c.prototype.getItemForDirection=function(a,b){var c=this.getItemIndex(b),d="prev"==a&&0===c||"next"==a&&c==this.$items.length-1;if(d&&!this.options.wrap)return b;var e="prev"==a?-1:1,f=(c+e)%this.$items.length;return this.$items.eq(f)},c.prototype.to=function(a){var b=this,c=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(a>this.$items.length-1||a<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){b.to(a)}):c==a?this.pause().cycle():this.slide(a>c?"next":"prev",this.$items.eq(a))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){if(!this.sliding)return this.slide("next")},c.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},c.prototype.slide=function(b,d){var e=this.$element.find(".item.active"),f=d||this.getItemForDirection(b,e),g=this.interval,h="next"==b?"left":"right",i=this;if(f.hasClass("active"))return this.sliding=!1;var j=f[0],k=a.Event("slide.bs.carousel",{relatedTarget:j,direction:h});if(this.$element.trigger(k),!k.isDefaultPrevented()){if(this.sliding=!0,g&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=a(this.$indicators.children()[this.getItemIndex(f)]);l&&l.addClass("active")}var m=a.Event("slid.bs.carousel",{relatedTarget:j,direction:h});return a.support.transition&&this.$element.hasClass("slide")?(f.addClass(b),f[0].offsetWidth,e.addClass(h),f.addClass(h),e.one("bsTransitionEnd",function(){f.removeClass([b,h].join(" ")).addClass("active"),e.removeClass(["active",h].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger(m)},0)}).emulateTransitionEnd(c.TRANSITION_DURATION)):(e.removeClass("active"),f.addClass("active"),this.sliding=!1,this.$element.trigger(m)),g&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this};var e=function(c){var d,e=a(this),f=a(e.attr("data-target")||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""));if(f.hasClass("carousel")){var g=a.extend({},f.data(),e.data()),h=e.attr("data-slide-to");h&&(g.interval=!1),b.call(f,g),h&&f.data("bs.carousel").to(h),c.preventDefault()}};a(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){"use strict";function b(b){var c,d=b.attr("data-target")||(c=b.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"");return a(d)}function c(b){return this.each(function(){var c=a(this),e=c.data("bs.collapse"),f=a.extend({},d.DEFAULTS,c.data(),"object"==typeof b&&b);!e&&f.toggle&&/show|hide/.test(b)&&(f.toggle=!1),e||c.data("bs.collapse",e=new d(this,f)),"string"==typeof b&&e[b]()})}var d=function(b,c){this.$element=a(b),this.options=a.extend({},d.DEFAULTS,c),this.$trigger=a('[data-toggle="collapse"][href="#'+b.id+'"],[data-toggle="collapse"][data-target="#'+b.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};d.VERSION="3.3.7",d.TRANSITION_DURATION=350,d.DEFAULTS={toggle:!0},d.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},d.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(b=e.data("bs.collapse"),b&&b.transitioning))){var f=a.Event("show.bs.collapse");if(this.$element.trigger(f),!f.isDefaultPrevented()){e&&e.length&&(c.call(e,"hide"),b||e.data("bs.collapse",null));var g=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var h=function(){this.$element.removeClass("collapsing").addClass("collapse in")[g](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return h.call(this);var i=a.camelCase(["scroll",g].join("-"));this.$element.one("bsTransitionEnd",a.proxy(h,this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i])}}}},d.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var e=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return a.support.transition?void this.$element[c](0).one("bsTransitionEnd",a.proxy(e,this)).emulateTransitionEnd(d.TRANSITION_DURATION):e.call(this)}}},d.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},d.prototype.getParent=function(){return a(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(a.proxy(function(c,d){var e=a(d);this.addAriaAndCollapsedClass(b(e),e)},this)).end()},d.prototype.addAriaAndCollapsedClass=function(a,b){var c=a.hasClass("in");a.attr("aria-expanded",c),b.toggleClass("collapsed",!c).attr("aria-expanded",c)};var e=a.fn.collapse;a.fn.collapse=c,a.fn.collapse.Constructor=d,a.fn.collapse.noConflict=function(){return a.fn.collapse=e,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(d){var e=a(this);e.attr("data-target")||d.preventDefault();var f=b(e),g=f.data("bs.collapse"),h=g?"toggle":e.data();c.call(f,h)})}(jQuery),+function(a){"use strict";function b(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}function c(c){c&&3===c.which||(a(e).remove(),a(f).each(function(){var d=a(this),e=b(d),f={relatedTarget:this};e.hasClass("open")&&(c&&"click"==c.type&&/input|textarea/i.test(c.target.tagName)&&a.contains(e[0],c.target)||(e.trigger(c=a.Event("hide.bs.dropdown",f)),c.isDefaultPrevented()||(d.attr("aria-expanded","false"),e.removeClass("open").trigger(a.Event("hidden.bs.dropdown",f)))))}))}function d(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new g(this)),"string"==typeof b&&d[b].call(c)})}var e=".dropdown-backdrop",f='[data-toggle="dropdown"]',g=function(b){a(b).on("click.bs.dropdown",this.toggle)};g.VERSION="3.3.7",g.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=b(e),g=f.hasClass("open");if(c(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click",c);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),f.toggleClass("open").trigger(a.Event("shown.bs.dropdown",h))}return!1}},g.prototype.keydown=function(c){if(/(38|40|27|32)/.test(c.which)&&!/input|textarea/i.test(c.target.tagName)){var d=a(this);if(c.preventDefault(),c.stopPropagation(),!d.is(".disabled, :disabled")){var e=b(d),g=e.hasClass("open");if(!g&&27!=c.which||g&&27==c.which)return 27==c.which&&e.find(f).trigger("focus"),d.trigger("click");var h=" li:not(.disabled):visible a",i=e.find(".dropdown-menu"+h);if(i.length){var j=i.index(c.target);38==c.which&&j>0&&j--,40==c.which&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger("focus")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on("click.bs.dropdown.data-api",c).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",f,g.prototype.toggle).on("keydown.bs.dropdown.data-api",f,g.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",g.prototype.keydown)}(jQuery),+function(a){"use strict";function b(b,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},c.DEFAULTS,e.data(),"object"==typeof b&&b);f||e.data("bs.modal",f=new c(this,g)),"string"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};c.VERSION="3.3.7",c.TRANSITION_DURATION=300,c.BACKDROP_TRANSITION_DURATION=150,c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var d=this,e=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){d.$element.one("mouseup.dismiss.bs.modal",function(b){a(b.target).is(d.$element)&&(d.ignoreBackdropClick=!0)})}),this.backdrop(function(){var e=a.support.transition&&d.$element.hasClass("fade");d.$element.parent().length||d.$element.appendTo(d.$body),d.$element.show().scrollTop(0),d.adjustDialog(),e&&d.$element[0].offsetWidth,d.$element.addClass("in"),d.enforceFocus();var f=a.Event("shown.bs.modal",{relatedTarget:b});e?d.$dialog.one("bsTransitionEnd",function(){d.$element.trigger("focus").trigger(f)}).emulateTransitionEnd(c.TRANSITION_DURATION):d.$element.trigger("focus").trigger(f)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(c.TRANSITION_DURATION):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){document===a.target||this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger("focus")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},c.prototype.resize=function(){this.isShown?a(window).on("resize.bs.modal",a.proxy(this.handleUpdate,this)):a(window).off("resize.bs.modal")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$body.removeClass("modal-open"),a.resetAdjustments(),a.resetScrollbar(),a.$element.trigger("hidden.bs.modal")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var d=this,e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var f=a.support.transition&&e;if(this.$backdrop=a(document.createElement("div")).addClass("modal-backdrop "+e).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),f&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;f?this.$backdrop.one("bsTransitionEnd",b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var g=function(){d.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):g()}else b&&b()},c.prototype.handleUpdate=function(){this.adjustDialog()},c.prototype.adjustDialog=function(){var a=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&a?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!a?this.scrollbarWidth:""})},c.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},c.prototype.checkScrollbar=function(){var a=window.innerWidth;if(!a){var b=document.documentElement.getBoundingClientRect();a=b.right-Math.abs(b.left)}this.bodyIsOverflowing=document.body.clientWidth<a,this.scrollbarWidth=this.measureScrollbar()},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},c.prototype.measureScrollbar=function(){var a=document.createElement("div");a.className="modal-scrollbar-measure",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(c){var d=a(this),e=d.attr("href"),f=a(d.attr("data-target")||e&&e.replace(/.*(?=#[^\s]+$)/,"")),g=f.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is("a")&&c.preventDefault(),f.one("show.bs.modal",function(a){a.isDefaultPrevented()||f.one("hidden.bs.modal",function(){d.is(":visible")&&d.trigger("focus")})}),b.call(f,g,this)})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof b&&b;!e&&/destroy|hide/.test(b)||(e||d.data("bs.tooltip",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",a,b)};c.VERSION="3.3.7",c.TRANSITION_DURATION=150,c.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},c.prototype.init=function(b,c,d){if(this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(a.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusin"==b.type?"focus":"hover"]=!0),c.tip().hasClass("in")||"in"==c.hoverState?void(c.hoverState="in"):(clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show())},c.prototype.isInStateTrue=function(){for(var a in this.inState)if(this.inState[a])return!0;return!1},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);if(c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusout"==b.type?"focus":"hover"]=!1),!c.isInStateTrue())return clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},c.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var d=a.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!d)return;var e=this,f=this.tip(),g=this.getUID(this.type);this.setContent(),f.attr("id",g),this.$element.attr("aria-describedby",g),this.options.animation&&f.addClass("fade");var h="function"==typeof this.options.placement?this.options.placement.call(this,f[0],this.$element[0]):this.options.placement,i=/\s?auto?\s?/i,j=i.test(h);j&&(h=h.replace(i,"")||"top"),f.detach().css({top:0,left:0,display:"block"}).addClass(h).data("bs."+this.type,this),this.options.container?f.appendTo(this.options.container):f.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var k=this.getPosition(),l=f[0].offsetWidth,m=f[0].offsetHeight;if(j){var n=h,o=this.getPosition(this.$viewport);h="bottom"==h&&k.bottom+m>o.bottom?"top":"top"==h&&k.top-m<o.top?"bottom":"right"==h&&k.right+l>o.width?"left":"left"==h&&k.left-l<o.left?"right":h,f.removeClass(n).addClass(h)}var p=this.getCalculatedOffset(h,k,l,m);this.applyPlacement(p,h);var q=function(){var a=e.hoverState;e.$element.trigger("shown.bs."+e.type),e.hoverState=null,"out"==a&&e.leave(e)};a.support.transition&&this.$tip.hasClass("fade")?f.one("bsTransitionEnd",q).emulateTransitionEnd(c.TRANSITION_DURATION):q()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top+=g,b.left+=h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;"top"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=/top|bottom/.test(c),m=l?2*k.left-e+i:2*k.top-f+j,n=l?"offsetWidth":"offsetHeight";d.offset(b),this.replaceArrow(m,d[0][n],l)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c?"left":"top",50*(1-a/b)+"%").css(c?"top":"left","")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},c.prototype.hide=function(b){function d(){"in"!=e.hoverState&&f.detach(),e.$element&&e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),b&&b()}var e=this,f=a(this.$tip),g=a.Event("hide.bs."+this.type);if(this.$element.trigger(g),!g.isDefaultPrevented())return f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one("bsTransitionEnd",d).emulateTransitionEnd(c.TRANSITION_DURATION):d(),this.hoverState=null,this},c.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d="BODY"==c.tagName,e=c.getBoundingClientRect();null==e.width&&(e=a.extend({},e,{width:e.right-e.left,height:e.bottom-e.top}));var f=window.SVGElement&&c instanceof window.SVGElement,g=d?{top:0,left:0}:f?null:b.offset(),h={scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop()},i=d?{width:a(window).width(),height:a(window).height()}:null;return a.extend({},e,h,i,g)},c.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.right&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){if(!this.$tip&&(this.$tip=a(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data("bs."+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c))),b?(c.inState.click=!c.inState.click,c.isInStateTrue()?c.enter(c):c.leave(c)):c.tip().hasClass("in")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){var a=this;clearTimeout(this.timeout),this.hide(function(){a.$element.off("."+a.type).removeData("bs."+a.type),a.$tip&&a.$tip.detach(),a.$tip=null,a.$arrow=null,a.$viewport=null,a.$element=null})};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof b&&b;!e&&/destroy|hide/.test(b)||(e||d.data("bs.popover",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");c.VERSION="3.3.7",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){"use strict";function b(c,d){this.$body=a(document.body),this.$scrollElement=a(a(c).is(document.body)?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",a.proxy(this.process,this)),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})}b.VERSION="3.3.7",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b=this,c="offset",d=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),a.isWindow(this.$scrollElement[0])||(c="position",d=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var b=a(this),e=b.data("target")||b.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[c]().top+d,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){b.offsets.push(this[0]),b.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<e[0])return this.activeTarget=null,this.clear();for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(void 0===e[a+1]||b<e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){
this.activeTarget=b,this.clear();var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")},b.prototype.clear=function(){a(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on("load.bs.scrollspy.data-api",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new c(this)),"string"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION="3.3.7",c.TRANSITION_DURATION=150,c.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a"),f=a.Event("hide.bs.tab",{relatedTarget:b[0]}),g=a.Event("show.bs.tab",{relatedTarget:e[0]});if(e.trigger(f),b.trigger(g),!g.isDefaultPrevented()&&!f.isDefaultPrevented()){var h=a(d);this.activate(b.closest("li"),c),this.activate(h,h.parent(),function(){e.trigger({type:"hidden.bs.tab",relatedTarget:b[0]}),b.trigger({type:"shown.bs.tab",relatedTarget:e[0]})})}}},c.prototype.activate=function(b,d,e){function f(){g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),h?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu").length&&b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),e&&e()}var g=d.find("> .active"),h=e&&a.support.transition&&(g.length&&g.hasClass("fade")||!!d.find("> .fade").length);g.length&&h?g.one("bsTransitionEnd",f).emulateTransitionEnd(c.TRANSITION_DURATION):f(),g.removeClass("in")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this};var e=function(c){c.preventDefault(),b.call(a(this),"show")};a(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',e).on("click.bs.tab.data-api",'[data-toggle="pill"]',e)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof b&&b;e||d.data("bs.affix",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};c.VERSION="3.3.7",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getState=function(a,b,c,d){var e=this.$target.scrollTop(),f=this.$element.offset(),g=this.$target.height();if(null!=c&&"top"==this.affixed)return e<c&&"top";if("bottom"==this.affixed)return null!=c?!(e+this.unpin<=f.top)&&"bottom":!(e+g<=a-d)&&"bottom";var h=null==this.affixed,i=h?e:f.top,j=h?g:b;return null!=c&&e<=c?"top":null!=d&&i+j>=a-d&&"bottom"},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var b=this.$element.height(),d=this.options.offset,e=d.top,f=d.bottom,g=Math.max(a(document).height(),a(document.body).height());"object"!=typeof d&&(f=e=d),"function"==typeof e&&(e=d.top(this.$element)),"function"==typeof f&&(f=d.bottom(this.$element));var h=this.getState(g,b,e,f);if(this.affixed!=h){null!=this.unpin&&this.$element.css("top","");var i="affix"+(h?"-"+h:""),j=a.Event(i+".bs.affix");if(this.$element.trigger(j),j.isDefaultPrevented())return;this.affixed=h,this.unpin="bottom"==h?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix","affixed")+".bs.affix")}"bottom"==h&&this.$element.offset({top:g-b-f})}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},null!=d.offsetBottom&&(d.offset.bottom=d.offsetBottom),null!=d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);
/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 * 
 * This is a custom build that does NOT consist of all validators. Only popular validators are included:
 * - between
 * - callback
 * - choice
 * - color
 * - creditCard
 * - date
 * - different
 * - digits
 * - emailAddress
 * - file
 * - greaterThan
 * - identical
 * - integer
 * - lessThan
 * - notEmpty
 * - numeric
 * - promise
 * - regexp
 * - remote
 * - stringLength
 * - uri
 *
 * Use formValidation(.min).js file if you want to have all validators.
 *
 * @version     v0.8.1, built on 2016-07-29 1:10:54 AM
 * @author      https://twitter.com/formvalidation
 * @copyright   (c) 2013 - 2016 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */

if(window.FormValidation={AddOn:{},Framework:{},I18n:{},Validator:{}},"undefined"==typeof jQuery)throw new Error("FormValidation requires jQuery");!function(a){var b=a.fn.jquery.split(" ")[0].split(".");if(+b[0]<2&&+b[1]<9||1===+b[0]&&9===+b[1]&&+b[2]<1)throw new Error("FormValidation requires jQuery version 1.9.1 or higher")}(jQuery),function(a){FormValidation.Base=function(b,c,d){this.$form=a(b),this.options=a.extend({},a.fn.formValidation.DEFAULT_OPTIONS,c),this._namespace=d||"fv",this.$invalidFields=a([]),this.$submitButton=null,this.$hiddenButton=null,this.STATUS_NOT_VALIDATED="NOT_VALIDATED",this.STATUS_VALIDATING="VALIDATING",this.STATUS_INVALID="INVALID",this.STATUS_VALID="VALID",this.STATUS_IGNORED="IGNORED",this.DEFAULT_MESSAGE=a.fn.formValidation.DEFAULT_MESSAGE,this._ieVersion=function(){for(var a=3,b=document.createElement("div"),c=b.all||[];b.innerHTML="<!--[if gt IE "+ ++a+"]><br><![endif]-->",c[0];);return a>4?a:document.documentMode}();var e=document.createElement("div");this._changeEvent=9!==this._ieVersion&&"oninput"in e?"input":"keyup",this._submitIfValid=null,this._cacheFields={},this._init()},FormValidation.Base.prototype={constructor:FormValidation.Base,_exceedThreshold:function(b){var c=this._namespace,d=b.attr("data-"+c+"-field"),e=this.options.fields[d].threshold||this.options.threshold;if(!e)return!0;var f=-1!==a.inArray(b.attr("type"),["button","checkbox","file","hidden","image","radio","reset","submit"]);return f||b.val().length>=e},_init:function(){var b=this,c=this._namespace,d={addOns:{},autoFocus:this.$form.attr("data-"+c+"-autofocus"),button:{selector:this.$form.attr("data-"+c+"-button-selector")||this.$form.attr("data-"+c+"-submitbuttons"),disabled:this.$form.attr("data-"+c+"-button-disabled")},control:{valid:this.$form.attr("data-"+c+"-control-valid"),invalid:this.$form.attr("data-"+c+"-control-invalid")},err:{clazz:this.$form.attr("data-"+c+"-err-clazz"),container:this.$form.attr("data-"+c+"-err-container")||this.$form.attr("data-"+c+"-container"),parent:this.$form.attr("data-"+c+"-err-parent")},events:{formInit:this.$form.attr("data-"+c+"-events-form-init"),formPreValidate:this.$form.attr("data-"+c+"-events-form-prevalidate"),formError:this.$form.attr("data-"+c+"-events-form-error"),formReset:this.$form.attr("data-"+c+"-events-form-reset"),formSuccess:this.$form.attr("data-"+c+"-events-form-success"),fieldAdded:this.$form.attr("data-"+c+"-events-field-added"),fieldRemoved:this.$form.attr("data-"+c+"-events-field-removed"),fieldInit:this.$form.attr("data-"+c+"-events-field-init"),fieldError:this.$form.attr("data-"+c+"-events-field-error"),fieldReset:this.$form.attr("data-"+c+"-events-field-reset"),fieldSuccess:this.$form.attr("data-"+c+"-events-field-success"),fieldStatus:this.$form.attr("data-"+c+"-events-field-status"),localeChanged:this.$form.attr("data-"+c+"-events-locale-changed"),validatorError:this.$form.attr("data-"+c+"-events-validator-error"),validatorSuccess:this.$form.attr("data-"+c+"-events-validator-success"),validatorIgnored:this.$form.attr("data-"+c+"-events-validator-ignored")},excluded:this.$form.attr("data-"+c+"-excluded"),icon:{valid:this.$form.attr("data-"+c+"-icon-valid")||this.$form.attr("data-"+c+"-feedbackicons-valid"),invalid:this.$form.attr("data-"+c+"-icon-invalid")||this.$form.attr("data-"+c+"-feedbackicons-invalid"),validating:this.$form.attr("data-"+c+"-icon-validating")||this.$form.attr("data-"+c+"-feedbackicons-validating"),feedback:this.$form.attr("data-"+c+"-icon-feedback")},live:this.$form.attr("data-"+c+"-live"),locale:this.$form.attr("data-"+c+"-locale"),message:this.$form.attr("data-"+c+"-message"),onPreValidate:this.$form.attr("data-"+c+"-onprevalidate"),onError:this.$form.attr("data-"+c+"-onerror"),onReset:this.$form.attr("data-"+c+"-onreset"),onSuccess:this.$form.attr("data-"+c+"-onsuccess"),row:{selector:this.$form.attr("data-"+c+"-row-selector")||this.$form.attr("data-"+c+"-group"),valid:this.$form.attr("data-"+c+"-row-valid"),invalid:this.$form.attr("data-"+c+"-row-invalid"),feedback:this.$form.attr("data-"+c+"-row-feedback")},threshold:this.$form.attr("data-"+c+"-threshold"),trigger:this.$form.attr("data-"+c+"-trigger"),verbose:this.$form.attr("data-"+c+"-verbose"),fields:{}};this.$form.attr("novalidate","novalidate").addClass(this.options.elementClass).on("submit."+c,function(a){a.preventDefault(),b.validate()}).on("click."+c,this.options.button.selector,function(){b.$submitButton=a(this),b._submitIfValid=!0}),(this.options.declarative===!0||"true"===this.options.declarative)&&this.$form.find("[name], [data-"+c+"-field]").each(function(){var e=a(this),f=e.attr("name")||e.attr("data-"+c+"-field"),g=b._parseOptions(e);g&&(e.attr("data-"+c+"-field",f),d.fields[f]=a.extend({},g,d.fields[f]))}),this.options=a.extend(!0,this.options,d),"string"==typeof this.options.err.parent&&(this.options.err.parent=new RegExp(this.options.err.parent)),this.options.container&&(this.options.err.container=this.options.container,delete this.options.container),this.options.feedbackIcons&&(this.options.icon=a.extend(!0,this.options.icon,this.options.feedbackIcons),delete this.options.feedbackIcons),this.options.group&&(this.options.row.selector=this.options.group,delete this.options.group),this.options.submitButtons&&(this.options.button.selector=this.options.submitButtons,delete this.options.submitButtons),FormValidation.I18n[this.options.locale]||(this.options.locale=a.fn.formValidation.DEFAULT_OPTIONS.locale),(this.options.declarative===!0||"true"===this.options.declarative)&&(this.options=a.extend(!0,this.options,{addOns:this._parseAddOnOptions()})),this.$hiddenButton=a("<button/>").attr("type","submit").prependTo(this.$form).addClass("fv-hidden-submit").css({display:"none",width:0,height:0}),this.$form.on("click."+this._namespace,'[type="submit"]',function(c){if(!c.isDefaultPrevented()){var d=a(c.target),e=d.is('[type="submit"]')?d.eq(0):d.parent('[type="submit"]').eq(0);if(b.options.button.selector&&!e.is(b.options.button.selector)&&!e.is(b.$hiddenButton))return b.$form.off("submit."+b._namespace).submit(),!1}});for(var e in this.options.fields)this._initField(e);for(var f in this.options.addOns)"function"==typeof FormValidation.AddOn[f].init&&FormValidation.AddOn[f].init(this,this.options.addOns[f]);this.$form.trigger(a.Event(this.options.events.formInit),{bv:this,fv:this,options:this.options}),this.options.onPreValidate&&this.$form.on(this.options.events.formPreValidate,function(a){FormValidation.Helper.call(b.options.onPreValidate,[a])}),this.options.onSuccess&&this.$form.on(this.options.events.formSuccess,function(a){FormValidation.Helper.call(b.options.onSuccess,[a])}),this.options.onError&&this.$form.on(this.options.events.formError,function(a){FormValidation.Helper.call(b.options.onError,[a])}),this.options.onReset&&this.$form.on(this.options.events.formReset,function(a){FormValidation.Helper.call(b.options.onReset,[a])})},_initField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field");break;case"string":d=this.getFieldElements(b),d.attr("data-"+c+"-field",b)}if(0!==d.length&&null!==this.options.fields[b]&&null!==this.options.fields[b].validators){var e,f,g=this.options.fields[b].validators;for(e in g)f=g[e].alias||e,FormValidation.Validator[f]||delete this.options.fields[b].validators[e];null===this.options.fields[b].enabled&&(this.options.fields[b].enabled=!0);for(var h=this,i=d.length,j=d.attr("type"),k=1===i||"radio"===j||"checkbox"===j,l=this._getFieldTrigger(d.eq(0)),m=this.options.err.clazz.split(" ").join("."),n=a.map(l,function(a){return a+".update."+c}).join(" "),o=0;i>o;o++){var p=d.eq(o),q=this.options.fields[b].row||this.options.row.selector,r=p.closest(q),s="function"==typeof(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container)?(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container).call(this,p,this):this.options.fields[b].container||this.options.fields[b].err||this.options.err.container,t=s&&"tooltip"!==s&&"popover"!==s?a(s):this._getMessageContainer(p,q);s&&"tooltip"!==s&&"popover"!==s&&t.addClass(this.options.err.clazz),t.find("."+m+"[data-"+c+"-validator][data-"+c+'-for="'+b+'"]').remove(),r.find("i[data-"+c+'-icon-for="'+b+'"]').remove(),p.off(n).on(n,function(){h.updateStatus(a(this),h.STATUS_NOT_VALIDATED)}),p.data(c+".messages",t);for(e in g)p.data(c+".result."+e,this.STATUS_NOT_VALIDATED),k&&o!==i-1||a("<small/>").css("display","none").addClass(this.options.err.clazz).attr("data-"+c+"-validator",e).attr("data-"+c+"-for",b).attr("data-"+c+"-result",this.STATUS_NOT_VALIDATED).html(this._getMessage(b,e)).appendTo(t),f=g[e].alias||e,"function"==typeof FormValidation.Validator[f].init&&FormValidation.Validator[f].init(this,p,this.options.fields[b].validators[e],e);if(this.options.fields[b].icon!==!1&&"false"!==this.options.fields[b].icon&&this.options.icon&&this.options.icon.valid&&this.options.icon.invalid&&this.options.icon.validating&&(!k||o===i-1)){r.addClass(this.options.row.feedback);var u=a("<i/>").css("display","none").addClass(this.options.icon.feedback).attr("data-"+c+"-icon-for",b).insertAfter(p);(k?d:p).data(c+".icon",u),("tooltip"===s||"popover"===s)&&((k?d:p).on(this.options.events.fieldError,function(){r.addClass("fv-has-tooltip")}).on(this.options.events.fieldSuccess,function(){r.removeClass("fv-has-tooltip")}),p.off("focus.container."+c).on("focus.container."+c,function(){h._showTooltip(a(this),s)}).off("blur.container."+c).on("blur.container."+c,function(){h._hideTooltip(a(this),s)})),"string"==typeof this.options.fields[b].icon&&"true"!==this.options.fields[b].icon?u.appendTo(a(this.options.fields[b].icon)):this._fixIcon(p,u)}}var v=[];for(e in g)f=g[e].alias||e,g[e].priority=parseInt(g[e].priority||FormValidation.Validator[f].priority||1,10),v.push({validator:e,priority:g[e].priority});v=v.sort(function(a,b){return a.priority-b.priority}),d.data(c+".validators",v).on(this.options.events.fieldSuccess,function(a,b){var c=h.getOptions(b.field,null,"onSuccess");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.fieldError,function(a,b){var c=h.getOptions(b.field,null,"onError");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.fieldReset,function(a,b){var c=h.getOptions(b.field,null,"onReset");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.fieldStatus,function(a,b){var c=h.getOptions(b.field,null,"onStatus");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.validatorError,function(a,b){var c=h.getOptions(b.field,b.validator,"onError");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.validatorIgnored,function(a,b){var c=h.getOptions(b.field,b.validator,"onIgnored");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.validatorSuccess,function(a,b){var c=h.getOptions(b.field,b.validator,"onSuccess");c&&FormValidation.Helper.call(c,[a,b])}),this.onLiveChange(d,"live",function(){h._exceedThreshold(a(this))&&h.validateField(a(this))}),d.trigger(a.Event(this.options.events.fieldInit),{bv:this,fv:this,field:b,element:d})}},_isExcluded:function(b){var c=this._namespace,d=b.attr("data-"+c+"-excluded"),e=b.attr("data-"+c+"-field")||b.attr("name");switch(!0){case!!e&&this.options.fields&&this.options.fields[e]&&("true"===this.options.fields[e].excluded||this.options.fields[e].excluded===!0):case"true"===d:case""===d:return!0;case!!e&&this.options.fields&&this.options.fields[e]&&("false"===this.options.fields[e].excluded||this.options.fields[e].excluded===!1):case"false"===d:return!1;case!!e&&this.options.fields&&this.options.fields[e]&&"function"==typeof this.options.fields[e].excluded:return this.options.fields[e].excluded.call(this,b,this);case!!e&&this.options.fields&&this.options.fields[e]&&"string"==typeof this.options.fields[e].excluded:case d:return FormValidation.Helper.call(this.options.fields[e].excluded,[b,this]);default:if(this.options.excluded){"string"==typeof this.options.excluded&&(this.options.excluded=a.map(this.options.excluded.split(","),function(b){return a.trim(b)}));for(var f=this.options.excluded.length,g=0;f>g;g++)if("string"==typeof this.options.excluded[g]&&b.is(this.options.excluded[g])||"function"==typeof this.options.excluded[g]&&this.options.excluded[g].call(this,b,this)===!0)return!0}return!1}},_getFieldTrigger:function(a){var b=this._namespace,c=a.data(b+".trigger");if(c)return c;var d=a.attr("type"),e=a.attr("data-"+b+"-field"),f="radio"===d||"checkbox"===d||"file"===d||"SELECT"===a.get(0).tagName?"change":this._ieVersion>=10&&a.attr("placeholder")?"keyup":this._changeEvent;return c=((this.options.fields[e]?this.options.fields[e].trigger:null)||this.options.trigger||f).split(" "),a.data(b+".trigger",c),c},_getMessage:function(a,b){if(!this.options.fields[a]||!this.options.fields[a].validators)return"";var c=this.options.fields[a].validators,d=c[b]&&c[b].alias?c[b].alias:b;if(!FormValidation.Validator[d])return"";switch(!0){case!!c[b].message:return c[b].message;case!!this.options.fields[a].message:return this.options.fields[a].message;case!!this.options.message:return this.options.message;case!!FormValidation.I18n[this.options.locale]&&!!FormValidation.I18n[this.options.locale][d]&&!!FormValidation.I18n[this.options.locale][d]["default"]:return FormValidation.I18n[this.options.locale][d]["default"];default:return this.DEFAULT_MESSAGE}},_getMessageContainer:function(a,b){if(!this.options.err.parent)throw new Error("The err.parent option is not defined");var c=a.parent();if(c.is(b))return c;var d=c.attr("class");return d&&this.options.err.parent.test(d)?c:this._getMessageContainer(c,b)},_parseAddOnOptions:function(){var a=this._namespace,b=this.$form.attr("data-"+a+"-addons"),c=this.options.addOns||{};if(b){b=b.replace(/\s/g,"").split(",");for(var d=0;d<b.length;d++)c[b[d]]||(c[b[d]]={})}var e,f,g,h;for(e in c)if(FormValidation.AddOn[e]){if(f=FormValidation.AddOn[e].html5Attributes)for(g in f)h=this.$form.attr("data-"+a+"-addons-"+e.toLowerCase()+"-"+g.toLowerCase()),h&&(c[e][f[g]]=h)}else delete c[e];return c},_parseOptions:function(b){var c,d,e,f,g,h,i,j,k,l=this._namespace,m=b.attr("name")||b.attr("data-"+l+"-field"),n={},o=new RegExp("^data-"+l+"-([a-z]+)-alias$"),p=a.extend({},FormValidation.Validator);a.each(b.get(0).attributes,function(a,b){b.value&&o.test(b.name)&&(d=b.name.split("-")[2],p[b.value]&&(p[d]=p[b.value],p[d].alias=b.value))});for(d in p)if(c=p[d],e="data-"+l+"-"+d.toLowerCase(),f=b.attr(e)+"",k="function"==typeof c.enableByHtml5?c.enableByHtml5(b):null,k&&"false"!==f||k!==!0&&(""===f||"true"===f||e===f.toLowerCase())){c.html5Attributes=a.extend({},{message:"message",onerror:"onError",onreset:"onReset",onsuccess:"onSuccess",priority:"priority",transformer:"transformer"},c.html5Attributes),n[d]=a.extend({},k===!0?{}:k,n[d]),c.alias&&(n[d].alias=c.alias);for(j in c.html5Attributes)g=c.html5Attributes[j],h="data-"+l+"-"+d.toLowerCase()+"-"+j,i=b.attr(h),i&&("true"===i||h===i.toLowerCase()?i=!0:"false"===i&&(i=!1),n[d][g]=i)}var q={autoFocus:b.attr("data-"+l+"-autofocus"),err:b.attr("data-"+l+"-err-container")||b.attr("data-"+l+"-container"),enabled:b.attr("data-"+l+"-enabled"),excluded:b.attr("data-"+l+"-excluded"),icon:b.attr("data-"+l+"-icon")||b.attr("data-"+l+"-feedbackicons")||(this.options.fields&&this.options.fields[m]?this.options.fields[m].feedbackIcons:null),message:b.attr("data-"+l+"-message"),onError:b.attr("data-"+l+"-onerror"),onReset:b.attr("data-"+l+"-onreset"),onStatus:b.attr("data-"+l+"-onstatus"),onSuccess:b.attr("data-"+l+"-onsuccess"),row:b.attr("data-"+l+"-row")||b.attr("data-"+l+"-group")||(this.options.fields&&this.options.fields[m]?this.options.fields[m].group:null),selector:b.attr("data-"+l+"-selector"),threshold:b.attr("data-"+l+"-threshold"),transformer:b.attr("data-"+l+"-transformer"),trigger:b.attr("data-"+l+"-trigger"),verbose:b.attr("data-"+l+"-verbose"),validators:n},r=a.isEmptyObject(q),s=a.isEmptyObject(n);return!s||!r&&this.options.fields&&this.options.fields[m]?q:null},_submit:function(){var b=this.isValid();if(null!==b){var c=b?this.options.events.formSuccess:this.options.events.formError,d=a.Event(c);this.$form.trigger(d),this.$submitButton&&(b?this._onSuccess(d):this._onError(d))}},_onError:function(b){if(!b.isDefaultPrevented()){if("submitted"===this.options.live){this.options.live="enabled";var c=this;for(var d in this.options.fields)!function(b){var d=c.getFieldElements(b);d.length&&c.onLiveChange(d,"live",function(){c._exceedThreshold(a(this))&&c.validateField(a(this))})}(d)}for(var e=this._namespace,f=0;f<this.$invalidFields.length;f++){var g=this.$invalidFields.eq(f),h=this.isOptionEnabled(g.attr("data-"+e+"-field"),"autoFocus");if(h){g.focus();break}}}},_onFieldValidated:function(b,c){var d=this._namespace,e=b.attr("data-"+d+"-field"),f=this.options.fields[e].validators,g={},h=0,i={bv:this,fv:this,field:e,element:b,validator:c,result:b.data(d+".response."+c)};if(c)switch(b.data(d+".result."+c)){case this.STATUS_INVALID:b.trigger(a.Event(this.options.events.validatorError),i);break;case this.STATUS_VALID:b.trigger(a.Event(this.options.events.validatorSuccess),i);break;case this.STATUS_IGNORED:b.trigger(a.Event(this.options.events.validatorIgnored),i)}g[this.STATUS_NOT_VALIDATED]=0,g[this.STATUS_VALIDATING]=0,g[this.STATUS_INVALID]=0,g[this.STATUS_VALID]=0,g[this.STATUS_IGNORED]=0;for(var j in f)if(f[j].enabled!==!1){h++;var k=b.data(d+".result."+j);k&&g[k]++}g[this.STATUS_VALID]+g[this.STATUS_IGNORED]===h?(this.$invalidFields=this.$invalidFields.not(b),b.trigger(a.Event(this.options.events.fieldSuccess),i)):(0===g[this.STATUS_NOT_VALIDATED]||!this.isOptionEnabled(e,"verbose"))&&0===g[this.STATUS_VALIDATING]&&g[this.STATUS_INVALID]>0&&(this.$invalidFields=this.$invalidFields.add(b),b.trigger(a.Event(this.options.events.fieldError),i))},_onSuccess:function(a){a.isDefaultPrevented()||this.disableSubmitButtons(!0).defaultSubmit()},_fixIcon:function(a,b){},_createTooltip:function(a,b,c){},_destroyTooltip:function(a,b){},_hideTooltip:function(a,b){},_showTooltip:function(a,b){},defaultSubmit:function(){var b=this._namespace;this.$submitButton&&a("<input/>").attr({type:"hidden",name:this.$submitButton.attr("name")}).attr("data-"+b+"-submit-hidden","").val(this.$submitButton.val()).appendTo(this.$form),this.$form.off("submit."+b).submit()},disableSubmitButtons:function(a){return a?"disabled"!==this.options.live&&this.$form.find(this.options.button.selector).attr("disabled","disabled").addClass(this.options.button.disabled):this.$form.find(this.options.button.selector).removeAttr("disabled").removeClass(this.options.button.disabled),this},getFieldElements:function(b){if(!this._cacheFields[b])if(this.options.fields[b]&&this.options.fields[b].selector){var c=this.$form.find(this.options.fields[b].selector);this._cacheFields[b]=c.length?c:a(this.options.fields[b].selector)}else this._cacheFields[b]=this.$form.find('[name="'+b+'"]');return this._cacheFields[b]},getFieldValue:function(a,b){var c,d=this._namespace;if("string"==typeof a){if(c=this.getFieldElements(a),0===c.length)return null}else c=a,a=c.attr("data-"+d+"-field");if(!a||!this.options.fields[a])return c.val();var e=(this.options.fields[a].validators&&this.options.fields[a].validators[b]?this.options.fields[a].validators[b].transformer:null)||this.options.fields[a].transformer;return e?FormValidation.Helper.call(e,[c,b,this]):c.val()},getNamespace:function(){return this._namespace},getOptions:function(a,b,c){var d=this._namespace;if(!a)return c?this.options[c]:this.options;if("object"==typeof a&&(a=a.attr("data-"+d+"-field")),!this.options.fields[a])return null;var e=this.options.fields[a];return b?e.validators&&e.validators[b]?c?e.validators[b][c]:e.validators[b]:null:c?e[c]:e},getStatus:function(a,b){var c=this._namespace;switch(typeof a){case"object":return a.data(c+".result."+b);case"string":default:return this.getFieldElements(a).eq(0).data(c+".result."+b)}},isOptionEnabled:function(a,b){return!this.options.fields[a]||"true"!==this.options.fields[a][b]&&this.options.fields[a][b]!==!0?!this.options.fields[a]||"false"!==this.options.fields[a][b]&&this.options.fields[a][b]!==!1?"true"===this.options[b]||this.options[b]===!0:!1:!0},isValid:function(){for(var a in this.options.fields){var b=this.isValidField(a);if(null===b)return null;if(b===!1)return!1}return!0},isValidContainer:function(b){var c=this,d=this._namespace,e=[],f="string"==typeof b?a(b):b;if(0===f.length)return!0;f.find("[data-"+d+"-field]").each(function(){var b=a(this);c._isExcluded(b)||e.push(b)});for(var g=e.length,h=this.options.err.clazz.split(" ").join("."),i=0;g>i;i++){var j=e[i],k=j.attr("data-"+d+"-field"),l=j.data(d+".messages").find("."+h+"[data-"+d+"-validator][data-"+d+'-for="'+k+'"]');if(!this.options.fields||!this.options.fields[k]||"false"!==this.options.fields[k].enabled&&this.options.fields[k].enabled!==!1){if(l.filter("[data-"+d+'-result="'+this.STATUS_INVALID+'"]').length>0)return!1;if(l.filter("[data-"+d+'-result="'+this.STATUS_NOT_VALIDATED+'"]').length>0||l.filter("[data-"+d+'-result="'+this.STATUS_VALIDATING+'"]').length>0)return null}}return!0},isValidField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field");break;case"string":d=this.getFieldElements(b)}if(0===d.length||!this.options.fields[b]||"false"===this.options.fields[b].enabled||this.options.fields[b].enabled===!1)return!0;for(var e,f,g,h=d.attr("type"),i="radio"===h||"checkbox"===h?1:d.length,j=0;i>j;j++)if(e=d.eq(j),!this._isExcluded(e))for(f in this.options.fields[b].validators)if(this.options.fields[b].validators[f].enabled!==!1){if(g=e.data(c+".result."+f),g===this.STATUS_VALIDATING||g===this.STATUS_NOT_VALIDATED)return null;if(g===this.STATUS_INVALID)return!1}return!0},offLiveChange:function(b,c){if(null===b||0===b.length)return this;var d=this._namespace,e=this._getFieldTrigger(b.eq(0)),f=a.map(e,function(a){return a+"."+c+"."+d}).join(" ");return b.off(f),this},onLiveChange:function(b,c,d){if(null===b||0===b.length)return this;var e=this._namespace,f=this._getFieldTrigger(b.eq(0)),g=a.map(f,function(a){return a+"."+c+"."+e}).join(" ");switch(this.options.live){case"submitted":break;case"disabled":b.off(g);break;case"enabled":default:b.off(g).on(g,function(a){d.apply(this,arguments)})}return this},updateMessage:function(b,c,d){var e=this._namespace,f=a([]);switch(typeof b){case"object":f=b,b=b.attr("data-"+e+"-field");break;case"string":f=this.getFieldElements(b)}var g=this.options.err.clazz.split(" ").join(".");return f.each(function(){a(this).data(e+".messages").find("."+g+"[data-"+e+'-validator="'+c+'"][data-'+e+'-for="'+b+'"]').html(d)}),this},updateStatus:function(b,c,d){var e=this._namespace,f=a([]);switch(typeof b){case"object":f=b,b=b.attr("data-"+e+"-field");break;case"string":f=this.getFieldElements(b)}if(!b||!this.options.fields[b])return this;c===this.STATUS_NOT_VALIDATED&&(this._submitIfValid=!1);for(var g=this,h=f.attr("type"),i=this.options.fields[b].row||this.options.row.selector,j="radio"===h||"checkbox"===h?1:f.length,k=this.options.err.clazz.split(" ").join("."),l=0;j>l;l++){var m=f.eq(l);if(!this._isExcluded(m)){var n,o,p=m.closest(i),q=m.data(e+".messages"),r=q.find("."+k+"[data-"+e+"-validator][data-"+e+'-for="'+b+'"]'),s=d?r.filter("[data-"+e+'-validator="'+d+'"]'):r,t=m.data(e+".icon"),u="function"==typeof(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container)?(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container).call(this,m,this):this.options.fields[b].container||this.options.fields[b].err||this.options.err.container,v=null;if(d)m.data(e+".result."+d,c);else for(var w in this.options.fields[b].validators)m.data(e+".result."+w,c);switch(s.attr("data-"+e+"-result",c),c){case this.STATUS_VALIDATING:v=null,this.disableSubmitButtons(!0),m.removeClass(this.options.control.valid).removeClass(this.options.control.invalid),p.removeClass(this.options.row.valid).removeClass(this.options.row.invalid),t&&t.removeClass(this.options.icon.valid).removeClass(this.options.icon.invalid).addClass(this.options.icon.validating).show();break;case this.STATUS_INVALID:v=!1,this.disableSubmitButtons(!0),m.removeClass(this.options.control.valid).addClass(this.options.control.invalid),p.removeClass(this.options.row.valid).addClass(this.options.row.invalid),t&&t.removeClass(this.options.icon.valid).removeClass(this.options.icon.validating).addClass(this.options.icon.invalid).show();break;case this.STATUS_IGNORED:case this.STATUS_VALID:n=r.filter("[data-"+e+'-result="'+this.STATUS_VALIDATING+'"]').length>0,o=r.filter("[data-"+e+'-result="'+this.STATUS_NOT_VALIDATED+'"]').length>0;var x=r.filter("[data-"+e+'-result="'+this.STATUS_IGNORED+'"]').length;v=n||o?null:r.filter("[data-"+e+'-result="'+this.STATUS_VALID+'"]').length+x===r.length,m.removeClass(this.options.control.valid).removeClass(this.options.control.invalid),v===!0?(this.disableSubmitButtons(this.isValid()===!1),c===this.STATUS_VALID&&m.addClass(this.options.control.valid)):v===!1&&(this.disableSubmitButtons(!0),c===this.STATUS_VALID&&m.addClass(this.options.control.invalid)),t&&(t.removeClass(this.options.icon.invalid).removeClass(this.options.icon.validating).removeClass(this.options.icon.valid),(c===this.STATUS_VALID||x!==r.length)&&t.addClass(n?this.options.icon.validating:null===v?"":v?this.options.icon.valid:this.options.icon.invalid).show());var y=this.isValidContainer(p);null!==y&&(p.removeClass(this.options.row.valid).removeClass(this.options.row.invalid),(c===this.STATUS_VALID||x!==r.length)&&p.addClass(y?this.options.row.valid:this.options.row.invalid));break;case this.STATUS_NOT_VALIDATED:default:v=null,this.disableSubmitButtons(!1),m.removeClass(this.options.control.valid).removeClass(this.options.control.invalid),p.removeClass(this.options.row.valid).removeClass(this.options.row.invalid),t&&t.removeClass(this.options.icon.valid).removeClass(this.options.icon.invalid).removeClass(this.options.icon.validating).hide()}!t||"tooltip"!==u&&"popover"!==u?c===this.STATUS_INVALID?s.show():s.hide():v===!1?this._createTooltip(m,r.filter("[data-"+e+'-result="'+g.STATUS_INVALID+'"]').eq(0).html(),u):this._destroyTooltip(m,u),m.trigger(a.Event(this.options.events.fieldStatus),{bv:this,fv:this,field:b,element:m,status:c,validator:d}),this._onFieldValidated(m,d)}}return this},validate:function(){if(a.isEmptyObject(this.options.fields))return this._submit(),this;this.$form.trigger(a.Event(this.options.events.formPreValidate)),this.disableSubmitButtons(!0),this._submitIfValid=!1;for(var b in this.options.fields)this.validateField(b);return this._submit(),this._submitIfValid=!0,this},validateField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field");break;case"string":d=this.getFieldElements(b)}if(0===d.length||!this.options.fields[b]||"false"===this.options.fields[b].enabled||this.options.fields[b].enabled===!1)return this;for(var e,f,g,h=this,i=d.attr("type"),j="radio"!==i&&"checkbox"!==i||"disabled"===this.options.live?d.length:1,k="radio"===i||"checkbox"===i,l=this.options.fields[b].validators,m=this.isOptionEnabled(b,"verbose"),n=0;j>n;n++){var o=d.eq(n);if(!this._isExcluded(o))for(var p=!1,q=o.data(c+".validators"),r=q.length,s=0;r>s&&(e=q[s].validator,o.data(c+".dfs."+e)&&o.data(c+".dfs."+e).reject(),!p);s++){var t=o.data(c+".result."+e);if(t!==this.STATUS_VALID&&t!==this.STATUS_INVALID)if(l[e].enabled!==!1)if(o.data(c+".result."+e,this.STATUS_VALIDATING),f=l[e].alias||e,g=FormValidation.Validator[f].validate(this,o,l[e],e),"object"==typeof g&&g.resolve)this.updateStatus(k?b:o,this.STATUS_VALIDATING,e),o.data(c+".dfs."+e,g),g.done(function(a,b,d){a.removeData(c+".dfs."+b).data(c+".response."+b,d),d.message&&h.updateMessage(a,b,d.message),h.updateStatus(k?a.attr("data-"+c+"-field"):a,d.valid===!0?h.STATUS_VALID:d.valid===!1?h.STATUS_INVALID:h.STATUS_IGNORED,b),d.valid&&h._submitIfValid===!0?h._submit():d.valid!==!1||m||(p=!0)});else if("object"==typeof g&&void 0!==g.valid){if(o.data(c+".response."+e,g),g.message&&this.updateMessage(k?b:o,e,g.message),this.updateStatus(k?b:o,g.valid===!0?this.STATUS_VALID:g.valid===!1?this.STATUS_INVALID:this.STATUS_IGNORED,e),g.valid===!1&&!m)break}else if("boolean"==typeof g){if(o.data(c+".response."+e,g),this.updateStatus(k?b:o,g?this.STATUS_VALID:this.STATUS_INVALID,e),!g&&!m)break}else null===g&&(o.data(c+".response."+e,g),this.updateStatus(k?b:o,this.STATUS_IGNORED,e));else this.updateStatus(k?b:o,this.STATUS_IGNORED,e);else this._onFieldValidated(o,e)}}return this},addField:function(b,c){var d=this._namespace,e=a([]);switch(typeof b){case"object":e=b,b=b.attr("data-"+d+"-field")||b.attr("name");break;case"string":delete this._cacheFields[b],e=this.getFieldElements(b)}e.attr("data-"+d+"-field",b);for(var f=e.attr("type"),g="radio"===f||"checkbox"===f?1:e.length,h=0;g>h;h++){var i=e.eq(h),j=this._parseOptions(i);j=null===j?c:a.extend(!0,j,c),this.options.fields[b]=a.extend(!0,this.options.fields[b],j),this._cacheFields[b]=this._cacheFields[b]?this._cacheFields[b].add(i):i,this._initField("checkbox"===f||"radio"===f?b:i)}return this.disableSubmitButtons(!1),this.$form.trigger(a.Event(this.options.events.fieldAdded),{field:b,element:e,options:this.options.fields[b]}),this},destroy:function(){var a,b,c,d,e,f,g,h,i=this._namespace;for(b in this.options.fields)for(c=this.getFieldElements(b),a=0;a<c.length;a++){d=c.eq(a);for(e in this.options.fields[b].validators)d.data(i+".dfs."+e)&&d.data(i+".dfs."+e).reject(),d.removeData(i+".result."+e).removeData(i+".response."+e).removeData(i+".dfs."+e),h=this.options.fields[b].validators[e].alias||e,"function"==typeof FormValidation.Validator[h].destroy&&FormValidation.Validator[h].destroy(this,d,this.options.fields[b].validators[e],e)}var j=this.options.err.clazz.split(" ").join(".");for(b in this.options.fields)for(c=this.getFieldElements(b),g=this.options.fields[b].row||this.options.row.selector,a=0;a<c.length;a++){d=c.eq(a);var k=d.data(i+".messages");k&&k.find("."+j+"[data-"+i+"-validator][data-"+i+'-for="'+b+'"]').remove(),d.removeData(i+".messages").removeData(i+".validators").closest(g).removeClass(this.options.row.valid).removeClass(this.options.row.invalid).removeClass(this.options.row.feedback).end().off("."+i).removeAttr("data-"+i+"-field");var l="function"==typeof(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container)?(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container).call(this,d,this):this.options.fields[b].container||this.options.fields[b].err||this.options.err.container;("tooltip"===l||"popover"===l)&&this._destroyTooltip(d,l),f=d.data(i+".icon"),f&&f.remove(),d.removeData(i+".icon").removeData(i+".trigger")}for(var m in this.options.addOns)"function"==typeof FormValidation.AddOn[m].destroy&&FormValidation.AddOn[m].destroy(this,this.options.addOns[m]);this.disableSubmitButtons(!1),this.$hiddenButton.remove(),this.$form.removeClass(this.options.elementClass).off("."+i).removeData("bootstrapValidator").removeData("formValidation").find("[data-"+i+"-submit-hidden]").remove().end().find('[type="submit"]').off("click."+i)},enableFieldValidators:function(a,b,c){var d=this.options.fields[a].validators;if(c&&d&&d[c]&&d[c].enabled!==b)this.options.fields[a].validators[c].enabled=b,this.updateStatus(a,this.STATUS_NOT_VALIDATED,c);else if(!c&&this.options.fields[a].enabled!==b){this.options.fields[a].enabled=b;for(var e in d)this.enableFieldValidators(a,b,e)}return this},getDynamicOption:function(a,b){var c="string"==typeof a?this.getFieldElements(a):a,d=c.val();if("function"==typeof b)return FormValidation.Helper.call(b,[d,this,c]);if("string"==typeof b){var e=this.getFieldElements(b);return e.length?e.val():FormValidation.Helper.call(b,[d,this,c])||b}return null},getForm:function(){return this.$form},getInvalidFields:function(){
return this.$invalidFields},getLocale:function(){return this.options.locale},getMessages:function(b,c){var d=this,e=this._namespace,f=[],g=a([]);switch(!0){case b&&"object"==typeof b:g=b;break;case b&&"string"==typeof b:var h=this.getFieldElements(b);if(h.length>0){var i=h.attr("type");g="radio"===i||"checkbox"===i?h.eq(0):h}break;default:g=this.$invalidFields}var j=c?"[data-"+e+'-validator="'+c+'"]':"",k=this.options.err.clazz.split(" ").join(".");return g.each(function(){f=f.concat(a(this).data(e+".messages").find("."+k+"[data-"+e+'-for="'+a(this).attr("data-"+e+"-field")+'"][data-'+e+'-result="'+d.STATUS_INVALID+'"]'+j).map(function(){var b=a(this).attr("data-"+e+"-validator"),c=a(this).attr("data-"+e+"-for");return d.options.fields[c].validators[b].enabled===!1?"":a(this).html()}).get())}),f},getSubmitButton:function(){return this.$submitButton},removeField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field")||b.attr("name"),d.attr("data-"+c+"-field",b);break;case"string":d=this.getFieldElements(b)}if(0===d.length)return this;for(var e=d.attr("type"),f="radio"===e||"checkbox"===e?1:d.length,g=0;f>g;g++){var h=d.eq(g);this.$invalidFields=this.$invalidFields.not(h),this._cacheFields[b]=this._cacheFields[b].not(h)}return this._cacheFields[b]&&0!==this._cacheFields[b].length||delete this.options.fields[b],("checkbox"===e||"radio"===e)&&this._initField(b),this.disableSubmitButtons(!1),this.$form.trigger(a.Event(this.options.events.fieldRemoved),{field:b,element:d}),this},resetField:function(b,c){var d=this._namespace,e=a([]);switch(typeof b){case"object":e=b,b=b.attr("data-"+d+"-field");break;case"string":e=this.getFieldElements(b)}var f=0,g=e.length;if(this.options.fields[b])for(f=0;g>f;f++)for(var h in this.options.fields[b].validators)e.eq(f).removeData(d+".dfs."+h);if(c){var i=e.attr("type");"radio"===i||"checkbox"===i?e.prop("checked",!1).removeAttr("selected"):e.val("")}for(this.updateStatus(b,this.STATUS_NOT_VALIDATED),f=0;g>f;f++)e.eq(f).trigger(a.Event(this.options.events.fieldReset),{fv:this,field:b,element:e.eq(f),resetValue:c});return this},resetForm:function(b){for(var c in this.options.fields)this.resetField(c,b);return this.$invalidFields=a([]),this.$submitButton=null,this.disableSubmitButtons(!1),this.$form.trigger(a.Event(this.options.events.formReset),{fv:this,resetValue:b}),this},revalidateField:function(a){return this.updateStatus(a,this.STATUS_NOT_VALIDATED).validateField(a),this},setLocale:function(b){return this.options.locale=b,this.$form.trigger(a.Event(this.options.events.localeChanged),{locale:b,bv:this,fv:this}),this},updateOption:function(a,b,c,d){var e=this._namespace;return"object"==typeof a&&(a=a.attr("data-"+e+"-field")),this.options.fields[a]&&this.options.fields[a].validators[b]&&(this.options.fields[a].validators[b][c]=d,this.updateStatus(a,this.STATUS_NOT_VALIDATED,b)),this},validateContainer:function(b){var c=this,d=this._namespace,e=[],f="string"==typeof b?a(b):b;if(0===f.length)return this;f.find("[data-"+d+"-field]").each(function(){var b=a(this);c._isExcluded(b)||e.push(b)});for(var g=e.length,h=0;g>h;h++)this.validateField(e[h]);return this}},a.fn.formValidation=function(b){var c=arguments;return this.each(function(){var d=a(this),e=d.data("formValidation"),f="object"==typeof b&&b;if(!e){var g=(f.framework||d.attr("data-fv-framework")||"bootstrap").toLowerCase(),h=g.substr(0,1).toUpperCase()+g.substr(1);if("undefined"==typeof FormValidation.Framework[h])throw new Error("The class FormValidation.Framework."+h+" is not implemented");e=new FormValidation.Framework[h](this,f),d.addClass("fv-form-"+g).data("formValidation",e)}"string"==typeof b&&e[b].apply(e,Array.prototype.slice.call(c,1))})},a.fn.formValidation.Constructor=FormValidation.Base,a.fn.formValidation.DEFAULT_MESSAGE="This value is not valid",a.fn.formValidation.DEFAULT_OPTIONS={autoFocus:!0,declarative:!0,elementClass:"fv-form",events:{formInit:"init.form.fv",formPreValidate:"prevalidate.form.fv",formError:"err.form.fv",formReset:"rst.form.fv",formSuccess:"success.form.fv",fieldAdded:"added.field.fv",fieldRemoved:"removed.field.fv",fieldInit:"init.field.fv",fieldError:"err.field.fv",fieldReset:"rst.field.fv",fieldSuccess:"success.field.fv",fieldStatus:"status.field.fv",localeChanged:"changed.locale.fv",validatorError:"err.validator.fv",validatorSuccess:"success.validator.fv",validatorIgnored:"ignored.validator.fv"},excluded:[":disabled",":hidden",":not(:visible)"],fields:null,live:"enabled",locale:"en_US",message:null,threshold:null,verbose:!0,button:{selector:'[type="submit"]:not([formnovalidate])',disabled:""},control:{valid:"",invalid:""},err:{clazz:"",container:null,parent:null},icon:{valid:null,invalid:null,validating:null,feedback:""},row:{selector:null,valid:"",invalid:"",feedback:""}}}(jQuery),function(a){FormValidation.Helper={call:function(a,b){if("function"==typeof a)return a.apply(this,b);if("string"==typeof a){"()"===a.substring(a.length-2)&&(a=a.substring(0,a.length-2));for(var c=a.split("."),d=c.pop(),e=window,f=0;f<c.length;f++)e=e[c[f]];return"undefined"==typeof e[d]?null:e[d].apply(this,b)}},date:function(a,b,c,d){if(isNaN(a)||isNaN(b)||isNaN(c))return!1;if(c.length>2||b.length>2||a.length>4)return!1;if(c=parseInt(c,10),b=parseInt(b,10),a=parseInt(a,10),1e3>a||a>9999||0>=b||b>12)return!1;var e=[31,28,31,30,31,30,31,31,30,31,30,31];if((a%400===0||a%100!==0&&a%4===0)&&(e[1]=29),0>=c||c>e[b-1])return!1;if(d===!0){var f=new Date,g=f.getFullYear(),h=f.getMonth(),i=f.getDate();return g>a||a===g&&h>b-1||a===g&&b-1===h&&i>c}return!0},format:function(b,c){a.isArray(c)||(c=[c]);for(var d in c)b=b.replace("%s",c[d]);return b},luhn:function(a){for(var b=a.length,c=0,d=[[0,1,2,3,4,5,6,7,8,9],[0,2,4,6,8,1,3,5,7,9]],e=0;b--;)e+=d[c][parseInt(a.charAt(b),10)],c^=1;return e%10===0&&e>0},mod11And10:function(a){for(var b=5,c=a.length,d=0;c>d;d++)b=(2*(b||10)%11+parseInt(a.charAt(d),10))%10;return 1===b},mod37And36:function(a,b){b=b||"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var c=b.length,d=a.length,e=Math.floor(c/2),f=0;d>f;f++)e=(2*(e||c)%(c+1)+b.indexOf(a.charAt(f)))%c;return 1===e}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{between:{"default":"Please enter a value between %s and %s",notInclusive:"Please enter a value between %s and %s strictly"}}}),FormValidation.Validator.between={html5Attributes:{message:"message",min:"min",max:"max",inclusive:"inclusive"},enableByHtml5:function(a){return"range"===a.attr("type")?{min:a.attr("min"),max:a.attr("max")}:!1},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;f=this._format(f);var g=b.getLocale(),h=a.isNumeric(d.min)?d.min:b.getDynamicOption(c,d.min),i=a.isNumeric(d.max)?d.max:b.getDynamicOption(c,d.max),j=this._format(h),k=this._format(i);return d.inclusive===!0||void 0===d.inclusive?{valid:a.isNumeric(f)&&parseFloat(f)>=j&&parseFloat(f)<=k,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].between["default"],[h,i])}:{valid:a.isNumeric(f)&&parseFloat(f)>j&&parseFloat(f)<k,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].between.notInclusive,[h,i])}},_format:function(a){return(a+"").replace(",",".")}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{callback:{"default":"Please enter a valid value"}}}),FormValidation.Validator.callback={priority:999,html5Attributes:{message:"message",callback:"callback"},validate:function(b,c,d,e){var f=b.getFieldValue(c,e),g=new a.Deferred,h={valid:!0};if(d.callback){var i=FormValidation.Helper.call(d.callback,[f,b,c]);h="boolean"==typeof i||null===i?{valid:i}:i}return g.resolve(c,e,h),g}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{choice:{"default":"Please enter a valid value",less:"Please choose %s options at minimum",more:"Please choose %s options at maximum",between:"Please choose %s - %s options"}}}),FormValidation.Validator.choice={html5Attributes:{message:"message",min:"min",max:"max"},validate:function(b,c,d,e){var f=b.getLocale(),g=b.getNamespace(),h=c.is("select")?b.getFieldElements(c.attr("data-"+g+"-field")).find("option").filter(":selected").length:b.getFieldElements(c.attr("data-"+g+"-field")).filter(":checked").length,i=d.min?a.isNumeric(d.min)?d.min:b.getDynamicOption(c,d.min):null,j=d.max?a.isNumeric(d.max)?d.max:b.getDynamicOption(c,d.max):null,k=!0,l=d.message||FormValidation.I18n[f].choice["default"];switch((i&&h<parseInt(i,10)||j&&h>parseInt(j,10))&&(k=!1),!0){case!!i&&!!j:l=FormValidation.Helper.format(d.message||FormValidation.I18n[f].choice.between,[parseInt(i,10),parseInt(j,10)]);break;case!!i:l=FormValidation.Helper.format(d.message||FormValidation.I18n[f].choice.less,parseInt(i,10));break;case!!j:l=FormValidation.Helper.format(d.message||FormValidation.I18n[f].choice.more,parseInt(j,10))}return{valid:k,message:l}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{color:{"default":"Please enter a valid color"}}}),FormValidation.Validator.color={html5Attributes:{message:"message",type:"type"},enableByHtml5:function(a){return"color"===a.attr("type")},SUPPORTED_TYPES:["hex","rgb","rgba","hsl","hsla","keyword"],KEYWORD_COLORS:["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","transparent","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;if(this.enableByHtml5(c))return/^#[0-9A-F]{6}$/i.test(f);var g=d.type||this.SUPPORTED_TYPES;a.isArray(g)||(g=g.replace(/s/g,"").split(","));for(var h,i,j=!1,k=0;k<g.length;k++)if(i=g[k],h="_"+i.toLowerCase(),j=j||this[h](f))return!0;return!1},_hex:function(a){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)},_hsl:function(a){return/^hsl\((\s*(-?\d+)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*)\)$/.test(a)},_hsla:function(a){return/^hsla\((\s*(-?\d+)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*,){2}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/.test(a)},_keyword:function(b){return a.inArray(b,this.KEYWORD_COLORS)>=0},_rgb:function(a){var b=/^rgb\((\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*,){2}(\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*)\)$/,c=/^rgb\((\s*(\b(0?\d{1,2}|100)\b%)\s*,){2}(\s*(\b(0?\d{1,2}|100)\b%)\s*)\)$/;return b.test(a)||c.test(a)},_rgba:function(a){var b=/^rgba\((\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*,){3}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/,c=/^rgba\((\s*(\b(0?\d{1,2}|100)\b%)\s*,){3}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/;return b.test(a)||c.test(a)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{creditCard:{"default":"Please enter a valid credit card number"}}}),FormValidation.Validator.creditCard={validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;if(/[^0-9-\s]+/.test(f))return!1;if(f=f.replace(/\D/g,""),!FormValidation.Helper.luhn(f))return!1;var g,h,i={AMERICAN_EXPRESS:{length:[15],prefix:["34","37"]},DANKORT:{length:[16],prefix:["5019"]},DINERS_CLUB:{length:[14],prefix:["300","301","302","303","304","305","36"]},DINERS_CLUB_US:{length:[16],prefix:["54","55"]},DISCOVER:{length:[16],prefix:["6011","622126","622127","622128","622129","62213","62214","62215","62216","62217","62218","62219","6222","6223","6224","6225","6226","6227","6228","62290","62291","622920","622921","622922","622923","622924","622925","644","645","646","647","648","649","65"]},ELO:{length:[16],prefix:["4011","4312","4389","4514","4573","4576","5041","5066","5067","509","6277","6362","6363","650","6516","6550"]},FORBRUGSFORENINGEN:{length:[16],prefix:["600722"]},JCB:{length:[16],prefix:["3528","3529","353","354","355","356","357","358"]},LASER:{length:[16,17,18,19],prefix:["6304","6706","6771","6709"]},MAESTRO:{length:[12,13,14,15,16,17,18,19],prefix:["5018","5020","5038","5868","6304","6759","6761","6762","6763","6764","6765","6766"]},MASTERCARD:{length:[16],prefix:["51","52","53","54","55"]},SOLO:{length:[16,18,19],prefix:["6334","6767"]},UNIONPAY:{length:[16,17,18,19],prefix:["622126","622127","622128","622129","62213","62214","62215","62216","62217","62218","62219","6222","6223","6224","6225","6226","6227","6228","62290","62291","622920","622921","622922","622923","622924","622925"]},VISA_ELECTRON:{length:[16],prefix:["4026","417500","4405","4508","4844","4913","4917"]},VISA:{length:[16],prefix:["4"]}};for(g in i)for(h in i[g].prefix)if(f.substr(0,i[g].prefix[h].length)===i[g].prefix[h]&&-1!==a.inArray(f.length,i[g].length))return{valid:!0,type:g};return!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{date:{"default":"Please enter a valid date",min:"Please enter a date after %s",max:"Please enter a date before %s",range:"Please enter a date in the range %s - %s"}}}),FormValidation.Validator.date={html5Attributes:{message:"message",format:"format",min:"min",max:"max",separator:"separator"},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;d.format=d.format||"MM/DD/YYYY","date"===c.attr("type")&&(d.format="YYYY-MM-DD");var g=b.getLocale(),h=d.message||FormValidation.I18n[g].date["default"],i=d.format.split(" "),j=i[0],k=i.length>1?i[1]:null,l=i.length>2?i[2]:null,m=f.split(" "),n=m[0],o=m.length>1?m[1]:null;if(i.length!==m.length)return{valid:!1,message:h};var p=d.separator;if(p||(p=-1!==n.indexOf("/")?"/":-1!==n.indexOf("-")?"-":-1!==n.indexOf(".")?".":null),null===p||-1===n.indexOf(p))return{valid:!1,message:h};if(n=n.split(p),j=j.split(p),n.length!==j.length)return{valid:!1,message:h};var q=n[a.inArray("YYYY",j)],r=n[a.inArray("MM",j)],s=n[a.inArray("DD",j)];if(!q||!r||!s||4!==q.length)return{valid:!1,message:h};var t=null,u=null,v=null;if(k){if(k=k.split(":"),o=o.split(":"),k.length!==o.length)return{valid:!1,message:h};if(u=o.length>0?o[0]:null,t=o.length>1?o[1]:null,v=o.length>2?o[2]:null,""===u||""===t||""===v)return{valid:!1,message:h};if(v){if(isNaN(v)||v.length>2)return{valid:!1,message:h};if(v=parseInt(v,10),0>v||v>60)return{valid:!1,message:h}}if(u){if(isNaN(u)||u.length>2)return{valid:!1,message:h};if(u=parseInt(u,10),0>u||u>=24||l&&u>12)return{valid:!1,message:h}}if(t){if(isNaN(t)||t.length>2)return{valid:!1,message:h};if(t=parseInt(t,10),0>t||t>59)return{valid:!1,message:h}}}var w=FormValidation.Helper.date(q,r,s),x=null,y=null,z=d.min,A=d.max;switch(z&&(x=z instanceof Date?z:this._parseDate(z,j,p)||this._parseDate(b.getDynamicOption(c,z),j,p),z=this._formatDate(x,d.format)),A&&(y=A instanceof Date?A:this._parseDate(A,j,p)||this._parseDate(b.getDynamicOption(c,A),j,p),A=this._formatDate(y,d.format)),n=new Date(q,r-1,s,u,t,v),!0){case z&&!A&&w:w=n.getTime()>=x.getTime(),h=d.message||FormValidation.Helper.format(FormValidation.I18n[g].date.min,z);break;case A&&!z&&w:w=n.getTime()<=y.getTime(),h=d.message||FormValidation.Helper.format(FormValidation.I18n[g].date.max,A);break;case A&&z&&w:w=n.getTime()<=y.getTime()&&n.getTime()>=x.getTime(),h=d.message||FormValidation.Helper.format(FormValidation.I18n[g].date.range,[z,A])}return{valid:w,date:n,message:h}},_parseDate:function(b,c,d){if(b instanceof Date)return b;if("string"!=typeof b)return null;var e=a.inArray("YYYY",c),f=a.inArray("MM",c),g=a.inArray("DD",c);if(-1===e||-1===f||-1===g)return null;var h=0,i=0,j=0,k=b.split(" "),l=k[0].split(d);if(l.length<3)return null;if(k.length>1){var m=k[1].split(":");i=m.length>0?m[0]:null,h=m.length>1?m[1]:null,j=m.length>2?m[2]:null}return new Date(l[e],l[f]-1,l[g],i,h,j)},_formatDate:function(a,b){b=b.replace(/Y/g,"y").replace(/M/g,"m").replace(/D/g,"d").replace(/:m/g,":M").replace(/:mm/g,":MM").replace(/:S/,":s").replace(/:SS/,":ss");var c={d:function(a){return a.getDate()},dd:function(a){var b=a.getDate();return 10>b?"0"+b:b},m:function(a){return a.getMonth()+1},mm:function(a){var b=a.getMonth()+1;return 10>b?"0"+b:b},yy:function(a){return(""+a.getFullYear()).substr(2)},yyyy:function(a){return a.getFullYear()},h:function(a){return a.getHours()%12||12},hh:function(a){var b=a.getHours()%12||12;return 10>b?"0"+b:b},H:function(a){return a.getHours()},HH:function(a){var b=a.getHours();return 10>b?"0"+b:b},M:function(a){return a.getMinutes()},MM:function(a){var b=a.getMinutes();return 10>b?"0"+b:b},s:function(a){return a.getSeconds()},ss:function(a){var b=a.getSeconds();return 10>b?"0"+b:b}};return b.replace(/d{1,4}|m{1,4}|yy(?:yy)?|([HhMs])\1?|"[^"]*"|'[^']*'/g,function(b){return c[b]?c[b](a):b.slice(1,b.length-1)})}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{different:{"default":"Please enter a different value"}}}),FormValidation.Validator.different={html5Attributes:{message:"message",field:"field"},init:function(b,c,d,e){for(var f=d.field.split(","),g=0;g<f.length;g++){var h=b.getFieldElements(a.trim(f[g]));b.onLiveChange(h,"live_"+e,function(){var a=b.getStatus(c,e);a!==b.STATUS_NOT_VALIDATED&&b.revalidateField(c)})}},destroy:function(b,c,d,e){for(var f=d.field.split(","),g=0;g<f.length;g++){var h=b.getFieldElements(a.trim(f[g]));b.offLiveChange(h,"live_"+e)}},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;for(var g=d.field.split(","),h=!0,i=0;i<g.length;i++){var j=b.getFieldElements(a.trim(g[i]));if(null!=j&&0!==j.length){var k=b.getFieldValue(j,e);f===k?h=!1:""!==k&&b.updateStatus(j,b.STATUS_VALID,e)}}return h}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{digits:{"default":"Please enter only digits"}}}),FormValidation.Validator.digits={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);return""===e?!0:/^\d+$/.test(e)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{emailAddress:{"default":"Please enter a valid email address"}}}),FormValidation.Validator.emailAddress={html5Attributes:{message:"message",multiple:"multiple",separator:"separator"},enableByHtml5:function(a){return"email"===a.attr("type")},validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;var f=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,g=c.multiple===!0||"true"===c.multiple;if(g){for(var h=c.separator||/[,;]/,i=this._splitEmailAddresses(e,h),j=0;j<i.length;j++)if(!f.test(i[j]))return!1;return!0}return f.test(e)},_splitEmailAddresses:function(a,b){for(var c=a.split(/"/),d=c.length,e=[],f="",g=0;d>g;g++)if(g%2===0){var h=c[g].split(b),i=h.length;if(1===i)f+=h[0];else{e.push(f+h[0]);for(var j=1;i-1>j;j++)e.push(h[j]);f=h[i-1]}}else f+='"'+c[g],d-1>g&&(f+='"');return e.push(f),e}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{file:{"default":"Please choose a valid file"}}}),FormValidation.Validator.file={Error:{EXTENSION:"EXTENSION",MAX_FILES:"MAX_FILES",MAX_SIZE:"MAX_SIZE",MAX_TOTAL_SIZE:"MAX_TOTAL_SIZE",MIN_FILES:"MIN_FILES",MIN_SIZE:"MIN_SIZE",MIN_TOTAL_SIZE:"MIN_TOTAL_SIZE",TYPE:"TYPE"},html5Attributes:{extension:"extension",maxfiles:"maxFiles",minfiles:"minFiles",maxsize:"maxSize",minsize:"minSize",maxtotalsize:"maxTotalSize",mintotalsize:"minTotalSize",message:"message",type:"type"},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;var g,h=d.extension?d.extension.toLowerCase().split(","):null,i=d.type?d.type.toLowerCase().split(","):null,j=window.File&&window.FileList&&window.FileReader;if(j){var k=c.get(0).files,l=k.length,m=0;if(d.maxFiles&&l>parseInt(d.maxFiles,10))return{valid:!1,error:this.Error.MAX_FILES};if(d.minFiles&&l<parseInt(d.minFiles,10))return{valid:!1,error:this.Error.MIN_FILES};for(var n={},o=0;l>o;o++){if(m+=k[o].size,g=k[o].name.substr(k[o].name.lastIndexOf(".")+1),n={file:k[o],size:k[o].size,ext:g,type:k[o].type},d.minSize&&k[o].size<parseInt(d.minSize,10))return{valid:!1,error:this.Error.MIN_SIZE,metaData:n};if(d.maxSize&&k[o].size>parseInt(d.maxSize,10))return{valid:!1,error:this.Error.MAX_SIZE,metaData:n};if(h&&-1===a.inArray(g.toLowerCase(),h))return{valid:!1,error:this.Error.EXTENSION,metaData:n};if(k[o].type&&i&&-1===a.inArray(k[o].type.toLowerCase(),i))return{valid:!1,error:this.Error.TYPE,metaData:n}}if(d.maxTotalSize&&m>parseInt(d.maxTotalSize,10))return{valid:!1,error:this.Error.MAX_TOTAL_SIZE,metaData:{totalSize:m}};if(d.minTotalSize&&m<parseInt(d.minTotalSize,10))return{valid:!1,error:this.Error.MIN_TOTAL_SIZE,metaData:{totalSize:m}}}else if(g=f.substr(f.lastIndexOf(".")+1),h&&-1===a.inArray(g.toLowerCase(),h))return{valid:!1,error:this.Error.EXTENSION,metaData:{ext:g}};return!0}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{greaterThan:{"default":"Please enter a value greater than or equal to %s",notInclusive:"Please enter a value greater than %s"}}}),FormValidation.Validator.greaterThan={html5Attributes:{message:"message",value:"value",inclusive:"inclusive"},enableByHtml5:function(a){var b=a.attr("type"),c=a.attr("min");return c&&"date"!==b?{value:c}:!1},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;f=this._format(f);var g=b.getLocale(),h=a.isNumeric(d.value)?d.value:b.getDynamicOption(c,d.value),i=this._format(h);return d.inclusive===!0||void 0===d.inclusive?{valid:a.isNumeric(f)&&parseFloat(f)>=i,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].greaterThan["default"],h)}:{valid:a.isNumeric(f)&&parseFloat(f)>i,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].greaterThan.notInclusive,h)}},_format:function(a){return(a+"").replace(",",".")}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{identical:{"default":"Please enter the same value"}}}),FormValidation.Validator.identical={html5Attributes:{message:"message",field:"field"},init:function(a,b,c,d){var e=a.getFieldElements(c.field);a.onLiveChange(e,"live_"+d,function(){var c=a.getStatus(b,d);c!==a.STATUS_NOT_VALIDATED&&a.revalidateField(b)})},destroy:function(a,b,c,d){var e=a.getFieldElements(c.field);a.offLiveChange(e,"live_"+d)},validate:function(a,b,c,d){var e=a.getFieldValue(b,d),f=a.getFieldElements(c.field);if(null===f||0===f.length)return!0;var g=a.getFieldValue(f,d);return e===g?(a.updateStatus(f,a.STATUS_VALID,d),!0):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{integer:{"default":"Please enter a valid number"}}}),FormValidation.Validator.integer={html5Attributes:{message:"message",thousandsseparator:"thousandsSeparator",decimalseparator:"decimalSeparator"},enableByHtml5:function(a){return"number"===a.attr("type")&&(void 0===a.attr("step")||a.attr("step")%1===0)},validate:function(a,b,c,d){if(this.enableByHtml5(b)&&b.get(0).validity&&b.get(0).validity.badInput===!0)return!1;var e=a.getFieldValue(b,d);if(""===e)return!0;var f=c.decimalSeparator||".",g=c.thousandsSeparator||"";f="."===f?"\\.":f,g="."===g?"\\.":g;var h=new RegExp("^-?[0-9]{1,3}("+g+"[0-9]{3})*("+f+"[0-9]+)?$"),i=new RegExp(g,"g");return h.test(e)?(g&&(e=e.replace(i,"")),f&&(e=e.replace(f,".")),isNaN(e)||!isFinite(e)?!1:(e=parseFloat(e),Math.floor(e)===e)):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{lessThan:{"default":"Please enter a value less than or equal to %s",notInclusive:"Please enter a value less than %s"}}}),FormValidation.Validator.lessThan={html5Attributes:{message:"message",value:"value",inclusive:"inclusive"},enableByHtml5:function(a){var b=a.attr("type"),c=a.attr("max");return c&&"date"!==b?{value:c}:!1},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;f=this._format(f);var g=b.getLocale(),h=a.isNumeric(d.value)?d.value:b.getDynamicOption(c,d.value),i=this._format(h);return d.inclusive===!0||void 0===d.inclusive?{valid:a.isNumeric(f)&&parseFloat(f)<=i,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].lessThan["default"],h)}:{valid:a.isNumeric(f)&&parseFloat(f)<i,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].lessThan.notInclusive,h)}},_format:function(a){return(a+"").replace(",",".")}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{notEmpty:{"default":"Please enter a value"}}}),FormValidation.Validator.notEmpty={enableByHtml5:function(a){var b=a.attr("required")+"";return"required"===b||"true"===b},validate:function(b,c,d,e){var f=c.attr("type");if("radio"===f||"checkbox"===f){var g=b.getNamespace();return b.getFieldElements(c.attr("data-"+g+"-field")).filter(":checked").length>0}if("number"===f&&c.get(0).validity&&c.get(0).validity.badInput===!0)return!0;var h=b.getFieldValue(c,e);return""!==a.trim(h)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{numeric:{"default":"Please enter a valid float number"}}}),FormValidation.Validator.numeric={html5Attributes:{message:"message",separator:"separator",thousandsseparator:"thousandsSeparator",decimalseparator:"decimalSeparator"},enableByHtml5:function(a){return"number"===a.attr("type")&&void 0!==a.attr("step")&&a.attr("step")%1!==0},validate:function(a,b,c,d){if(this.enableByHtml5(b)&&b.get(0).validity&&b.get(0).validity.badInput===!0)return!1;var e=a.getFieldValue(b,d);if(""===e)return!0;var f=c.separator||c.decimalSeparator||".",g=c.thousandsSeparator||"";e.substr(0,1)===f?e="0"+f+e.substr(1):e.substr(0,2)==="-"+f&&(e="-0"+f+e.substr(2)),f="."===f?"\\.":f,g="."===g?"\\.":g;var h=new RegExp("^-?[0-9]{1,3}("+g+"[0-9]{3})*("+f+"[0-9]+)?$"),i=new RegExp(g,"g");return h.test(e)?(g&&(e=e.replace(i,"")),f&&(e=e.replace(f,".")),!isNaN(parseFloat(e))&&isFinite(e)):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{promise:{"default":"Please enter a valid value"}}}),FormValidation.Validator.promise={priority:999,html5Attributes:{message:"message",promise:"promise"},validate:function(b,c,d,e){var f=b.getFieldValue(c,e),g=new a.Deferred,h=FormValidation.Helper.call(d.promise,[f,b,c]);return h.done(function(a){g.resolve(c,e,a)}).fail(function(a){a=a||{},a.valid=!1,g.resolve(c,e,a)}),g}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{regexp:{"default":"Please enter a value matching the pattern"}}}),FormValidation.Validator.regexp={html5Attributes:{message:"message",flags:"flags",regexp:"regexp"},enableByHtml5:function(a){var b=a.attr("pattern");return b?{regexp:b}:!1},validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;var f="string"==typeof c.regexp?c.flags?new RegExp(c.regexp,c.flags):new RegExp(c.regexp):c.regexp;return f.test(e)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{remote:{"default":"Please enter a valid value"}}}),FormValidation.Validator.remote={priority:1e3,html5Attributes:{async:"async",crossdomain:"crossDomain",data:"data",datatype:"dataType",delay:"delay",message:"message",name:"name",type:"type",url:"url",validkey:"validKey"},destroy:function(a,b,c,d){var e=a.getNamespace(),f=b.data(e+"."+d+".timer");f&&(clearTimeout(f),b.removeData(e+"."+d+".timer"))},validate:function(b,c,d,e){function f(){var b=a.ajax(n);return b.success(function(a){a.valid=a[m]===!0||"true"===a[m]?!0:a[m]===!1||"false"===a[m]?!1:null,i.resolve(c,e,a)}).error(function(a){i.resolve(c,e,{valid:!1})}),i.fail(function(){b.abort()}),i}var g=b.getNamespace(),h=b.getFieldValue(c,e),i=new a.Deferred;if(""===h)return i.resolve(c,e,{valid:!0}),i;var j=c.attr("data-"+g+"-field"),k=d.data||{},l=d.url,m=d.validKey||"valid";"function"==typeof k&&(k=k.call(this,b,c,h)),"string"==typeof k&&(k=JSON.parse(k)),"function"==typeof l&&(l=l.call(this,b,c,h)),k[d.name||j]=h;var n={async:null===d.async||d.async===!0||"true"===d.async,data:k,dataType:d.dataType||"json",headers:d.headers||{},type:d.type||"GET",url:l};return null!==d.crossDomain&&(n.crossDomain=d.crossDomain===!0||"true"===d.crossDomain),d.delay?(c.data(g+"."+e+".timer")&&clearTimeout(c.data(g+"."+e+".timer")),c.data(g+"."+e+".timer",setTimeout(f,d.delay)),i):f()}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{stringLength:{"default":"Please enter a value with valid length",less:"Please enter less than %s characters",more:"Please enter more than %s characters",between:"Please enter value between %s and %s characters long"}}}),FormValidation.Validator.stringLength={html5Attributes:{message:"message",min:"min",max:"max",trim:"trim",utf8bytes:"utf8Bytes"},enableByHtml5:function(b){var c={},d=b.attr("maxlength"),e=b.attr("minlength");return d&&(c.max=parseInt(d,10)),e&&(c.min=parseInt(e,10)),a.isEmptyObject(c)?!1:c},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if((d.trim===!0||"true"===d.trim)&&(f=a.trim(f)),""===f)return!0;var g=b.getLocale(),h=a.isNumeric(d.min)?d.min:b.getDynamicOption(c,d.min),i=a.isNumeric(d.max)?d.max:b.getDynamicOption(c,d.max),j=function(a){for(var b=a.length,c=a.length-1;c>=0;c--){var d=a.charCodeAt(c);d>127&&2047>=d?b++:d>2047&&65535>=d&&(b+=2),d>=56320&&57343>=d&&c--}return b},k=d.utf8Bytes?j(f):f.length,l=!0,m=d.message||FormValidation.I18n[g].stringLength["default"];switch((h&&k<parseInt(h,10)||i&&k>parseInt(i,10))&&(l=!1),!0){case!!h&&!!i:m=FormValidation.Helper.format(d.message||FormValidation.I18n[g].stringLength.between,[parseInt(h,10),parseInt(i,10)]);break;case!!h:m=FormValidation.Helper.format(d.message||FormValidation.I18n[g].stringLength.more,parseInt(h,10)-1);break;case!!i:m=FormValidation.Helper.format(d.message||FormValidation.I18n[g].stringLength.less,parseInt(i,10)+1)}return{valid:l,message:m}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{uri:{"default":"Please enter a valid URI"}}}),FormValidation.Validator.uri={html5Attributes:{message:"message",allowlocal:"allowLocal",allowemptyprotocol:"allowEmptyProtocol",protocol:"protocol"},enableByHtml5:function(a){return"url"===a.attr("type")},validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;var f=c.allowLocal===!0||"true"===c.allowLocal,g=c.allowEmptyProtocol===!0||"true"===c.allowEmptyProtocol,h=(c.protocol||"http, https, ftp").split(",").join("|").replace(/\s/g,""),i=new RegExp("^(?:(?:"+h+")://)"+(g?"?":"")+"(?:\\S+(?::\\S*)?@)?(?:"+(f?"":"(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})")+"(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-?)*[a-z\\u00a1-\\uffff0-9])*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))"+(f?"?":"")+")(?::\\d{2,5})?(?:/[^\\s]*)?$","i");
return i.test(e)}}}(jQuery);
/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.8.1, built on 2016-07-29 1:10:55 AM
 * @author      https://twitter.com/formvalidation
 * @copyright   (c) 2013 - 2016 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */

if(window.FormValidation={AddOn:{},Framework:{},I18n:{},Validator:{}},"undefined"==typeof jQuery)throw new Error("FormValidation requires jQuery");!function(a){var b=a.fn.jquery.split(" ")[0].split(".");if(+b[0]<2&&+b[1]<9||1===+b[0]&&9===+b[1]&&+b[2]<1)throw new Error("FormValidation requires jQuery version 1.9.1 or higher")}(jQuery),function(a){FormValidation.Base=function(b,c,d){this.$form=a(b),this.options=a.extend({},a.fn.formValidation.DEFAULT_OPTIONS,c),this._namespace=d||"fv",this.$invalidFields=a([]),this.$submitButton=null,this.$hiddenButton=null,this.STATUS_NOT_VALIDATED="NOT_VALIDATED",this.STATUS_VALIDATING="VALIDATING",this.STATUS_INVALID="INVALID",this.STATUS_VALID="VALID",this.STATUS_IGNORED="IGNORED",this.DEFAULT_MESSAGE=a.fn.formValidation.DEFAULT_MESSAGE,this._ieVersion=function(){for(var a=3,b=document.createElement("div"),c=b.all||[];b.innerHTML="<!--[if gt IE "+ ++a+"]><br><![endif]-->",c[0];);return a>4?a:document.documentMode}();var e=document.createElement("div");this._changeEvent=9!==this._ieVersion&&"oninput"in e?"input":"keyup",this._submitIfValid=null,this._cacheFields={},this._init()},FormValidation.Base.prototype={constructor:FormValidation.Base,_exceedThreshold:function(b){var c=this._namespace,d=b.attr("data-"+c+"-field"),e=this.options.fields[d].threshold||this.options.threshold;if(!e)return!0;var f=-1!==a.inArray(b.attr("type"),["button","checkbox","file","hidden","image","radio","reset","submit"]);return f||b.val().length>=e},_init:function(){var b=this,c=this._namespace,d={addOns:{},autoFocus:this.$form.attr("data-"+c+"-autofocus"),button:{selector:this.$form.attr("data-"+c+"-button-selector")||this.$form.attr("data-"+c+"-submitbuttons"),disabled:this.$form.attr("data-"+c+"-button-disabled")},control:{valid:this.$form.attr("data-"+c+"-control-valid"),invalid:this.$form.attr("data-"+c+"-control-invalid")},err:{clazz:this.$form.attr("data-"+c+"-err-clazz"),container:this.$form.attr("data-"+c+"-err-container")||this.$form.attr("data-"+c+"-container"),parent:this.$form.attr("data-"+c+"-err-parent")},events:{formInit:this.$form.attr("data-"+c+"-events-form-init"),formPreValidate:this.$form.attr("data-"+c+"-events-form-prevalidate"),formError:this.$form.attr("data-"+c+"-events-form-error"),formReset:this.$form.attr("data-"+c+"-events-form-reset"),formSuccess:this.$form.attr("data-"+c+"-events-form-success"),fieldAdded:this.$form.attr("data-"+c+"-events-field-added"),fieldRemoved:this.$form.attr("data-"+c+"-events-field-removed"),fieldInit:this.$form.attr("data-"+c+"-events-field-init"),fieldError:this.$form.attr("data-"+c+"-events-field-error"),fieldReset:this.$form.attr("data-"+c+"-events-field-reset"),fieldSuccess:this.$form.attr("data-"+c+"-events-field-success"),fieldStatus:this.$form.attr("data-"+c+"-events-field-status"),localeChanged:this.$form.attr("data-"+c+"-events-locale-changed"),validatorError:this.$form.attr("data-"+c+"-events-validator-error"),validatorSuccess:this.$form.attr("data-"+c+"-events-validator-success"),validatorIgnored:this.$form.attr("data-"+c+"-events-validator-ignored")},excluded:this.$form.attr("data-"+c+"-excluded"),icon:{valid:this.$form.attr("data-"+c+"-icon-valid")||this.$form.attr("data-"+c+"-feedbackicons-valid"),invalid:this.$form.attr("data-"+c+"-icon-invalid")||this.$form.attr("data-"+c+"-feedbackicons-invalid"),validating:this.$form.attr("data-"+c+"-icon-validating")||this.$form.attr("data-"+c+"-feedbackicons-validating"),feedback:this.$form.attr("data-"+c+"-icon-feedback")},live:this.$form.attr("data-"+c+"-live"),locale:this.$form.attr("data-"+c+"-locale"),message:this.$form.attr("data-"+c+"-message"),onPreValidate:this.$form.attr("data-"+c+"-onprevalidate"),onError:this.$form.attr("data-"+c+"-onerror"),onReset:this.$form.attr("data-"+c+"-onreset"),onSuccess:this.$form.attr("data-"+c+"-onsuccess"),row:{selector:this.$form.attr("data-"+c+"-row-selector")||this.$form.attr("data-"+c+"-group"),valid:this.$form.attr("data-"+c+"-row-valid"),invalid:this.$form.attr("data-"+c+"-row-invalid"),feedback:this.$form.attr("data-"+c+"-row-feedback")},threshold:this.$form.attr("data-"+c+"-threshold"),trigger:this.$form.attr("data-"+c+"-trigger"),verbose:this.$form.attr("data-"+c+"-verbose"),fields:{}};this.$form.attr("novalidate","novalidate").addClass(this.options.elementClass).on("submit."+c,function(a){a.preventDefault(),b.validate()}).on("click."+c,this.options.button.selector,function(){b.$submitButton=a(this),b._submitIfValid=!0}),(this.options.declarative===!0||"true"===this.options.declarative)&&this.$form.find("[name], [data-"+c+"-field]").each(function(){var e=a(this),f=e.attr("name")||e.attr("data-"+c+"-field"),g=b._parseOptions(e);g&&(e.attr("data-"+c+"-field",f),d.fields[f]=a.extend({},g,d.fields[f]))}),this.options=a.extend(!0,this.options,d),"string"==typeof this.options.err.parent&&(this.options.err.parent=new RegExp(this.options.err.parent)),this.options.container&&(this.options.err.container=this.options.container,delete this.options.container),this.options.feedbackIcons&&(this.options.icon=a.extend(!0,this.options.icon,this.options.feedbackIcons),delete this.options.feedbackIcons),this.options.group&&(this.options.row.selector=this.options.group,delete this.options.group),this.options.submitButtons&&(this.options.button.selector=this.options.submitButtons,delete this.options.submitButtons),FormValidation.I18n[this.options.locale]||(this.options.locale=a.fn.formValidation.DEFAULT_OPTIONS.locale),(this.options.declarative===!0||"true"===this.options.declarative)&&(this.options=a.extend(!0,this.options,{addOns:this._parseAddOnOptions()})),this.$hiddenButton=a("<button/>").attr("type","submit").prependTo(this.$form).addClass("fv-hidden-submit").css({display:"none",width:0,height:0}),this.$form.on("click."+this._namespace,'[type="submit"]',function(c){if(!c.isDefaultPrevented()){var d=a(c.target),e=d.is('[type="submit"]')?d.eq(0):d.parent('[type="submit"]').eq(0);if(b.options.button.selector&&!e.is(b.options.button.selector)&&!e.is(b.$hiddenButton))return b.$form.off("submit."+b._namespace).submit(),!1}});for(var e in this.options.fields)this._initField(e);for(var f in this.options.addOns)"function"==typeof FormValidation.AddOn[f].init&&FormValidation.AddOn[f].init(this,this.options.addOns[f]);this.$form.trigger(a.Event(this.options.events.formInit),{bv:this,fv:this,options:this.options}),this.options.onPreValidate&&this.$form.on(this.options.events.formPreValidate,function(a){FormValidation.Helper.call(b.options.onPreValidate,[a])}),this.options.onSuccess&&this.$form.on(this.options.events.formSuccess,function(a){FormValidation.Helper.call(b.options.onSuccess,[a])}),this.options.onError&&this.$form.on(this.options.events.formError,function(a){FormValidation.Helper.call(b.options.onError,[a])}),this.options.onReset&&this.$form.on(this.options.events.formReset,function(a){FormValidation.Helper.call(b.options.onReset,[a])})},_initField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field");break;case"string":d=this.getFieldElements(b),d.attr("data-"+c+"-field",b)}if(0!==d.length&&null!==this.options.fields[b]&&null!==this.options.fields[b].validators){var e,f,g=this.options.fields[b].validators;for(e in g)f=g[e].alias||e,FormValidation.Validator[f]||delete this.options.fields[b].validators[e];null===this.options.fields[b].enabled&&(this.options.fields[b].enabled=!0);for(var h=this,i=d.length,j=d.attr("type"),k=1===i||"radio"===j||"checkbox"===j,l=this._getFieldTrigger(d.eq(0)),m=this.options.err.clazz.split(" ").join("."),n=a.map(l,function(a){return a+".update."+c}).join(" "),o=0;i>o;o++){var p=d.eq(o),q=this.options.fields[b].row||this.options.row.selector,r=p.closest(q),s="function"==typeof(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container)?(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container).call(this,p,this):this.options.fields[b].container||this.options.fields[b].err||this.options.err.container,t=s&&"tooltip"!==s&&"popover"!==s?a(s):this._getMessageContainer(p,q);s&&"tooltip"!==s&&"popover"!==s&&t.addClass(this.options.err.clazz),t.find("."+m+"[data-"+c+"-validator][data-"+c+'-for="'+b+'"]').remove(),r.find("i[data-"+c+'-icon-for="'+b+'"]').remove(),p.off(n).on(n,function(){h.updateStatus(a(this),h.STATUS_NOT_VALIDATED)}),p.data(c+".messages",t);for(e in g)p.data(c+".result."+e,this.STATUS_NOT_VALIDATED),k&&o!==i-1||a("<small/>").css("display","none").addClass(this.options.err.clazz).attr("data-"+c+"-validator",e).attr("data-"+c+"-for",b).attr("data-"+c+"-result",this.STATUS_NOT_VALIDATED).html(this._getMessage(b,e)).appendTo(t),f=g[e].alias||e,"function"==typeof FormValidation.Validator[f].init&&FormValidation.Validator[f].init(this,p,this.options.fields[b].validators[e],e);if(this.options.fields[b].icon!==!1&&"false"!==this.options.fields[b].icon&&this.options.icon&&this.options.icon.valid&&this.options.icon.invalid&&this.options.icon.validating&&(!k||o===i-1)){r.addClass(this.options.row.feedback);var u=a("<i/>").css("display","none").addClass(this.options.icon.feedback).attr("data-"+c+"-icon-for",b).insertAfter(p);(k?d:p).data(c+".icon",u),("tooltip"===s||"popover"===s)&&((k?d:p).on(this.options.events.fieldError,function(){r.addClass("fv-has-tooltip")}).on(this.options.events.fieldSuccess,function(){r.removeClass("fv-has-tooltip")}),p.off("focus.container."+c).on("focus.container."+c,function(){h._showTooltip(a(this),s)}).off("blur.container."+c).on("blur.container."+c,function(){h._hideTooltip(a(this),s)})),"string"==typeof this.options.fields[b].icon&&"true"!==this.options.fields[b].icon?u.appendTo(a(this.options.fields[b].icon)):this._fixIcon(p,u)}}var v=[];for(e in g)f=g[e].alias||e,g[e].priority=parseInt(g[e].priority||FormValidation.Validator[f].priority||1,10),v.push({validator:e,priority:g[e].priority});v=v.sort(function(a,b){return a.priority-b.priority}),d.data(c+".validators",v).on(this.options.events.fieldSuccess,function(a,b){var c=h.getOptions(b.field,null,"onSuccess");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.fieldError,function(a,b){var c=h.getOptions(b.field,null,"onError");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.fieldReset,function(a,b){var c=h.getOptions(b.field,null,"onReset");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.fieldStatus,function(a,b){var c=h.getOptions(b.field,null,"onStatus");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.validatorError,function(a,b){var c=h.getOptions(b.field,b.validator,"onError");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.validatorIgnored,function(a,b){var c=h.getOptions(b.field,b.validator,"onIgnored");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.validatorSuccess,function(a,b){var c=h.getOptions(b.field,b.validator,"onSuccess");c&&FormValidation.Helper.call(c,[a,b])}),this.onLiveChange(d,"live",function(){h._exceedThreshold(a(this))&&h.validateField(a(this))}),d.trigger(a.Event(this.options.events.fieldInit),{bv:this,fv:this,field:b,element:d})}},_isExcluded:function(b){var c=this._namespace,d=b.attr("data-"+c+"-excluded"),e=b.attr("data-"+c+"-field")||b.attr("name");switch(!0){case!!e&&this.options.fields&&this.options.fields[e]&&("true"===this.options.fields[e].excluded||this.options.fields[e].excluded===!0):case"true"===d:case""===d:return!0;case!!e&&this.options.fields&&this.options.fields[e]&&("false"===this.options.fields[e].excluded||this.options.fields[e].excluded===!1):case"false"===d:return!1;case!!e&&this.options.fields&&this.options.fields[e]&&"function"==typeof this.options.fields[e].excluded:return this.options.fields[e].excluded.call(this,b,this);case!!e&&this.options.fields&&this.options.fields[e]&&"string"==typeof this.options.fields[e].excluded:case d:return FormValidation.Helper.call(this.options.fields[e].excluded,[b,this]);default:if(this.options.excluded){"string"==typeof this.options.excluded&&(this.options.excluded=a.map(this.options.excluded.split(","),function(b){return a.trim(b)}));for(var f=this.options.excluded.length,g=0;f>g;g++)if("string"==typeof this.options.excluded[g]&&b.is(this.options.excluded[g])||"function"==typeof this.options.excluded[g]&&this.options.excluded[g].call(this,b,this)===!0)return!0}return!1}},_getFieldTrigger:function(a){var b=this._namespace,c=a.data(b+".trigger");if(c)return c;var d=a.attr("type"),e=a.attr("data-"+b+"-field"),f="radio"===d||"checkbox"===d||"file"===d||"SELECT"===a.get(0).tagName?"change":this._ieVersion>=10&&a.attr("placeholder")?"keyup":this._changeEvent;return c=((this.options.fields[e]?this.options.fields[e].trigger:null)||this.options.trigger||f).split(" "),a.data(b+".trigger",c),c},_getMessage:function(a,b){if(!this.options.fields[a]||!this.options.fields[a].validators)return"";var c=this.options.fields[a].validators,d=c[b]&&c[b].alias?c[b].alias:b;if(!FormValidation.Validator[d])return"";switch(!0){case!!c[b].message:return c[b].message;case!!this.options.fields[a].message:return this.options.fields[a].message;case!!this.options.message:return this.options.message;case!!FormValidation.I18n[this.options.locale]&&!!FormValidation.I18n[this.options.locale][d]&&!!FormValidation.I18n[this.options.locale][d]["default"]:return FormValidation.I18n[this.options.locale][d]["default"];default:return this.DEFAULT_MESSAGE}},_getMessageContainer:function(a,b){if(!this.options.err.parent)throw new Error("The err.parent option is not defined");var c=a.parent();if(c.is(b))return c;var d=c.attr("class");return d&&this.options.err.parent.test(d)?c:this._getMessageContainer(c,b)},_parseAddOnOptions:function(){var a=this._namespace,b=this.$form.attr("data-"+a+"-addons"),c=this.options.addOns||{};if(b){b=b.replace(/\s/g,"").split(",");for(var d=0;d<b.length;d++)c[b[d]]||(c[b[d]]={})}var e,f,g,h;for(e in c)if(FormValidation.AddOn[e]){if(f=FormValidation.AddOn[e].html5Attributes)for(g in f)h=this.$form.attr("data-"+a+"-addons-"+e.toLowerCase()+"-"+g.toLowerCase()),h&&(c[e][f[g]]=h)}else delete c[e];return c},_parseOptions:function(b){var c,d,e,f,g,h,i,j,k,l=this._namespace,m=b.attr("name")||b.attr("data-"+l+"-field"),n={},o=new RegExp("^data-"+l+"-([a-z]+)-alias$"),p=a.extend({},FormValidation.Validator);a.each(b.get(0).attributes,function(a,b){b.value&&o.test(b.name)&&(d=b.name.split("-")[2],p[b.value]&&(p[d]=p[b.value],p[d].alias=b.value))});for(d in p)if(c=p[d],e="data-"+l+"-"+d.toLowerCase(),f=b.attr(e)+"",k="function"==typeof c.enableByHtml5?c.enableByHtml5(b):null,k&&"false"!==f||k!==!0&&(""===f||"true"===f||e===f.toLowerCase())){c.html5Attributes=a.extend({},{message:"message",onerror:"onError",onreset:"onReset",onsuccess:"onSuccess",priority:"priority",transformer:"transformer"},c.html5Attributes),n[d]=a.extend({},k===!0?{}:k,n[d]),c.alias&&(n[d].alias=c.alias);for(j in c.html5Attributes)g=c.html5Attributes[j],h="data-"+l+"-"+d.toLowerCase()+"-"+j,i=b.attr(h),i&&("true"===i||h===i.toLowerCase()?i=!0:"false"===i&&(i=!1),n[d][g]=i)}var q={autoFocus:b.attr("data-"+l+"-autofocus"),err:b.attr("data-"+l+"-err-container")||b.attr("data-"+l+"-container"),enabled:b.attr("data-"+l+"-enabled"),excluded:b.attr("data-"+l+"-excluded"),icon:b.attr("data-"+l+"-icon")||b.attr("data-"+l+"-feedbackicons")||(this.options.fields&&this.options.fields[m]?this.options.fields[m].feedbackIcons:null),message:b.attr("data-"+l+"-message"),onError:b.attr("data-"+l+"-onerror"),onReset:b.attr("data-"+l+"-onreset"),onStatus:b.attr("data-"+l+"-onstatus"),onSuccess:b.attr("data-"+l+"-onsuccess"),row:b.attr("data-"+l+"-row")||b.attr("data-"+l+"-group")||(this.options.fields&&this.options.fields[m]?this.options.fields[m].group:null),selector:b.attr("data-"+l+"-selector"),threshold:b.attr("data-"+l+"-threshold"),transformer:b.attr("data-"+l+"-transformer"),trigger:b.attr("data-"+l+"-trigger"),verbose:b.attr("data-"+l+"-verbose"),validators:n},r=a.isEmptyObject(q),s=a.isEmptyObject(n);return!s||!r&&this.options.fields&&this.options.fields[m]?q:null},_submit:function(){var b=this.isValid();if(null!==b){var c=b?this.options.events.formSuccess:this.options.events.formError,d=a.Event(c);this.$form.trigger(d),this.$submitButton&&(b?this._onSuccess(d):this._onError(d))}},_onError:function(b){if(!b.isDefaultPrevented()){if("submitted"===this.options.live){this.options.live="enabled";var c=this;for(var d in this.options.fields)!function(b){var d=c.getFieldElements(b);d.length&&c.onLiveChange(d,"live",function(){c._exceedThreshold(a(this))&&c.validateField(a(this))})}(d)}for(var e=this._namespace,f=0;f<this.$invalidFields.length;f++){var g=this.$invalidFields.eq(f),h=this.isOptionEnabled(g.attr("data-"+e+"-field"),"autoFocus");if(h){g.focus();break}}}},_onFieldValidated:function(b,c){var d=this._namespace,e=b.attr("data-"+d+"-field"),f=this.options.fields[e].validators,g={},h=0,i={bv:this,fv:this,field:e,element:b,validator:c,result:b.data(d+".response."+c)};if(c)switch(b.data(d+".result."+c)){case this.STATUS_INVALID:b.trigger(a.Event(this.options.events.validatorError),i);break;case this.STATUS_VALID:b.trigger(a.Event(this.options.events.validatorSuccess),i);break;case this.STATUS_IGNORED:b.trigger(a.Event(this.options.events.validatorIgnored),i)}g[this.STATUS_NOT_VALIDATED]=0,g[this.STATUS_VALIDATING]=0,g[this.STATUS_INVALID]=0,g[this.STATUS_VALID]=0,g[this.STATUS_IGNORED]=0;for(var j in f)if(f[j].enabled!==!1){h++;var k=b.data(d+".result."+j);k&&g[k]++}g[this.STATUS_VALID]+g[this.STATUS_IGNORED]===h?(this.$invalidFields=this.$invalidFields.not(b),b.trigger(a.Event(this.options.events.fieldSuccess),i)):(0===g[this.STATUS_NOT_VALIDATED]||!this.isOptionEnabled(e,"verbose"))&&0===g[this.STATUS_VALIDATING]&&g[this.STATUS_INVALID]>0&&(this.$invalidFields=this.$invalidFields.add(b),b.trigger(a.Event(this.options.events.fieldError),i))},_onSuccess:function(a){a.isDefaultPrevented()||this.disableSubmitButtons(!0).defaultSubmit()},_fixIcon:function(a,b){},_createTooltip:function(a,b,c){},_destroyTooltip:function(a,b){},_hideTooltip:function(a,b){},_showTooltip:function(a,b){},defaultSubmit:function(){var b=this._namespace;this.$submitButton&&a("<input/>").attr({type:"hidden",name:this.$submitButton.attr("name")}).attr("data-"+b+"-submit-hidden","").val(this.$submitButton.val()).appendTo(this.$form),this.$form.off("submit."+b).submit()},disableSubmitButtons:function(a){return a?"disabled"!==this.options.live&&this.$form.find(this.options.button.selector).attr("disabled","disabled").addClass(this.options.button.disabled):this.$form.find(this.options.button.selector).removeAttr("disabled").removeClass(this.options.button.disabled),this},getFieldElements:function(b){if(!this._cacheFields[b])if(this.options.fields[b]&&this.options.fields[b].selector){var c=this.$form.find(this.options.fields[b].selector);this._cacheFields[b]=c.length?c:a(this.options.fields[b].selector)}else this._cacheFields[b]=this.$form.find('[name="'+b+'"]');return this._cacheFields[b]},getFieldValue:function(a,b){var c,d=this._namespace;if("string"==typeof a){if(c=this.getFieldElements(a),0===c.length)return null}else c=a,a=c.attr("data-"+d+"-field");if(!a||!this.options.fields[a])return c.val();var e=(this.options.fields[a].validators&&this.options.fields[a].validators[b]?this.options.fields[a].validators[b].transformer:null)||this.options.fields[a].transformer;return e?FormValidation.Helper.call(e,[c,b,this]):c.val()},getNamespace:function(){return this._namespace},getOptions:function(a,b,c){var d=this._namespace;if(!a)return c?this.options[c]:this.options;if("object"==typeof a&&(a=a.attr("data-"+d+"-field")),!this.options.fields[a])return null;var e=this.options.fields[a];return b?e.validators&&e.validators[b]?c?e.validators[b][c]:e.validators[b]:null:c?e[c]:e},getStatus:function(a,b){var c=this._namespace;switch(typeof a){case"object":return a.data(c+".result."+b);case"string":default:return this.getFieldElements(a).eq(0).data(c+".result."+b)}},isOptionEnabled:function(a,b){return!this.options.fields[a]||"true"!==this.options.fields[a][b]&&this.options.fields[a][b]!==!0?!this.options.fields[a]||"false"!==this.options.fields[a][b]&&this.options.fields[a][b]!==!1?"true"===this.options[b]||this.options[b]===!0:!1:!0},isValid:function(){for(var a in this.options.fields){var b=this.isValidField(a);if(null===b)return null;if(b===!1)return!1}return!0},isValidContainer:function(b){var c=this,d=this._namespace,e=[],f="string"==typeof b?a(b):b;if(0===f.length)return!0;f.find("[data-"+d+"-field]").each(function(){var b=a(this);c._isExcluded(b)||e.push(b)});for(var g=e.length,h=this.options.err.clazz.split(" ").join("."),i=0;g>i;i++){var j=e[i],k=j.attr("data-"+d+"-field"),l=j.data(d+".messages").find("."+h+"[data-"+d+"-validator][data-"+d+'-for="'+k+'"]');if(!this.options.fields||!this.options.fields[k]||"false"!==this.options.fields[k].enabled&&this.options.fields[k].enabled!==!1){if(l.filter("[data-"+d+'-result="'+this.STATUS_INVALID+'"]').length>0)return!1;if(l.filter("[data-"+d+'-result="'+this.STATUS_NOT_VALIDATED+'"]').length>0||l.filter("[data-"+d+'-result="'+this.STATUS_VALIDATING+'"]').length>0)return null}}return!0},isValidField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field");break;case"string":d=this.getFieldElements(b)}if(0===d.length||!this.options.fields[b]||"false"===this.options.fields[b].enabled||this.options.fields[b].enabled===!1)return!0;for(var e,f,g,h=d.attr("type"),i="radio"===h||"checkbox"===h?1:d.length,j=0;i>j;j++)if(e=d.eq(j),!this._isExcluded(e))for(f in this.options.fields[b].validators)if(this.options.fields[b].validators[f].enabled!==!1){if(g=e.data(c+".result."+f),g===this.STATUS_VALIDATING||g===this.STATUS_NOT_VALIDATED)return null;if(g===this.STATUS_INVALID)return!1}return!0},offLiveChange:function(b,c){if(null===b||0===b.length)return this;var d=this._namespace,e=this._getFieldTrigger(b.eq(0)),f=a.map(e,function(a){return a+"."+c+"."+d}).join(" ");return b.off(f),this},onLiveChange:function(b,c,d){if(null===b||0===b.length)return this;var e=this._namespace,f=this._getFieldTrigger(b.eq(0)),g=a.map(f,function(a){return a+"."+c+"."+e}).join(" ");switch(this.options.live){case"submitted":break;case"disabled":b.off(g);break;case"enabled":default:b.off(g).on(g,function(a){d.apply(this,arguments)})}return this},updateMessage:function(b,c,d){var e=this._namespace,f=a([]);switch(typeof b){case"object":f=b,b=b.attr("data-"+e+"-field");break;case"string":f=this.getFieldElements(b)}var g=this.options.err.clazz.split(" ").join(".");return f.each(function(){a(this).data(e+".messages").find("."+g+"[data-"+e+'-validator="'+c+'"][data-'+e+'-for="'+b+'"]').html(d)}),this},updateStatus:function(b,c,d){var e=this._namespace,f=a([]);switch(typeof b){case"object":f=b,b=b.attr("data-"+e+"-field");break;case"string":f=this.getFieldElements(b)}if(!b||!this.options.fields[b])return this;c===this.STATUS_NOT_VALIDATED&&(this._submitIfValid=!1);for(var g=this,h=f.attr("type"),i=this.options.fields[b].row||this.options.row.selector,j="radio"===h||"checkbox"===h?1:f.length,k=this.options.err.clazz.split(" ").join("."),l=0;j>l;l++){var m=f.eq(l);if(!this._isExcluded(m)){var n,o,p=m.closest(i),q=m.data(e+".messages"),r=q.find("."+k+"[data-"+e+"-validator][data-"+e+'-for="'+b+'"]'),s=d?r.filter("[data-"+e+'-validator="'+d+'"]'):r,t=m.data(e+".icon"),u="function"==typeof(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container)?(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container).call(this,m,this):this.options.fields[b].container||this.options.fields[b].err||this.options.err.container,v=null;if(d)m.data(e+".result."+d,c);else for(var w in this.options.fields[b].validators)m.data(e+".result."+w,c);switch(s.attr("data-"+e+"-result",c),c){case this.STATUS_VALIDATING:v=null,this.disableSubmitButtons(!0),m.removeClass(this.options.control.valid).removeClass(this.options.control.invalid),p.removeClass(this.options.row.valid).removeClass(this.options.row.invalid),t&&t.removeClass(this.options.icon.valid).removeClass(this.options.icon.invalid).addClass(this.options.icon.validating).show();break;case this.STATUS_INVALID:v=!1,this.disableSubmitButtons(!0),m.removeClass(this.options.control.valid).addClass(this.options.control.invalid),p.removeClass(this.options.row.valid).addClass(this.options.row.invalid),t&&t.removeClass(this.options.icon.valid).removeClass(this.options.icon.validating).addClass(this.options.icon.invalid).show();break;case this.STATUS_IGNORED:case this.STATUS_VALID:n=r.filter("[data-"+e+'-result="'+this.STATUS_VALIDATING+'"]').length>0,o=r.filter("[data-"+e+'-result="'+this.STATUS_NOT_VALIDATED+'"]').length>0;var x=r.filter("[data-"+e+'-result="'+this.STATUS_IGNORED+'"]').length;v=n||o?null:r.filter("[data-"+e+'-result="'+this.STATUS_VALID+'"]').length+x===r.length,m.removeClass(this.options.control.valid).removeClass(this.options.control.invalid),v===!0?(this.disableSubmitButtons(this.isValid()===!1),c===this.STATUS_VALID&&m.addClass(this.options.control.valid)):v===!1&&(this.disableSubmitButtons(!0),c===this.STATUS_VALID&&m.addClass(this.options.control.invalid)),t&&(t.removeClass(this.options.icon.invalid).removeClass(this.options.icon.validating).removeClass(this.options.icon.valid),(c===this.STATUS_VALID||x!==r.length)&&t.addClass(n?this.options.icon.validating:null===v?"":v?this.options.icon.valid:this.options.icon.invalid).show());var y=this.isValidContainer(p);null!==y&&(p.removeClass(this.options.row.valid).removeClass(this.options.row.invalid),(c===this.STATUS_VALID||x!==r.length)&&p.addClass(y?this.options.row.valid:this.options.row.invalid));break;case this.STATUS_NOT_VALIDATED:default:v=null,this.disableSubmitButtons(!1),m.removeClass(this.options.control.valid).removeClass(this.options.control.invalid),p.removeClass(this.options.row.valid).removeClass(this.options.row.invalid),t&&t.removeClass(this.options.icon.valid).removeClass(this.options.icon.invalid).removeClass(this.options.icon.validating).hide()}!t||"tooltip"!==u&&"popover"!==u?c===this.STATUS_INVALID?s.show():s.hide():v===!1?this._createTooltip(m,r.filter("[data-"+e+'-result="'+g.STATUS_INVALID+'"]').eq(0).html(),u):this._destroyTooltip(m,u),m.trigger(a.Event(this.options.events.fieldStatus),{bv:this,fv:this,field:b,element:m,status:c,validator:d}),this._onFieldValidated(m,d)}}return this},validate:function(){if(a.isEmptyObject(this.options.fields))return this._submit(),this;this.$form.trigger(a.Event(this.options.events.formPreValidate)),this.disableSubmitButtons(!0),this._submitIfValid=!1;for(var b in this.options.fields)this.validateField(b);return this._submit(),this._submitIfValid=!0,this},validateField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field");break;case"string":d=this.getFieldElements(b)}if(0===d.length||!this.options.fields[b]||"false"===this.options.fields[b].enabled||this.options.fields[b].enabled===!1)return this;for(var e,f,g,h=this,i=d.attr("type"),j="radio"!==i&&"checkbox"!==i||"disabled"===this.options.live?d.length:1,k="radio"===i||"checkbox"===i,l=this.options.fields[b].validators,m=this.isOptionEnabled(b,"verbose"),n=0;j>n;n++){var o=d.eq(n);if(!this._isExcluded(o))for(var p=!1,q=o.data(c+".validators"),r=q.length,s=0;r>s&&(e=q[s].validator,o.data(c+".dfs."+e)&&o.data(c+".dfs."+e).reject(),!p);s++){var t=o.data(c+".result."+e);if(t!==this.STATUS_VALID&&t!==this.STATUS_INVALID)if(l[e].enabled!==!1)if(o.data(c+".result."+e,this.STATUS_VALIDATING),f=l[e].alias||e,g=FormValidation.Validator[f].validate(this,o,l[e],e),"object"==typeof g&&g.resolve)this.updateStatus(k?b:o,this.STATUS_VALIDATING,e),o.data(c+".dfs."+e,g),g.done(function(a,b,d){a.removeData(c+".dfs."+b).data(c+".response."+b,d),d.message&&h.updateMessage(a,b,d.message),h.updateStatus(k?a.attr("data-"+c+"-field"):a,d.valid===!0?h.STATUS_VALID:d.valid===!1?h.STATUS_INVALID:h.STATUS_IGNORED,b),d.valid&&h._submitIfValid===!0?h._submit():d.valid!==!1||m||(p=!0)});else if("object"==typeof g&&void 0!==g.valid){if(o.data(c+".response."+e,g),g.message&&this.updateMessage(k?b:o,e,g.message),this.updateStatus(k?b:o,g.valid===!0?this.STATUS_VALID:g.valid===!1?this.STATUS_INVALID:this.STATUS_IGNORED,e),g.valid===!1&&!m)break}else if("boolean"==typeof g){if(o.data(c+".response."+e,g),this.updateStatus(k?b:o,g?this.STATUS_VALID:this.STATUS_INVALID,e),!g&&!m)break}else null===g&&(o.data(c+".response."+e,g),this.updateStatus(k?b:o,this.STATUS_IGNORED,e));else this.updateStatus(k?b:o,this.STATUS_IGNORED,e);else this._onFieldValidated(o,e)}}return this},addField:function(b,c){var d=this._namespace,e=a([]);switch(typeof b){case"object":e=b,b=b.attr("data-"+d+"-field")||b.attr("name");break;case"string":delete this._cacheFields[b],e=this.getFieldElements(b)}e.attr("data-"+d+"-field",b);for(var f=e.attr("type"),g="radio"===f||"checkbox"===f?1:e.length,h=0;g>h;h++){var i=e.eq(h),j=this._parseOptions(i);j=null===j?c:a.extend(!0,j,c),this.options.fields[b]=a.extend(!0,this.options.fields[b],j),this._cacheFields[b]=this._cacheFields[b]?this._cacheFields[b].add(i):i,this._initField("checkbox"===f||"radio"===f?b:i)}return this.disableSubmitButtons(!1),this.$form.trigger(a.Event(this.options.events.fieldAdded),{field:b,element:e,options:this.options.fields[b]}),this},destroy:function(){var a,b,c,d,e,f,g,h,i=this._namespace;for(b in this.options.fields)for(c=this.getFieldElements(b),a=0;a<c.length;a++){d=c.eq(a);for(e in this.options.fields[b].validators)d.data(i+".dfs."+e)&&d.data(i+".dfs."+e).reject(),d.removeData(i+".result."+e).removeData(i+".response."+e).removeData(i+".dfs."+e),h=this.options.fields[b].validators[e].alias||e,"function"==typeof FormValidation.Validator[h].destroy&&FormValidation.Validator[h].destroy(this,d,this.options.fields[b].validators[e],e)}var j=this.options.err.clazz.split(" ").join(".");for(b in this.options.fields)for(c=this.getFieldElements(b),g=this.options.fields[b].row||this.options.row.selector,a=0;a<c.length;a++){d=c.eq(a);var k=d.data(i+".messages");k&&k.find("."+j+"[data-"+i+"-validator][data-"+i+'-for="'+b+'"]').remove(),d.removeData(i+".messages").removeData(i+".validators").closest(g).removeClass(this.options.row.valid).removeClass(this.options.row.invalid).removeClass(this.options.row.feedback).end().off("."+i).removeAttr("data-"+i+"-field");var l="function"==typeof(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container)?(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container).call(this,d,this):this.options.fields[b].container||this.options.fields[b].err||this.options.err.container;("tooltip"===l||"popover"===l)&&this._destroyTooltip(d,l),f=d.data(i+".icon"),f&&f.remove(),d.removeData(i+".icon").removeData(i+".trigger")}for(var m in this.options.addOns)"function"==typeof FormValidation.AddOn[m].destroy&&FormValidation.AddOn[m].destroy(this,this.options.addOns[m]);this.disableSubmitButtons(!1),this.$hiddenButton.remove(),this.$form.removeClass(this.options.elementClass).off("."+i).removeData("bootstrapValidator").removeData("formValidation").find("[data-"+i+"-submit-hidden]").remove().end().find('[type="submit"]').off("click."+i)},enableFieldValidators:function(a,b,c){var d=this.options.fields[a].validators;if(c&&d&&d[c]&&d[c].enabled!==b)this.options.fields[a].validators[c].enabled=b,this.updateStatus(a,this.STATUS_NOT_VALIDATED,c);else if(!c&&this.options.fields[a].enabled!==b){this.options.fields[a].enabled=b;for(var e in d)this.enableFieldValidators(a,b,e)}return this},getDynamicOption:function(a,b){var c="string"==typeof a?this.getFieldElements(a):a,d=c.val();if("function"==typeof b)return FormValidation.Helper.call(b,[d,this,c]);if("string"==typeof b){var e=this.getFieldElements(b);return e.length?e.val():FormValidation.Helper.call(b,[d,this,c])||b}return null},getForm:function(){return this.$form},getInvalidFields:function(){
return this.$invalidFields},getLocale:function(){return this.options.locale},getMessages:function(b,c){var d=this,e=this._namespace,f=[],g=a([]);switch(!0){case b&&"object"==typeof b:g=b;break;case b&&"string"==typeof b:var h=this.getFieldElements(b);if(h.length>0){var i=h.attr("type");g="radio"===i||"checkbox"===i?h.eq(0):h}break;default:g=this.$invalidFields}var j=c?"[data-"+e+'-validator="'+c+'"]':"",k=this.options.err.clazz.split(" ").join(".");return g.each(function(){f=f.concat(a(this).data(e+".messages").find("."+k+"[data-"+e+'-for="'+a(this).attr("data-"+e+"-field")+'"][data-'+e+'-result="'+d.STATUS_INVALID+'"]'+j).map(function(){var b=a(this).attr("data-"+e+"-validator"),c=a(this).attr("data-"+e+"-for");return d.options.fields[c].validators[b].enabled===!1?"":a(this).html()}).get())}),f},getSubmitButton:function(){return this.$submitButton},removeField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field")||b.attr("name"),d.attr("data-"+c+"-field",b);break;case"string":d=this.getFieldElements(b)}if(0===d.length)return this;for(var e=d.attr("type"),f="radio"===e||"checkbox"===e?1:d.length,g=0;f>g;g++){var h=d.eq(g);this.$invalidFields=this.$invalidFields.not(h),this._cacheFields[b]=this._cacheFields[b].not(h)}return this._cacheFields[b]&&0!==this._cacheFields[b].length||delete this.options.fields[b],("checkbox"===e||"radio"===e)&&this._initField(b),this.disableSubmitButtons(!1),this.$form.trigger(a.Event(this.options.events.fieldRemoved),{field:b,element:d}),this},resetField:function(b,c){var d=this._namespace,e=a([]);switch(typeof b){case"object":e=b,b=b.attr("data-"+d+"-field");break;case"string":e=this.getFieldElements(b)}var f=0,g=e.length;if(this.options.fields[b])for(f=0;g>f;f++)for(var h in this.options.fields[b].validators)e.eq(f).removeData(d+".dfs."+h);if(c){var i=e.attr("type");"radio"===i||"checkbox"===i?e.prop("checked",!1).removeAttr("selected"):e.val("")}for(this.updateStatus(b,this.STATUS_NOT_VALIDATED),f=0;g>f;f++)e.eq(f).trigger(a.Event(this.options.events.fieldReset),{fv:this,field:b,element:e.eq(f),resetValue:c});return this},resetForm:function(b){for(var c in this.options.fields)this.resetField(c,b);return this.$invalidFields=a([]),this.$submitButton=null,this.disableSubmitButtons(!1),this.$form.trigger(a.Event(this.options.events.formReset),{fv:this,resetValue:b}),this},revalidateField:function(a){return this.updateStatus(a,this.STATUS_NOT_VALIDATED).validateField(a),this},setLocale:function(b){return this.options.locale=b,this.$form.trigger(a.Event(this.options.events.localeChanged),{locale:b,bv:this,fv:this}),this},updateOption:function(a,b,c,d){var e=this._namespace;return"object"==typeof a&&(a=a.attr("data-"+e+"-field")),this.options.fields[a]&&this.options.fields[a].validators[b]&&(this.options.fields[a].validators[b][c]=d,this.updateStatus(a,this.STATUS_NOT_VALIDATED,b)),this},validateContainer:function(b){var c=this,d=this._namespace,e=[],f="string"==typeof b?a(b):b;if(0===f.length)return this;f.find("[data-"+d+"-field]").each(function(){var b=a(this);c._isExcluded(b)||e.push(b)});for(var g=e.length,h=0;g>h;h++)this.validateField(e[h]);return this}},a.fn.formValidation=function(b){var c=arguments;return this.each(function(){var d=a(this),e=d.data("formValidation"),f="object"==typeof b&&b;if(!e){var g=(f.framework||d.attr("data-fv-framework")||"bootstrap").toLowerCase(),h=g.substr(0,1).toUpperCase()+g.substr(1);if("undefined"==typeof FormValidation.Framework[h])throw new Error("The class FormValidation.Framework."+h+" is not implemented");e=new FormValidation.Framework[h](this,f),d.addClass("fv-form-"+g).data("formValidation",e)}"string"==typeof b&&e[b].apply(e,Array.prototype.slice.call(c,1))})},a.fn.formValidation.Constructor=FormValidation.Base,a.fn.formValidation.DEFAULT_MESSAGE="This value is not valid",a.fn.formValidation.DEFAULT_OPTIONS={autoFocus:!0,declarative:!0,elementClass:"fv-form",events:{formInit:"init.form.fv",formPreValidate:"prevalidate.form.fv",formError:"err.form.fv",formReset:"rst.form.fv",formSuccess:"success.form.fv",fieldAdded:"added.field.fv",fieldRemoved:"removed.field.fv",fieldInit:"init.field.fv",fieldError:"err.field.fv",fieldReset:"rst.field.fv",fieldSuccess:"success.field.fv",fieldStatus:"status.field.fv",localeChanged:"changed.locale.fv",validatorError:"err.validator.fv",validatorSuccess:"success.validator.fv",validatorIgnored:"ignored.validator.fv"},excluded:[":disabled",":hidden",":not(:visible)"],fields:null,live:"enabled",locale:"en_US",message:null,threshold:null,verbose:!0,button:{selector:'[type="submit"]:not([formnovalidate])',disabled:""},control:{valid:"",invalid:""},err:{clazz:"",container:null,parent:null},icon:{valid:null,invalid:null,validating:null,feedback:""},row:{selector:null,valid:"",invalid:"",feedback:""}}}(jQuery),function(a){FormValidation.Helper={call:function(a,b){if("function"==typeof a)return a.apply(this,b);if("string"==typeof a){"()"===a.substring(a.length-2)&&(a=a.substring(0,a.length-2));for(var c=a.split("."),d=c.pop(),e=window,f=0;f<c.length;f++)e=e[c[f]];return"undefined"==typeof e[d]?null:e[d].apply(this,b)}},date:function(a,b,c,d){if(isNaN(a)||isNaN(b)||isNaN(c))return!1;if(c.length>2||b.length>2||a.length>4)return!1;if(c=parseInt(c,10),b=parseInt(b,10),a=parseInt(a,10),1e3>a||a>9999||0>=b||b>12)return!1;var e=[31,28,31,30,31,30,31,31,30,31,30,31];if((a%400===0||a%100!==0&&a%4===0)&&(e[1]=29),0>=c||c>e[b-1])return!1;if(d===!0){var f=new Date,g=f.getFullYear(),h=f.getMonth(),i=f.getDate();return g>a||a===g&&h>b-1||a===g&&b-1===h&&i>c}return!0},format:function(b,c){a.isArray(c)||(c=[c]);for(var d in c)b=b.replace("%s",c[d]);return b},luhn:function(a){for(var b=a.length,c=0,d=[[0,1,2,3,4,5,6,7,8,9],[0,2,4,6,8,1,3,5,7,9]],e=0;b--;)e+=d[c][parseInt(a.charAt(b),10)],c^=1;return e%10===0&&e>0},mod11And10:function(a){for(var b=5,c=a.length,d=0;c>d;d++)b=(2*(b||10)%11+parseInt(a.charAt(d),10))%10;return 1===b},mod37And36:function(a,b){b=b||"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var c=b.length,d=a.length,e=Math.floor(c/2),f=0;d>f;f++)e=(2*(e||c)%(c+1)+b.indexOf(a.charAt(f)))%c;return 1===e}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{base64:{"default":"Please enter a valid base 64 encoded"}}}),FormValidation.Validator.base64={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);return""===e?!0:/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(e)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{between:{"default":"Please enter a value between %s and %s",notInclusive:"Please enter a value between %s and %s strictly"}}}),FormValidation.Validator.between={html5Attributes:{message:"message",min:"min",max:"max",inclusive:"inclusive"},enableByHtml5:function(a){return"range"===a.attr("type")?{min:a.attr("min"),max:a.attr("max")}:!1},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;f=this._format(f);var g=b.getLocale(),h=a.isNumeric(d.min)?d.min:b.getDynamicOption(c,d.min),i=a.isNumeric(d.max)?d.max:b.getDynamicOption(c,d.max),j=this._format(h),k=this._format(i);return d.inclusive===!0||void 0===d.inclusive?{valid:a.isNumeric(f)&&parseFloat(f)>=j&&parseFloat(f)<=k,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].between["default"],[h,i])}:{valid:a.isNumeric(f)&&parseFloat(f)>j&&parseFloat(f)<k,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].between.notInclusive,[h,i])}},_format:function(a){return(a+"").replace(",",".")}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{bic:{"default":"Please enter a valid BIC number"}}}),FormValidation.Validator.bic={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);return""===e?!0:/^[a-zA-Z]{6}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?$/.test(e)}}}(jQuery),function(a){FormValidation.Validator.blank={validate:function(a,b,c,d){return!0}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{callback:{"default":"Please enter a valid value"}}}),FormValidation.Validator.callback={priority:999,html5Attributes:{message:"message",callback:"callback"},validate:function(b,c,d,e){var f=b.getFieldValue(c,e),g=new a.Deferred,h={valid:!0};if(d.callback){var i=FormValidation.Helper.call(d.callback,[f,b,c]);h="boolean"==typeof i||null===i?{valid:i}:i}return g.resolve(c,e,h),g}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{choice:{"default":"Please enter a valid value",less:"Please choose %s options at minimum",more:"Please choose %s options at maximum",between:"Please choose %s - %s options"}}}),FormValidation.Validator.choice={html5Attributes:{message:"message",min:"min",max:"max"},validate:function(b,c,d,e){var f=b.getLocale(),g=b.getNamespace(),h=c.is("select")?b.getFieldElements(c.attr("data-"+g+"-field")).find("option").filter(":selected").length:b.getFieldElements(c.attr("data-"+g+"-field")).filter(":checked").length,i=d.min?a.isNumeric(d.min)?d.min:b.getDynamicOption(c,d.min):null,j=d.max?a.isNumeric(d.max)?d.max:b.getDynamicOption(c,d.max):null,k=!0,l=d.message||FormValidation.I18n[f].choice["default"];switch((i&&h<parseInt(i,10)||j&&h>parseInt(j,10))&&(k=!1),!0){case!!i&&!!j:l=FormValidation.Helper.format(d.message||FormValidation.I18n[f].choice.between,[parseInt(i,10),parseInt(j,10)]);break;case!!i:l=FormValidation.Helper.format(d.message||FormValidation.I18n[f].choice.less,parseInt(i,10));break;case!!j:l=FormValidation.Helper.format(d.message||FormValidation.I18n[f].choice.more,parseInt(j,10))}return{valid:k,message:l}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{color:{"default":"Please enter a valid color"}}}),FormValidation.Validator.color={html5Attributes:{message:"message",type:"type"},enableByHtml5:function(a){return"color"===a.attr("type")},SUPPORTED_TYPES:["hex","rgb","rgba","hsl","hsla","keyword"],KEYWORD_COLORS:["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","transparent","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;if(this.enableByHtml5(c))return/^#[0-9A-F]{6}$/i.test(f);var g=d.type||this.SUPPORTED_TYPES;a.isArray(g)||(g=g.replace(/s/g,"").split(","));for(var h,i,j=!1,k=0;k<g.length;k++)if(i=g[k],h="_"+i.toLowerCase(),j=j||this[h](f))return!0;return!1},_hex:function(a){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)},_hsl:function(a){return/^hsl\((\s*(-?\d+)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*)\)$/.test(a)},_hsla:function(a){return/^hsla\((\s*(-?\d+)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*,){2}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/.test(a)},_keyword:function(b){return a.inArray(b,this.KEYWORD_COLORS)>=0},_rgb:function(a){var b=/^rgb\((\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*,){2}(\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*)\)$/,c=/^rgb\((\s*(\b(0?\d{1,2}|100)\b%)\s*,){2}(\s*(\b(0?\d{1,2}|100)\b%)\s*)\)$/;return b.test(a)||c.test(a)},_rgba:function(a){var b=/^rgba\((\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*,){3}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/,c=/^rgba\((\s*(\b(0?\d{1,2}|100)\b%)\s*,){3}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/;return b.test(a)||c.test(a)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{creditCard:{"default":"Please enter a valid credit card number"}}}),FormValidation.Validator.creditCard={validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;if(/[^0-9-\s]+/.test(f))return!1;if(f=f.replace(/\D/g,""),!FormValidation.Helper.luhn(f))return!1;var g,h,i={AMERICAN_EXPRESS:{length:[15],prefix:["34","37"]},DANKORT:{length:[16],prefix:["5019"]},DINERS_CLUB:{length:[14],prefix:["300","301","302","303","304","305","36"]},DINERS_CLUB_US:{length:[16],prefix:["54","55"]},DISCOVER:{length:[16],prefix:["6011","622126","622127","622128","622129","62213","62214","62215","62216","62217","62218","62219","6222","6223","6224","6225","6226","6227","6228","62290","62291","622920","622921","622922","622923","622924","622925","644","645","646","647","648","649","65"]},ELO:{length:[16],prefix:["4011","4312","4389","4514","4573","4576","5041","5066","5067","509","6277","6362","6363","650","6516","6550"]},FORBRUGSFORENINGEN:{length:[16],prefix:["600722"]},JCB:{length:[16],prefix:["3528","3529","353","354","355","356","357","358"]},LASER:{length:[16,17,18,19],prefix:["6304","6706","6771","6709"]},MAESTRO:{length:[12,13,14,15,16,17,18,19],prefix:["5018","5020","5038","5868","6304","6759","6761","6762","6763","6764","6765","6766"]},MASTERCARD:{length:[16],prefix:["51","52","53","54","55"]},SOLO:{length:[16,18,19],prefix:["6334","6767"]},UNIONPAY:{length:[16,17,18,19],prefix:["622126","622127","622128","622129","62213","62214","62215","62216","62217","62218","62219","6222","6223","6224","6225","6226","6227","6228","62290","62291","622920","622921","622922","622923","622924","622925"]},VISA_ELECTRON:{length:[16],prefix:["4026","417500","4405","4508","4844","4913","4917"]},VISA:{length:[16],prefix:["4"]}};for(g in i)for(h in i[g].prefix)if(f.substr(0,i[g].prefix[h].length)===i[g].prefix[h]&&-1!==a.inArray(f.length,i[g].length))return{valid:!0,type:g};return!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{cusip:{"default":"Please enter a valid CUSIP number"}}}),FormValidation.Validator.cusip={validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;if(f=f.toUpperCase(),!/^[0-9A-Z]{9}$/.test(f))return!1;for(var g=a.map(f.split(""),function(a){var b=a.charCodeAt(0);return b>="A".charCodeAt(0)&&b<="Z".charCodeAt(0)?b-"A".charCodeAt(0)+10:a}),h=g.length,i=0,j=0;h-1>j;j++){var k=parseInt(g[j],10);j%2!==0&&(k*=2),k>9&&(k-=9),i+=k}return i=(10-i%10)%10,i===parseInt(g[h-1],10)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{cvv:{"default":"Please enter a valid CVV number"}}}),FormValidation.Validator.cvv={html5Attributes:{message:"message",ccfield:"creditCardField"},init:function(a,b,c,d){if(c.creditCardField){var e=a.getFieldElements(c.creditCardField);a.onLiveChange(e,"live_"+d,function(){var c=a.getStatus(b,d);c!==a.STATUS_NOT_VALIDATED&&a.revalidateField(b)})}},destroy:function(a,b,c,d){if(c.creditCardField){var e=a.getFieldElements(c.creditCardField);a.offLiveChange(e,"live_"+d)}},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;if(!/^[0-9]{3,4}$/.test(f))return!1;if(!d.creditCardField)return!0;var g=b.getFieldValue(d.creditCardField,"creditCard");if(null===g||""===g)return!0;g=g.replace(/\D/g,"");var h,i,j={AMERICAN_EXPRESS:{length:[15],prefix:["34","37"]},DANKORT:{length:[16],prefix:["5019"]},DINERS_CLUB:{length:[14],prefix:["300","301","302","303","304","305","36"]},DINERS_CLUB_US:{length:[16],prefix:["54","55"]},DISCOVER:{length:[16],prefix:["6011","622126","622127","622128","622129","62213","62214","62215","62216","62217","62218","62219","6222","6223","6224","6225","6226","6227","6228","62290","62291","622920","622921","622922","622923","622924","622925","644","645","646","647","648","649","65"]},ELO:{length:[16],prefix:["4011","4312","4389","4514","4573","4576","5041","5066","5067","509","6277","6362","6363","650","6516","6550"]},FORBRUGSFORENINGEN:{length:[16],prefix:["600722"]},JCB:{length:[16],prefix:["3528","3529","353","354","355","356","357","358"]},LASER:{length:[16,17,18,19],prefix:["6304","6706","6771","6709"]},MAESTRO:{length:[12,13,14,15,16,17,18,19],prefix:["5018","5020","5038","5868","6304","6759","6761","6762","6763","6764","6765","6766"]},MASTERCARD:{length:[16],prefix:["51","52","53","54","55"]},SOLO:{length:[16,18,19],prefix:["6334","6767"]},UNIONPAY:{length:[16,17,18,19],prefix:["622126","622127","622128","622129","62213","62214","62215","62216","62217","62218","62219","6222","6223","6224","6225","6226","6227","6228","62290","62291","622920","622921","622922","622923","622924","622925"]},VISA_ELECTRON:{length:[16],prefix:["4026","417500","4405","4508","4844","4913","4917"]},VISA:{length:[16],prefix:["4"]}},k=null;for(h in j)for(i in j[h].prefix)if(g.substr(0,j[h].prefix[i].length)===j[h].prefix[i]&&-1!==a.inArray(g.length,j[h].length)){k=h;break}return null===k?!1:"AMERICAN_EXPRESS"===k?4===f.length:3===f.length}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{date:{"default":"Please enter a valid date",min:"Please enter a date after %s",max:"Please enter a date before %s",range:"Please enter a date in the range %s - %s"}}}),FormValidation.Validator.date={html5Attributes:{message:"message",format:"format",min:"min",max:"max",separator:"separator"},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;d.format=d.format||"MM/DD/YYYY","date"===c.attr("type")&&(d.format="YYYY-MM-DD");var g=b.getLocale(),h=d.message||FormValidation.I18n[g].date["default"],i=d.format.split(" "),j=i[0],k=i.length>1?i[1]:null,l=i.length>2?i[2]:null,m=f.split(" "),n=m[0],o=m.length>1?m[1]:null;if(i.length!==m.length)return{valid:!1,message:h};var p=d.separator;if(p||(p=-1!==n.indexOf("/")?"/":-1!==n.indexOf("-")?"-":-1!==n.indexOf(".")?".":null),null===p||-1===n.indexOf(p))return{valid:!1,message:h};if(n=n.split(p),j=j.split(p),n.length!==j.length)return{valid:!1,message:h};var q=n[a.inArray("YYYY",j)],r=n[a.inArray("MM",j)],s=n[a.inArray("DD",j)];if(!q||!r||!s||4!==q.length)return{valid:!1,message:h};var t=null,u=null,v=null;if(k){if(k=k.split(":"),o=o.split(":"),k.length!==o.length)return{valid:!1,message:h};if(u=o.length>0?o[0]:null,t=o.length>1?o[1]:null,v=o.length>2?o[2]:null,""===u||""===t||""===v)return{valid:!1,message:h};if(v){if(isNaN(v)||v.length>2)return{valid:!1,message:h};if(v=parseInt(v,10),0>v||v>60)return{valid:!1,message:h}}if(u){if(isNaN(u)||u.length>2)return{valid:!1,message:h};if(u=parseInt(u,10),0>u||u>=24||l&&u>12)return{valid:!1,message:h}}if(t){if(isNaN(t)||t.length>2)return{valid:!1,message:h};if(t=parseInt(t,10),0>t||t>59)return{valid:!1,message:h}}}var w=FormValidation.Helper.date(q,r,s),x=null,y=null,z=d.min,A=d.max;switch(z&&(x=z instanceof Date?z:this._parseDate(z,j,p)||this._parseDate(b.getDynamicOption(c,z),j,p),z=this._formatDate(x,d.format)),A&&(y=A instanceof Date?A:this._parseDate(A,j,p)||this._parseDate(b.getDynamicOption(c,A),j,p),A=this._formatDate(y,d.format)),n=new Date(q,r-1,s,u,t,v),!0){case z&&!A&&w:w=n.getTime()>=x.getTime(),h=d.message||FormValidation.Helper.format(FormValidation.I18n[g].date.min,z);break;case A&&!z&&w:w=n.getTime()<=y.getTime(),h=d.message||FormValidation.Helper.format(FormValidation.I18n[g].date.max,A);break;case A&&z&&w:w=n.getTime()<=y.getTime()&&n.getTime()>=x.getTime(),h=d.message||FormValidation.Helper.format(FormValidation.I18n[g].date.range,[z,A])}return{valid:w,date:n,message:h}},_parseDate:function(b,c,d){if(b instanceof Date)return b;if("string"!=typeof b)return null;var e=a.inArray("YYYY",c),f=a.inArray("MM",c),g=a.inArray("DD",c);if(-1===e||-1===f||-1===g)return null;var h=0,i=0,j=0,k=b.split(" "),l=k[0].split(d);if(l.length<3)return null;if(k.length>1){var m=k[1].split(":");i=m.length>0?m[0]:null,h=m.length>1?m[1]:null,j=m.length>2?m[2]:null}return new Date(l[e],l[f]-1,l[g],i,h,j)},_formatDate:function(a,b){b=b.replace(/Y/g,"y").replace(/M/g,"m").replace(/D/g,"d").replace(/:m/g,":M").replace(/:mm/g,":MM").replace(/:S/,":s").replace(/:SS/,":ss");var c={d:function(a){return a.getDate()},dd:function(a){var b=a.getDate();return 10>b?"0"+b:b},m:function(a){return a.getMonth()+1},mm:function(a){var b=a.getMonth()+1;return 10>b?"0"+b:b},yy:function(a){return(""+a.getFullYear()).substr(2)},yyyy:function(a){return a.getFullYear()},h:function(a){return a.getHours()%12||12},hh:function(a){var b=a.getHours()%12||12;return 10>b?"0"+b:b},H:function(a){return a.getHours()},HH:function(a){var b=a.getHours();return 10>b?"0"+b:b},M:function(a){return a.getMinutes()},MM:function(a){var b=a.getMinutes();return 10>b?"0"+b:b},s:function(a){return a.getSeconds()},ss:function(a){var b=a.getSeconds();return 10>b?"0"+b:b}};return b.replace(/d{1,4}|m{1,4}|yy(?:yy)?|([HhMs])\1?|"[^"]*"|'[^']*'/g,function(b){return c[b]?c[b](a):b.slice(1,b.length-1)})}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{different:{"default":"Please enter a different value"}}}),FormValidation.Validator.different={html5Attributes:{message:"message",field:"field"},init:function(b,c,d,e){for(var f=d.field.split(","),g=0;g<f.length;g++){var h=b.getFieldElements(a.trim(f[g]));b.onLiveChange(h,"live_"+e,function(){var a=b.getStatus(c,e);a!==b.STATUS_NOT_VALIDATED&&b.revalidateField(c)})}},destroy:function(b,c,d,e){for(var f=d.field.split(","),g=0;g<f.length;g++){var h=b.getFieldElements(a.trim(f[g]));b.offLiveChange(h,"live_"+e)}},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;for(var g=d.field.split(","),h=!0,i=0;i<g.length;i++){var j=b.getFieldElements(a.trim(g[i]));if(null!=j&&0!==j.length){var k=b.getFieldValue(j,e);f===k?h=!1:""!==k&&b.updateStatus(j,b.STATUS_VALID,e)}}return h}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{digits:{"default":"Please enter only digits"}}}),FormValidation.Validator.digits={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);return""===e?!0:/^\d+$/.test(e)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{ean:{"default":"Please enter a valid EAN number"}}}),FormValidation.Validator.ean={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;if(!/^(\d{8}|\d{12}|\d{13})$/.test(e))return!1;for(var f=e.length,g=0,h=8===f?[3,1]:[1,3],i=0;f-1>i;i++)g+=parseInt(e.charAt(i),10)*h[i%2];return g=(10-g%10)%10,g+""===e.charAt(f-1)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{ein:{"default":"Please enter a valid EIN number"}}}),FormValidation.Validator.ein={CAMPUS:{ANDOVER:["10","12"],ATLANTA:["60","67"],AUSTIN:["50","53"],BROOKHAVEN:["01","02","03","04","05","06","11","13","14","16","21","22","23","25","34","51","52","54","55","56","57","58","59","65"],CINCINNATI:["30","32","35","36","37","38","61"],FRESNO:["15","24"],KANSAS_CITY:["40","44"],MEMPHIS:["94","95"],OGDEN:["80","90"],PHILADELPHIA:["33","39","41","42","43","48","62","63","64","66","68","71","72","73","74","75","76","77","81","82","83","84","85","86","87","88","91","92","93","98","99"],INTERNET:["20","26","27","45","46","47"],SMALL_BUSINESS_ADMINISTRATION:["31"]},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;if(!/^[0-9]{2}-?[0-9]{7}$/.test(f))return!1;var g=f.substr(0,2)+"";for(var h in this.CAMPUS)if(-1!==a.inArray(g,this.CAMPUS[h]))return{valid:!0,campus:h};return!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{emailAddress:{"default":"Please enter a valid email address"}}}),FormValidation.Validator.emailAddress={html5Attributes:{message:"message",multiple:"multiple",separator:"separator"},enableByHtml5:function(a){return"email"===a.attr("type")},validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;var f=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,g=c.multiple===!0||"true"===c.multiple;if(g){for(var h=c.separator||/[,;]/,i=this._splitEmailAddresses(e,h),j=0;j<i.length;j++)if(!f.test(i[j]))return!1;return!0}return f.test(e)},_splitEmailAddresses:function(a,b){for(var c=a.split(/"/),d=c.length,e=[],f="",g=0;d>g;g++)if(g%2===0){var h=c[g].split(b),i=h.length;if(1===i)f+=h[0];else{e.push(f+h[0]);for(var j=1;i-1>j;j++)e.push(h[j]);f=h[i-1]}}else f+='"'+c[g],d-1>g&&(f+='"');return e.push(f),e}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{file:{"default":"Please choose a valid file"}}}),FormValidation.Validator.file={Error:{EXTENSION:"EXTENSION",MAX_FILES:"MAX_FILES",MAX_SIZE:"MAX_SIZE",MAX_TOTAL_SIZE:"MAX_TOTAL_SIZE",MIN_FILES:"MIN_FILES",MIN_SIZE:"MIN_SIZE",MIN_TOTAL_SIZE:"MIN_TOTAL_SIZE",TYPE:"TYPE"},html5Attributes:{extension:"extension",maxfiles:"maxFiles",minfiles:"minFiles",maxsize:"maxSize",minsize:"minSize",maxtotalsize:"maxTotalSize",mintotalsize:"minTotalSize",message:"message",type:"type"},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;var g,h=d.extension?d.extension.toLowerCase().split(","):null,i=d.type?d.type.toLowerCase().split(","):null,j=window.File&&window.FileList&&window.FileReader;if(j){var k=c.get(0).files,l=k.length,m=0;if(d.maxFiles&&l>parseInt(d.maxFiles,10))return{valid:!1,error:this.Error.MAX_FILES};if(d.minFiles&&l<parseInt(d.minFiles,10))return{valid:!1,error:this.Error.MIN_FILES};for(var n={},o=0;l>o;o++){if(m+=k[o].size,g=k[o].name.substr(k[o].name.lastIndexOf(".")+1),n={file:k[o],size:k[o].size,ext:g,type:k[o].type},d.minSize&&k[o].size<parseInt(d.minSize,10))return{valid:!1,error:this.Error.MIN_SIZE,metaData:n};if(d.maxSize&&k[o].size>parseInt(d.maxSize,10))return{valid:!1,error:this.Error.MAX_SIZE,metaData:n};if(h&&-1===a.inArray(g.toLowerCase(),h))return{valid:!1,error:this.Error.EXTENSION,metaData:n};if(k[o].type&&i&&-1===a.inArray(k[o].type.toLowerCase(),i))return{valid:!1,error:this.Error.TYPE,metaData:n}}if(d.maxTotalSize&&m>parseInt(d.maxTotalSize,10))return{valid:!1,error:this.Error.MAX_TOTAL_SIZE,metaData:{totalSize:m}};if(d.minTotalSize&&m<parseInt(d.minTotalSize,10))return{valid:!1,error:this.Error.MIN_TOTAL_SIZE,metaData:{totalSize:m}}}else if(g=f.substr(f.lastIndexOf(".")+1),h&&-1===a.inArray(g.toLowerCase(),h))return{valid:!1,error:this.Error.EXTENSION,metaData:{ext:g}};return!0}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{greaterThan:{"default":"Please enter a value greater than or equal to %s",notInclusive:"Please enter a value greater than %s"}}}),FormValidation.Validator.greaterThan={html5Attributes:{message:"message",value:"value",inclusive:"inclusive"},enableByHtml5:function(a){var b=a.attr("type"),c=a.attr("min");return c&&"date"!==b?{value:c}:!1},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;f=this._format(f);var g=b.getLocale(),h=a.isNumeric(d.value)?d.value:b.getDynamicOption(c,d.value),i=this._format(h);return d.inclusive===!0||void 0===d.inclusive?{valid:a.isNumeric(f)&&parseFloat(f)>=i,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].greaterThan["default"],h)}:{valid:a.isNumeric(f)&&parseFloat(f)>i,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].greaterThan.notInclusive,h)}},_format:function(a){return(a+"").replace(",",".")}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{grid:{"default":"Please enter a valid GRId number"}}}),FormValidation.Validator.grid={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);return""===e?!0:(e=e.toUpperCase(),/^[GRID:]*([0-9A-Z]{2})[-\s]*([0-9A-Z]{5})[-\s]*([0-9A-Z]{10})[-\s]*([0-9A-Z]{1})$/g.test(e)?(e=e.replace(/\s/g,"").replace(/-/g,""),"GRID:"===e.substr(0,5)&&(e=e.substr(5)),FormValidation.Helper.mod37And36(e)):!1)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{hex:{"default":"Please enter a valid hexadecimal number"}}}),FormValidation.Validator.hex={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);return""===e?!0:/^[0-9a-fA-F]+$/.test(e)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{iban:{"default":"Please enter a valid IBAN number",country:"Please enter a valid IBAN number in %s",countries:{AD:"Andorra",AE:"United Arab Emirates",AL:"Albania",AO:"Angola",AT:"Austria",AZ:"Azerbaijan",BA:"Bosnia and Herzegovina",BE:"Belgium",BF:"Burkina Faso",BG:"Bulgaria",BH:"Bahrain",BI:"Burundi",BJ:"Benin",BR:"Brazil",CH:"Switzerland",CI:"Ivory Coast",CM:"Cameroon",CR:"Costa Rica",CV:"Cape Verde",CY:"Cyprus",CZ:"Czech Republic",DE:"Germany",DK:"Denmark",DO:"Dominican Republic",DZ:"Algeria",EE:"Estonia",ES:"Spain",FI:"Finland",FO:"Faroe Islands",FR:"France",GB:"United Kingdom",GE:"Georgia",GI:"Gibraltar",GL:"Greenland",GR:"Greece",GT:"Guatemala",HR:"Croatia",HU:"Hungary",IE:"Ireland",IL:"Israel",IR:"Iran",IS:"Iceland",IT:"Italy",JO:"Jordan",KW:"Kuwait",KZ:"Kazakhstan",LB:"Lebanon",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",LV:"Latvia",MC:"Monaco",MD:"Moldova",ME:"Montenegro",MG:"Madagascar",MK:"Macedonia",ML:"Mali",MR:"Mauritania",MT:"Malta",MU:"Mauritius",MZ:"Mozambique",NL:"Netherlands",NO:"Norway",PK:"Pakistan",PL:"Poland",PS:"Palestine",PT:"Portugal",QA:"Qatar",RO:"Romania",RS:"Serbia",SA:"Saudi Arabia",SE:"Sweden",SI:"Slovenia",SK:"Slovakia",SM:"San Marino",SN:"Senegal",TL:"East Timor",TN:"Tunisia",TR:"Turkey",VG:"Virgin Islands, British",XK:"Republic of Kosovo"}}}}),FormValidation.Validator.iban={html5Attributes:{message:"message",country:"country",sepa:"sepa"},REGEX:{AD:"AD[0-9]{2}[0-9]{4}[0-9]{4}[A-Z0-9]{12}",AE:"AE[0-9]{2}[0-9]{3}[0-9]{16}",AL:"AL[0-9]{2}[0-9]{8}[A-Z0-9]{16}",AO:"AO[0-9]{2}[0-9]{21}",AT:"AT[0-9]{2}[0-9]{5}[0-9]{11}",AZ:"AZ[0-9]{2}[A-Z]{4}[A-Z0-9]{20}",BA:"BA[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{8}[0-9]{2}",BE:"BE[0-9]{2}[0-9]{3}[0-9]{7}[0-9]{2}",BF:"BF[0-9]{2}[0-9]{23}",BG:"BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}",BH:"BH[0-9]{2}[A-Z]{4}[A-Z0-9]{14}",BI:"BI[0-9]{2}[0-9]{12}",BJ:"BJ[0-9]{2}[A-Z]{1}[0-9]{23}",BR:"BR[0-9]{2}[0-9]{8}[0-9]{5}[0-9]{10}[A-Z][A-Z0-9]",CH:"CH[0-9]{2}[0-9]{5}[A-Z0-9]{12}",CI:"CI[0-9]{2}[A-Z]{1}[0-9]{23}",CM:"CM[0-9]{2}[0-9]{23}",CR:"CR[0-9]{2}[0-9]{3}[0-9]{14}",CV:"CV[0-9]{2}[0-9]{21}",CY:"CY[0-9]{2}[0-9]{3}[0-9]{5}[A-Z0-9]{16}",CZ:"CZ[0-9]{2}[0-9]{20}",DE:"DE[0-9]{2}[0-9]{8}[0-9]{10}",DK:"DK[0-9]{2}[0-9]{14}",DO:"DO[0-9]{2}[A-Z0-9]{4}[0-9]{20}",DZ:"DZ[0-9]{2}[0-9]{20}",EE:"EE[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{11}[0-9]{1}",ES:"ES[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{1}[0-9]{1}[0-9]{10}",FI:"FI[0-9]{2}[0-9]{6}[0-9]{7}[0-9]{1}",FO:"FO[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}",FR:"FR[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}",GB:"GB[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}",GE:"GE[0-9]{2}[A-Z]{2}[0-9]{16}",GI:"GI[0-9]{2}[A-Z]{4}[A-Z0-9]{15}",GL:"GL[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}",GR:"GR[0-9]{2}[0-9]{3}[0-9]{4}[A-Z0-9]{16}",GT:"GT[0-9]{2}[A-Z0-9]{4}[A-Z0-9]{20}",HR:"HR[0-9]{2}[0-9]{7}[0-9]{10}",HU:"HU[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{1}[0-9]{15}[0-9]{1}",
IE:"IE[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}",IL:"IL[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{13}",IR:"IR[0-9]{2}[0-9]{22}",IS:"IS[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{6}[0-9]{10}",IT:"IT[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}",JO:"JO[0-9]{2}[A-Z]{4}[0-9]{4}[0]{8}[A-Z0-9]{10}",KW:"KW[0-9]{2}[A-Z]{4}[0-9]{22}",KZ:"KZ[0-9]{2}[0-9]{3}[A-Z0-9]{13}",LB:"LB[0-9]{2}[0-9]{4}[A-Z0-9]{20}",LI:"LI[0-9]{2}[0-9]{5}[A-Z0-9]{12}",LT:"LT[0-9]{2}[0-9]{5}[0-9]{11}",LU:"LU[0-9]{2}[0-9]{3}[A-Z0-9]{13}",LV:"LV[0-9]{2}[A-Z]{4}[A-Z0-9]{13}",MC:"MC[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}",MD:"MD[0-9]{2}[A-Z0-9]{20}",ME:"ME[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}",MG:"MG[0-9]{2}[0-9]{23}",MK:"MK[0-9]{2}[0-9]{3}[A-Z0-9]{10}[0-9]{2}",ML:"ML[0-9]{2}[A-Z]{1}[0-9]{23}",MR:"MR13[0-9]{5}[0-9]{5}[0-9]{11}[0-9]{2}",MT:"MT[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z0-9]{18}",MU:"MU[0-9]{2}[A-Z]{4}[0-9]{2}[0-9]{2}[0-9]{12}[0-9]{3}[A-Z]{3}",MZ:"MZ[0-9]{2}[0-9]{21}",NL:"NL[0-9]{2}[A-Z]{4}[0-9]{10}",NO:"NO[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{1}",PK:"PK[0-9]{2}[A-Z]{4}[A-Z0-9]{16}",PL:"PL[0-9]{2}[0-9]{8}[0-9]{16}",PS:"PS[0-9]{2}[A-Z]{4}[A-Z0-9]{21}",PT:"PT[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{11}[0-9]{2}",QA:"QA[0-9]{2}[A-Z]{4}[A-Z0-9]{21}",RO:"RO[0-9]{2}[A-Z]{4}[A-Z0-9]{16}",RS:"RS[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}",SA:"SA[0-9]{2}[0-9]{2}[A-Z0-9]{18}",SE:"SE[0-9]{2}[0-9]{3}[0-9]{16}[0-9]{1}",SI:"SI[0-9]{2}[0-9]{5}[0-9]{8}[0-9]{2}",SK:"SK[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{10}",SM:"SM[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}",SN:"SN[0-9]{2}[A-Z]{1}[0-9]{23}",TL:"TL38[0-9]{3}[0-9]{14}[0-9]{2}",TN:"TN59[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}",TR:"TR[0-9]{2}[0-9]{5}[A-Z0-9]{1}[A-Z0-9]{16}",VG:"VG[0-9]{2}[A-Z]{4}[0-9]{16}",XK:"XK[0-9]{2}[0-9]{4}[0-9]{10}[0-9]{2}"},SEPA_COUNTRIES:["AT","BE","BG","CH","CY","CZ","DE","DK","EE","ES","FI","FR","GB","GI","GR","HR","HU","IE","IS","IT","LI","LT","LU","LV","MC","MT","NL","NO","PL","PT","RO","SE","SI","SK","SM"],validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;f=f.replace(/[^a-zA-Z0-9]/g,"").toUpperCase();var g=d.country;g?"string"==typeof g&&this.REGEX[g]||(g=b.getDynamicOption(c,g)):g=f.substr(0,2);var h=b.getLocale();if(!this.REGEX[g])return!1;if(void 0!==typeof d.sepa){var i=-1!==a.inArray(g,this.SEPA_COUNTRIES);if(("true"===d.sepa||d.sepa===!0)&&!i||("false"===d.sepa||d.sepa===!1)&&i)return!1}if(!new RegExp("^"+this.REGEX[g]+"$").test(f))return{valid:!1,message:FormValidation.Helper.format(d.message||FormValidation.I18n[h].iban.country,FormValidation.I18n[h].iban.countries[g])};f=f.substr(4)+f.substr(0,4),f=a.map(f.split(""),function(a){var b=a.charCodeAt(0);return b>="A".charCodeAt(0)&&b<="Z".charCodeAt(0)?b-"A".charCodeAt(0)+10:a}),f=f.join("");for(var j=parseInt(f.substr(0,1),10),k=f.length,l=1;k>l;++l)j=(10*j+parseInt(f.substr(l,1),10))%97;return{valid:1===j,message:FormValidation.Helper.format(d.message||FormValidation.I18n[h].iban.country,FormValidation.I18n[h].iban.countries[g])}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{id:{"default":"Please enter a valid identification number",country:"Please enter a valid identification number in %s",countries:{BA:"Bosnia and Herzegovina",BG:"Bulgaria",BR:"Brazil",CH:"Switzerland",CL:"Chile",CN:"China",CZ:"Czech Republic",DK:"Denmark",EE:"Estonia",ES:"Spain",FI:"Finland",HR:"Croatia",IE:"Ireland",IS:"Iceland",LT:"Lithuania",LV:"Latvia",ME:"Montenegro",MK:"Macedonia",NL:"Netherlands",PL:"Poland",RO:"Romania",RS:"Serbia",SE:"Sweden",SI:"Slovenia",SK:"Slovakia",SM:"San Marino",TH:"Thailand",TR:"Turkey",ZA:"South Africa"}}}}),FormValidation.Validator.id={html5Attributes:{message:"message",country:"country"},COUNTRY_CODES:["BA","BG","BR","CH","CL","CN","CZ","DK","EE","ES","FI","HR","IE","IS","LT","LV","ME","MK","NL","PL","RO","RS","SE","SI","SK","SM","TH","TR","ZA"],validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;var g=b.getLocale(),h=d.country;if(h?("string"!=typeof h||-1===a.inArray(h.toUpperCase(),this.COUNTRY_CODES))&&(h=b.getDynamicOption(c,h)):h=f.substr(0,2),-1===a.inArray(h,this.COUNTRY_CODES))return!0;var i=["_",h.toLowerCase()].join(""),j=this[i](f);return j=j===!0||j===!1?{valid:j}:j,j.message=FormValidation.Helper.format(d.message||FormValidation.I18n[g].id.country,FormValidation.I18n[g].id.countries[h.toUpperCase()]),j},_validateJMBG:function(a,b){if(!/^\d{13}$/.test(a))return!1;var c=parseInt(a.substr(0,2),10),d=parseInt(a.substr(2,2),10),e=(parseInt(a.substr(4,3),10),parseInt(a.substr(7,2),10)),f=parseInt(a.substr(12,1),10);if(c>31||d>12)return!1;for(var g=0,h=0;6>h;h++)g+=(7-h)*(parseInt(a.charAt(h),10)+parseInt(a.charAt(h+6),10));if(g=11-g%11,(10===g||11===g)&&(g=0),g!==f)return!1;switch(b.toUpperCase()){case"BA":return e>=10&&19>=e;case"MK":return e>=41&&49>=e;case"ME":return e>=20&&29>=e;case"RS":return e>=70&&99>=e;case"SI":return e>=50&&59>=e;default:return!0}},_ba:function(a){return this._validateJMBG(a,"BA")},_mk:function(a){return this._validateJMBG(a,"MK")},_me:function(a){return this._validateJMBG(a,"ME")},_rs:function(a){return this._validateJMBG(a,"RS")},_si:function(a){return this._validateJMBG(a,"SI")},_bg:function(a){if(!/^\d{10}$/.test(a)&&!/^\d{6}\s\d{3}\s\d{1}$/.test(a))return!1;a=a.replace(/\s/g,"");var b=parseInt(a.substr(0,2),10)+1900,c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10);if(c>40?(b+=100,c-=40):c>20&&(b-=100,c-=20),!FormValidation.Helper.date(b,c,d))return!1;for(var e=0,f=[2,4,8,5,10,9,7,3,6],g=0;9>g;g++)e+=parseInt(a.charAt(g),10)*f[g];return e=e%11%10,e+""===a.substr(9,1)},_br:function(a){if(a=a.replace(/\D/g,""),!/^\d{11}$/.test(a)||/^1{11}|2{11}|3{11}|4{11}|5{11}|6{11}|7{11}|8{11}|9{11}|0{11}$/.test(a))return!1;for(var b=0,c=0;9>c;c++)b+=(10-c)*parseInt(a.charAt(c),10);if(b=11-b%11,(10===b||11===b)&&(b=0),b+""!==a.charAt(9))return!1;var d=0;for(c=0;10>c;c++)d+=(11-c)*parseInt(a.charAt(c),10);return d=11-d%11,(10===d||11===d)&&(d=0),d+""===a.charAt(10)},_ch:function(a){if(!/^756[\.]{0,1}[0-9]{4}[\.]{0,1}[0-9]{4}[\.]{0,1}[0-9]{2}$/.test(a))return!1;a=a.replace(/\D/g,"").substr(3);for(var b=a.length,c=0,d=8===b?[3,1]:[1,3],e=0;b-1>e;e++)c+=parseInt(a.charAt(e),10)*d[e%2];return c=10-c%10,c+""===a.charAt(b-1)},_cl:function(a){if(!/^\d{7,8}[-]{0,1}[0-9K]$/i.test(a))return!1;for(a=a.replace(/\-/g,"");a.length<9;)a="0"+a;for(var b=0,c=[3,2,7,6,5,4,3,2],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=11-b%11,11===b?b=0:10===b&&(b="K"),b+""===a.charAt(8).toUpperCase()},_cn:function(b){if(b=b.trim(),!/^\d{15}$/.test(b)&&!/^\d{17}[\dXx]{1}$/.test(b))return!1;var c={11:{0:[0],1:[[0,9],[11,17]],2:[0,28,29]},12:{0:[0],1:[[0,16]],2:[0,21,23,25]},13:{0:[0],1:[[0,5],7,8,21,[23,33],[81,85]],2:[[0,5],[7,9],[23,25],27,29,30,81,83],3:[[0,4],[21,24]],4:[[0,4],6,21,[23,35],81],5:[[0,3],[21,35],81,82],6:[[0,4],[21,38],[81,84]],7:[[0,3],5,6,[21,33]],8:[[0,4],[21,28]],9:[[0,3],[21,30],[81,84]],10:[[0,3],[22,26],28,81,82],11:[[0,2],[21,28],81,82]},14:{0:[0],1:[0,1,[5,10],[21,23],81],2:[[0,3],11,12,[21,27]],3:[[0,3],11,21,22],4:[[0,2],11,21,[23,31],81],5:[[0,2],21,22,24,25,81],6:[[0,3],[21,24]],7:[[0,2],[21,29],81],8:[[0,2],[21,30],81,82],9:[[0,2],[21,32],81],10:[[0,2],[21,34],81,82],11:[[0,2],[21,30],81,82],23:[[0,3],22,23,[25,30],32,33]},15:{0:[0],1:[[0,5],[21,25]],2:[[0,7],[21,23]],3:[[0,4]],4:[[0,4],[21,26],[28,30]],5:[[0,2],[21,26],81],6:[[0,2],[21,27]],7:[[0,3],[21,27],[81,85]],8:[[0,2],[21,26]],9:[[0,2],[21,29],81],22:[[0,2],[21,24]],25:[[0,2],[22,31]],26:[[0,2],[24,27],[29,32],34],28:[0,1,[22,27]],29:[0,[21,23]]},21:{0:[0],1:[[0,6],[11,14],[22,24],81],2:[[0,4],[11,13],24,[81,83]],3:[[0,4],11,21,23,81],4:[[0,4],11,[21,23]],5:[[0,5],21,22],6:[[0,4],24,81,82],7:[[0,3],11,26,27,81,82],8:[[0,4],11,81,82],9:[[0,5],11,21,22],10:[[0,5],11,21,81],11:[[0,3],21,22],12:[[0,2],4,21,23,24,81,82],13:[[0,3],21,22,24,81,82],14:[[0,4],21,22,81]},22:{0:[0],1:[[0,6],12,22,[81,83]],2:[[0,4],11,21,[81,84]],3:[[0,3],22,23,81,82],4:[[0,3],21,22],5:[[0,3],21,23,24,81,82],6:[[0,2],4,5,[21,23],25,81],7:[[0,2],[21,24],81],8:[[0,2],21,22,81,82],24:[[0,6],24,26]},23:{0:[0],1:[[0,12],21,[23,29],[81,84]],2:[[0,8],21,[23,25],27,[29,31],81],3:[[0,7],21,81,82],4:[[0,7],21,22],5:[[0,3],5,6,[21,24]],6:[[0,6],[21,24]],7:[[0,16],22,81],8:[[0,5],11,22,26,28,33,81,82],9:[[0,4],21],10:[[0,5],24,25,81,[83,85]],11:[[0,2],21,23,24,81,82],12:[[0,2],[21,26],[81,83]],27:[[0,4],[21,23]]},31:{0:[0],1:[0,1,[3,10],[12,20]],2:[0,30]},32:{0:[0],1:[[0,7],11,[13,18],24,25],2:[[0,6],11,81,82],3:[[0,5],11,12,[21,24],81,82],4:[[0,2],4,5,11,12,81,82],5:[[0,9],[81,85]],6:[[0,2],11,12,21,23,[81,84]],7:[0,1,3,5,6,[21,24]],8:[[0,4],11,26,[29,31]],9:[[0,3],[21,25],28,81,82],10:[[0,3],11,12,23,81,84,88],11:[[0,2],11,12,[81,83]],12:[[0,4],[81,84]],13:[[0,2],11,[21,24]]},33:{0:[0],1:[[0,6],[8,10],22,27,82,83,85],2:[0,1,[3,6],11,12,25,26,[81,83]],3:[[0,4],22,24,[26,29],81,82],4:[[0,2],11,21,24,[81,83]],5:[[0,3],[21,23]],6:[[0,2],21,24,[81,83]],7:[[0,3],23,26,27,[81,84]],8:[[0,3],22,24,25,81],9:[[0,3],21,22],10:[[0,4],[21,24],81,82],11:[[0,2],[21,27],81]},34:{0:[0],1:[[0,4],11,[21,24],81],2:[[0,4],7,8,[21,23],25],3:[[0,4],11,[21,23]],4:[[0,6],21],5:[[0,4],6,[21,23]],6:[[0,4],21],7:[[0,3],11,21],8:[[0,3],11,[22,28],81],10:[[0,4],[21,24]],11:[[0,3],22,[24,26],81,82],12:[[0,4],21,22,25,26,82],13:[[0,2],[21,24]],14:[[0,2],[21,24]],15:[[0,3],[21,25]],16:[[0,2],[21,23]],17:[[0,2],[21,23]],18:[[0,2],[21,25],81]},35:{0:[0],1:[[0,5],11,[21,25],28,81,82],2:[[0,6],[11,13]],3:[[0,5],22],4:[[0,3],21,[23,30],81],5:[[0,5],21,[24,27],[81,83]],6:[[0,3],[22,29],81],7:[[0,2],[21,25],[81,84]],8:[[0,2],[21,25],81],9:[[0,2],[21,26],81,82]},36:{0:[0],1:[[0,5],11,[21,24]],2:[[0,3],22,81],3:[[0,2],13,[21,23]],4:[[0,3],21,[23,30],81,82],5:[[0,2],21],6:[[0,2],22,81],7:[[0,2],[21,35],81,82],8:[[0,3],[21,30],81],9:[[0,2],[21,26],[81,83]],10:[[0,2],[21,30]],11:[[0,2],[21,30],81]},37:{0:[0],1:[[0,5],12,13,[24,26],81],2:[[0,3],5,[11,14],[81,85]],3:[[0,6],[21,23]],4:[[0,6],81],5:[[0,3],[21,23]],6:[[0,2],[11,13],34,[81,87]],7:[[0,5],24,25,[81,86]],8:[[0,2],11,[26,32],[81,83]],9:[[0,3],11,21,23,82,83],10:[[0,2],[81,83]],11:[[0,3],21,22],12:[[0,3]],13:[[0,2],11,12,[21,29]],14:[[0,2],[21,28],81,82],15:[[0,2],[21,26],81],16:[[0,2],[21,26]],17:[[0,2],[21,28]]},41:{0:[0],1:[[0,6],8,22,[81,85]],2:[[0,5],11,[21,25]],3:[[0,7],11,[22,29],81],4:[[0,4],11,[21,23],25,81,82],5:[[0,3],5,6,22,23,26,27,81],6:[[0,3],11,21,22],7:[[0,4],11,21,[24,28],81,82],8:[[0,4],11,[21,23],25,[81,83]],9:[[0,2],22,23,[26,28]],10:[[0,2],[23,25],81,82],11:[[0,4],[21,23]],12:[[0,2],21,22,24,81,82],13:[[0,3],[21,30],81],14:[[0,3],[21,26],81],15:[[0,3],[21,28]],16:[[0,2],[21,28],81],17:[[0,2],[21,29]],90:[0,1]},42:{0:[0],1:[[0,7],[11,17]],2:[[0,5],22,81],3:[[0,3],[21,25],81],5:[[0,6],[25,29],[81,83]],6:[[0,2],6,7,[24,26],[82,84]],7:[[0,4]],8:[[0,2],4,21,22,81],9:[[0,2],[21,23],81,82,84],10:[[0,3],[22,24],81,83,87],11:[[0,2],[21,27],81,82],12:[[0,2],[21,24],81],13:[[0,3],21,81],28:[[0,2],22,23,[25,28]],90:[0,[4,6],21]},43:{0:[0],1:[[0,5],11,12,21,22,24,81],2:[[0,4],11,21,[23,25],81],3:[[0,2],4,21,81,82],4:[0,1,[5,8],12,[21,24],26,81,82],5:[[0,3],11,[21,25],[27,29],81],6:[[0,3],11,21,23,24,26,81,82],7:[[0,3],[21,26],81],8:[[0,2],11,21,22],9:[[0,3],[21,23],81],10:[[0,3],[21,28],81],11:[[0,3],[21,29]],12:[[0,2],[21,30],81],13:[[0,2],21,22,81,82],31:[0,1,[22,27],30]},44:{0:[0],1:[[0,7],[11,16],83,84],2:[[0,5],21,22,24,29,32,33,81,82],3:[0,1,[3,8]],4:[[0,4]],5:[0,1,[6,15],23,82,83],6:[0,1,[4,8]],7:[0,1,[3,5],81,[83,85]],8:[[0,4],11,23,25,[81,83]],9:[[0,3],23,[81,83]],12:[[0,3],[23,26],83,84],13:[[0,3],[22,24],81],14:[[0,2],[21,24],26,27,81],15:[[0,2],21,23,81],16:[[0,2],[21,25]],17:[[0,2],21,23,81],18:[[0,3],21,23,[25,27],81,82],19:[0],20:[0],51:[[0,3],21,22],52:[[0,3],21,22,24,81],53:[[0,2],[21,23],81]},45:{0:[0],1:[[0,9],[21,27]],2:[[0,5],[21,26]],3:[[0,5],11,12,[21,32]],4:[0,1,[3,6],11,[21,23],81],5:[[0,3],12,21],6:[[0,3],21,81],7:[[0,3],21,22],8:[[0,4],21,81],9:[[0,3],[21,24],81],10:[[0,2],[21,31]],11:[[0,2],[21,23]],12:[[0,2],[21,29],81],13:[[0,2],[21,24],81],14:[[0,2],[21,25],81]},46:{0:[0],1:[0,1,[5,8]],2:[0,1],3:[0,[21,23]],90:[[0,3],[5,7],[21,39]]},50:{0:[0],1:[[0,19]],2:[0,[22,38],[40,43]],3:[0,[81,84]]},51:{0:[0],1:[0,1,[4,8],[12,15],[21,24],29,31,32,[81,84]],3:[[0,4],11,21,22],4:[[0,3],11,21,22],5:[[0,4],21,22,24,25],6:[0,1,3,23,26,[81,83]],7:[0,1,3,4,[22,27],81],8:[[0,2],11,12,[21,24]],9:[[0,4],[21,23]],10:[[0,2],11,24,25,28],11:[[0,2],[11,13],23,24,26,29,32,33,81],13:[[0,4],[21,25],81],14:[[0,2],[21,25]],15:[[0,3],[21,29]],16:[[0,3],[21,23],81],17:[[0,3],[21,25],81],18:[[0,3],[21,27]],19:[[0,3],[21,23]],20:[[0,2],21,22,81],32:[0,[21,33]],33:[0,[21,38]],34:[0,1,[22,37]]},52:{0:[0],1:[[0,3],[11,15],[21,23],81],2:[0,1,3,21,22],3:[[0,3],[21,30],81,82],4:[[0,2],[21,25]],5:[[0,2],[21,27]],6:[[0,3],[21,28]],22:[0,1,[22,30]],23:[0,1,[22,28]],24:[0,1,[22,28]],26:[0,1,[22,36]],27:[[0,2],22,23,[25,32]]},53:{0:[0],1:[[0,3],[11,14],21,22,[24,29],81],3:[[0,2],[21,26],28,81],4:[[0,2],[21,28]],5:[[0,2],[21,24]],6:[[0,2],[21,30]],7:[[0,2],[21,24]],8:[[0,2],[21,29]],9:[[0,2],[21,27]],23:[0,1,[22,29],31],25:[[0,4],[22,32]],26:[0,1,[21,28]],27:[0,1,[22,30]],28:[0,1,22,23],29:[0,1,[22,32]],31:[0,2,3,[22,24]],34:[0,[21,23]],33:[0,21,[23,25]],35:[0,[21,28]]},54:{0:[0],1:[[0,2],[21,27]],21:[0,[21,29],32,33],22:[0,[21,29],[31,33]],23:[0,1,[22,38]],24:[0,[21,31]],25:[0,[21,27]],26:[0,[21,27]]},61:{0:[0],1:[[0,4],[11,16],22,[24,26]],2:[[0,4],22],3:[[0,4],[21,24],[26,31]],4:[[0,4],[22,31],81],5:[[0,2],[21,28],81,82],6:[[0,2],[21,32]],7:[[0,2],[21,30]],8:[[0,2],[21,31]],9:[[0,2],[21,29]],10:[[0,2],[21,26]]},62:{0:[0],1:[[0,5],11,[21,23]],2:[0,1],3:[[0,2],21],4:[[0,3],[21,23]],5:[[0,3],[21,25]],6:[[0,2],[21,23]],7:[[0,2],[21,25]],8:[[0,2],[21,26]],9:[[0,2],[21,24],81,82],10:[[0,2],[21,27]],11:[[0,2],[21,26]],12:[[0,2],[21,28]],24:[0,21,[24,29]],26:[0,21,[23,30]],29:[0,1,[21,27]],30:[0,1,[21,27]]},63:{0:[0],1:[[0,5],[21,23]],2:[0,2,[21,25]],21:[0,[21,23],[26,28]],22:[0,[21,24]],23:[0,[21,24]],25:[0,[21,25]],26:[0,[21,26]],27:[0,1,[21,26]],28:[[0,2],[21,23]]},64:{0:[0],1:[0,1,[4,6],21,22,81],2:[[0,3],5,[21,23]],3:[[0,3],[21,24],81],4:[[0,2],[21,25]],5:[[0,2],21,22]},65:{0:[0],1:[[0,9],21],2:[[0,5]],21:[0,1,22,23],22:[0,1,22,23],23:[[0,3],[23,25],27,28],28:[0,1,[22,29]],29:[0,1,[22,29]],30:[0,1,[22,24]],31:[0,1,[21,31]],32:[0,1,[21,27]],40:[0,2,3,[21,28]],42:[[0,2],21,[23,26]],43:[0,1,[21,26]],90:[[0,4]],27:[[0,2],22,23]},71:{0:[0]},81:{0:[0]},82:{0:[0]}},d=parseInt(b.substr(0,2),10),e=parseInt(b.substr(2,2),10),f=parseInt(b.substr(4,2),10);if(!c[d]||!c[d][e])return!1;for(var g=!1,h=c[d][e],i=0;i<h.length;i++)if(a.isArray(h[i])&&h[i][0]<=f&&f<=h[i][1]||!a.isArray(h[i])&&f===h[i]){g=!0;break}if(!g)return!1;var j;j=18===b.length?b.substr(6,8):"19"+b.substr(6,6);var k=parseInt(j.substr(0,4),10),l=parseInt(j.substr(4,2),10),m=parseInt(j.substr(6,2),10);if(!FormValidation.Helper.date(k,l,m))return!1;if(18===b.length){var n=0,o=[7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2];for(i=0;17>i;i++)n+=parseInt(b.charAt(i),10)*o[i];n=(12-n%11)%11;var p="X"!==b.charAt(17).toUpperCase()?parseInt(b.charAt(17),10):10;return p===n}return!0},_cz:function(a){if(!/^\d{9,10}$/.test(a))return!1;var b=1900+parseInt(a.substr(0,2),10),c=parseInt(a.substr(2,2),10)%50%20,d=parseInt(a.substr(4,2),10);if(9===a.length){if(b>=1980&&(b-=100),b>1953)return!1}else 1954>b&&(b+=100);if(!FormValidation.Helper.date(b,c,d))return!1;if(10===a.length){var e=parseInt(a.substr(0,9),10)%11;return 1985>b&&(e%=10),e+""===a.substr(9,1)}return!0},_dk:function(a){if(!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(a))return!1;a=a.replace(/-/g,"");var b=parseInt(a.substr(0,2),10),c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10);switch(!0){case-1!=="5678".indexOf(a.charAt(6))&&d>=58:d+=1800;break;case-1!=="0123".indexOf(a.charAt(6)):case-1!=="49".indexOf(a.charAt(6))&&d>=37:d+=1900;break;default:d+=2e3}return FormValidation.Helper.date(d,c,b)},_ee:function(a){return this._lt(a)},_es:function(a){var b=/^[0-9]{8}[-]{0,1}[A-HJ-NP-TV-Z]$/.test(a),c=/^[XYZ][-]{0,1}[0-9]{7}[-]{0,1}[A-HJ-NP-TV-Z]$/.test(a),d=/^[A-HNPQS][-]{0,1}[0-9]{7}[-]{0,1}[0-9A-J]$/.test(a);if(!b&&!c&&!d)return!1;a=a.replace(/-/g,"");var e,f,g=!0;if(b||c){f="DNI";var h="XYZ".indexOf(a.charAt(0));return-1!==h&&(a=h+a.substr(1)+"",f="NIE"),e=parseInt(a.substr(0,8),10),e="TRWAGMYFPDXBNJZSQVHLCKE"[e%23],{valid:e===a.substr(8,1),type:f}}e=a.substr(1,7),f="CIF";for(var i=a[0],j=a.substr(-1),k=0,l=0;l<e.length;l++)if(l%2!==0)k+=parseInt(e[l],10);else{var m=""+2*parseInt(e[l],10);k+=parseInt(m[0],10),2===m.length&&(k+=parseInt(m[1],10))}var n=k-10*Math.floor(k/10);return 0!==n&&(n=10-n),g=-1!=="KQS".indexOf(i)?j==="JABCDEFGHI"[n]:-1!=="ABEH".indexOf(i)?j===""+n:j===""+n||j==="JABCDEFGHI"[n],{valid:g,type:f}},_fi:function(a){if(!/^[0-9]{6}[-+A][0-9]{3}[0-9ABCDEFHJKLMNPRSTUVWXY]$/.test(a))return!1;var b=parseInt(a.substr(0,2),10),c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10),e={"+":1800,"-":1900,A:2e3};if(d=e[a.charAt(6)]+d,!FormValidation.Helper.date(d,c,b))return!1;var f=parseInt(a.substr(7,3),10);if(2>f)return!1;var g=a.substr(0,6)+a.substr(7,3)+"";return g=parseInt(g,10),"0123456789ABCDEFHJKLMNPRSTUVWXY".charAt(g%31)===a.charAt(10)},_hr:function(a){return/^[0-9]{11}$/.test(a)?FormValidation.Helper.mod11And10(a):!1},_ie:function(a){if(!/^\d{7}[A-W][AHWTX]?$/.test(a))return!1;var b=function(a){for(;a.length<7;)a="0"+a;for(var b="WABCDEFGHIJKLMNOPQRSTUV",c=0,d=0;7>d;d++)c+=parseInt(a.charAt(d),10)*(8-d);return c+=9*b.indexOf(a.substr(7)),b[c%23]};return 9!==a.length||"A"!==a.charAt(8)&&"H"!==a.charAt(8)?a.charAt(7)===b(a.substr(0,7)):a.charAt(7)===b(a.substr(0,7)+a.substr(8)+"")},_is:function(a){if(!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(a))return!1;a=a.replace(/-/g,"");var b=parseInt(a.substr(0,2),10),c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10),e=parseInt(a.charAt(9),10);if(d=9===e?1900+d:100*(20+e)+d,!FormValidation.Helper.date(d,c,b,!0))return!1;for(var f=0,g=[3,2,7,6,5,4,3,2],h=0;8>h;h++)f+=parseInt(a.charAt(h),10)*g[h];return f=11-f%11,f+""===a.charAt(8)},_lt:function(a){if(!/^[0-9]{11}$/.test(a))return!1;var b=parseInt(a.charAt(0),10),c=parseInt(a.substr(1,2),10),d=parseInt(a.substr(3,2),10),e=parseInt(a.substr(5,2),10),f=b%2===0?17+b/2:17+(b+1)/2;if(c=100*f+c,!FormValidation.Helper.date(c,d,e,!0))return!1;for(var g=0,h=[1,2,3,4,5,6,7,8,9,1],i=0;10>i;i++)g+=parseInt(a.charAt(i),10)*h[i];if(g%=11,10!==g)return g+""===a.charAt(10);for(g=0,h=[3,4,5,6,7,8,9,1,2,3],i=0;10>i;i++)g+=parseInt(a.charAt(i),10)*h[i];return g%=11,10===g&&(g=0),g+""===a.charAt(10)},_lv:function(a){if(!/^[0-9]{6}[-]{0,1}[0-9]{5}$/.test(a))return!1;a=a.replace(/\D/g,"");var b=parseInt(a.substr(0,2),10),c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10);if(d=d+1800+100*parseInt(a.charAt(6),10),!FormValidation.Helper.date(d,c,b,!0))return!1;for(var e=0,f=[10,5,8,4,2,1,6,3,7,9],g=0;10>g;g++)e+=parseInt(a.charAt(g),10)*f[g];return e=(e+1)%11%10,e+""===a.charAt(10)},_nl:function(a){if(a.length<8)return!1;if(8===a.length&&(a="0"+a),!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(a))return!1;if(a=a.replace(/\./g,""),0===parseInt(a,10))return!1;for(var b=0,c=a.length,d=0;c-1>d;d++)b+=(9-d)*parseInt(a.charAt(d),10);return b%=11,10===b&&(b=0),b+""===a.charAt(c-1)},_pl:function(a){if(!/^[0-9]{11}$/.test(a))return!1;for(var b=0,c=a.length,d=[1,3,7,9,1,3,7,9,1,3,7],e=0;c-1>e;e++)b+=d[e]*parseInt(a.charAt(e),10);return b%=10,0===b&&(b=10),b=10-b,b+""===a.charAt(c-1)},_ro:function(a){if(!/^[0-9]{13}$/.test(a))return!1;var b=parseInt(a.charAt(0),10);if(0===b||7===b||8===b)return!1;var c=parseInt(a.substr(1,2),10),d=parseInt(a.substr(3,2),10),e=parseInt(a.substr(5,2),10),f={1:1900,2:1900,3:1800,4:1800,5:2e3,6:2e3};if(e>31&&d>12)return!1;if(9!==b&&(c=f[b+""]+c,!FormValidation.Helper.date(c,d,e)))return!1;for(var g=0,h=[2,7,9,1,4,6,3,5,8,2,7,9],i=a.length,j=0;i-1>j;j++)g+=parseInt(a.charAt(j),10)*h[j];return g%=11,10===g&&(g=1),g+""===a.charAt(i-1)},_se:function(a){if(!/^[0-9]{10}$/.test(a)&&!/^[0-9]{6}[-|+][0-9]{4}$/.test(a))return!1;a=a.replace(/[^0-9]/g,"");var b=parseInt(a.substr(0,2),10)+1900,c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10);return FormValidation.Helper.date(b,c,d)?FormValidation.Helper.luhn(a):!1},_sk:function(a){return this._cz(a)},_sm:function(a){return/^\d{5}$/.test(a)},_th:function(a){if(13!==a.length)return!1;for(var b=0,c=0;12>c;c++)b+=parseInt(a.charAt(c),10)*(13-c);return(11-b%11)%10===parseInt(a.charAt(12),10)},_tr:function(a){if(11!==a.length)return!1;for(var b=0,c=0;10>c;c++)b+=parseInt(a.charAt(c),10);return b%10===parseInt(a.charAt(10),10)},_za:function(a){if(!/^[0-9]{10}[0|1][8|9][0-9]$/.test(a))return!1;var b=parseInt(a.substr(0,2),10),c=(new Date).getFullYear()%100,d=parseInt(a.substr(2,2),10),e=parseInt(a.substr(4,2),10);return b=b>=c?b+1900:b+2e3,FormValidation.Helper.date(b,d,e)?FormValidation.Helper.luhn(a):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{identical:{"default":"Please enter the same value"}}}),FormValidation.Validator.identical={html5Attributes:{message:"message",field:"field"},init:function(a,b,c,d){var e=a.getFieldElements(c.field);a.onLiveChange(e,"live_"+d,function(){var c=a.getStatus(b,d);c!==a.STATUS_NOT_VALIDATED&&a.revalidateField(b)})},destroy:function(a,b,c,d){var e=a.getFieldElements(c.field);a.offLiveChange(e,"live_"+d)},validate:function(a,b,c,d){var e=a.getFieldValue(b,d),f=a.getFieldElements(c.field);if(null===f||0===f.length)return!0;var g=a.getFieldValue(f,d);return e===g?(a.updateStatus(f,a.STATUS_VALID,d),!0):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{imei:{"default":"Please enter a valid IMEI number"}}}),FormValidation.Validator.imei={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;switch(!0){case/^\d{15}$/.test(e):case/^\d{2}-\d{6}-\d{6}-\d{1}$/.test(e):case/^\d{2}\s\d{6}\s\d{6}\s\d{1}$/.test(e):return e=e.replace(/[^0-9]/g,""),FormValidation.Helper.luhn(e);case/^\d{14}$/.test(e):case/^\d{16}$/.test(e):case/^\d{2}-\d{6}-\d{6}(|-\d{2})$/.test(e):case/^\d{2}\s\d{6}\s\d{6}(|\s\d{2})$/.test(e):return!0;default:return!1}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{imo:{"default":"Please enter a valid IMO number"}}}),FormValidation.Validator.imo={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;if(!/^IMO \d{7}$/i.test(e))return!1;for(var f=0,g=e.replace(/^.*(\d{7})$/,"$1"),h=6;h>=1;h--)f+=g.slice(6-h,-h)*(h+1);return f%10===parseInt(g.charAt(6),10)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{integer:{"default":"Please enter a valid number"}}}),FormValidation.Validator.integer={html5Attributes:{message:"message",thousandsseparator:"thousandsSeparator",decimalseparator:"decimalSeparator"},enableByHtml5:function(a){return"number"===a.attr("type")&&(void 0===a.attr("step")||a.attr("step")%1===0)},validate:function(a,b,c,d){if(this.enableByHtml5(b)&&b.get(0).validity&&b.get(0).validity.badInput===!0)return!1;var e=a.getFieldValue(b,d);if(""===e)return!0;var f=c.decimalSeparator||".",g=c.thousandsSeparator||"";f="."===f?"\\.":f,g="."===g?"\\.":g;var h=new RegExp("^-?[0-9]{1,3}("+g+"[0-9]{3})*("+f+"[0-9]+)?$"),i=new RegExp(g,"g");return h.test(e)?(g&&(e=e.replace(i,"")),f&&(e=e.replace(f,".")),isNaN(e)||!isFinite(e)?!1:(e=parseFloat(e),Math.floor(e)===e)):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{ip:{"default":"Please enter a valid IP address",ipv4:"Please enter a valid IPv4 address",ipv6:"Please enter a valid IPv6 address"}}}),FormValidation.Validator.ip={html5Attributes:{message:"message",ipv4:"ipv4",ipv6:"ipv6"},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;d=a.extend({},{ipv4:!0,ipv6:!0},d);var g,h=b.getLocale(),i=/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/([0-9]|[1-2][0-9]|3[0-2]))?$/,j=/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*(\/(\d|\d\d|1[0-1]\d|12[0-8]))?$/,k=!1;switch(!0){case d.ipv4&&!d.ipv6:k=i.test(f),g=d.message||FormValidation.I18n[h].ip.ipv4;break;case!d.ipv4&&d.ipv6:k=j.test(f),g=d.message||FormValidation.I18n[h].ip.ipv6;break;case d.ipv4&&d.ipv6:default:k=i.test(f)||j.test(f),g=d.message||FormValidation.I18n[h].ip["default"]}return{valid:k,message:g}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{isbn:{"default":"Please enter a valid ISBN number"}}}),FormValidation.Validator.isbn={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;var f;switch(!0){case/^\d{9}[\dX]$/.test(e):case 13===e.length&&/^(\d+)-(\d+)-(\d+)-([\dX])$/.test(e):case 13===e.length&&/^(\d+)\s(\d+)\s(\d+)\s([\dX])$/.test(e):f="ISBN10";break;case/^(978|979)\d{9}[\dX]$/.test(e):case 17===e.length&&/^(978|979)-(\d+)-(\d+)-(\d+)-([\dX])$/.test(e):case 17===e.length&&/^(978|979)\s(\d+)\s(\d+)\s(\d+)\s([\dX])$/.test(e):f="ISBN13";break;default:return!1}e=e.replace(/[^0-9X]/gi,"");var g,h,i=e.split(""),j=i.length,k=0;switch(f){case"ISBN10":for(k=0,g=0;j-1>g;g++)k+=parseInt(i[g],10)*(10-g);return h=11-k%11,11===h?h=0:10===h&&(h="X"),{type:f,valid:h+""===i[j-1]};case"ISBN13":for(k=0,g=0;j-1>g;g++)k+=g%2===0?parseInt(i[g],10):3*parseInt(i[g],10);return h=10-k%10,10===h&&(h="0"),{type:f,valid:h+""===i[j-1]};default:return!1}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{isin:{"default":"Please enter a valid ISIN number"}}}),FormValidation.Validator.isin={COUNTRY_CODES:"AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW",validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;e=e.toUpperCase();var f=new RegExp("^("+this.COUNTRY_CODES+")[0-9A-Z]{10}$");if(!f.test(e))return!1;for(var g="",h=e.length,i=0;h-1>i;i++){var j=e.charCodeAt(i);g+=j>57?(j-55).toString():e.charAt(i)}var k="",l=g.length,m=l%2!==0?0:1;for(i=0;l>i;i++)k+=parseInt(g[i],10)*(i%2===m?2:1)+"";var n=0;for(i=0;i<k.length;i++)n+=parseInt(k.charAt(i),10);return n=(10-n%10)%10,n+""===e.charAt(h-1)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{ismn:{"default":"Please enter a valid ISMN number"}}}),FormValidation.Validator.ismn={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;var f;switch(!0){case/^M\d{9}$/.test(e):case/^M-\d{4}-\d{4}-\d{1}$/.test(e):case/^M\s\d{4}\s\d{4}\s\d{1}$/.test(e):f="ISMN10";break;case/^9790\d{9}$/.test(e):case/^979-0-\d{4}-\d{4}-\d{1}$/.test(e):case/^979\s0\s\d{4}\s\d{4}\s\d{1}$/.test(e):f="ISMN13";break;default:return!1}"ISMN10"===f&&(e="9790"+e.substr(1)),e=e.replace(/[^0-9]/gi,"");for(var g=e.length,h=0,i=[1,3],j=0;g-1>j;j++)h+=parseInt(e.charAt(j),10)*i[j%2];return h=10-h%10,{type:f,valid:h+""===e.charAt(g-1)}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{issn:{"default":"Please enter a valid ISSN number"}}}),FormValidation.Validator.issn={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;if(!/^\d{4}\-\d{3}[\dX]$/.test(e))return!1;e=e.replace(/[^0-9X]/gi,"");var f=e.split(""),g=f.length,h=0;"X"===f[7]&&(f[7]=10);for(var i=0;g>i;i++)h+=parseInt(f[i],10)*(8-i);return h%11===0}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{lessThan:{"default":"Please enter a value less than or equal to %s",notInclusive:"Please enter a value less than %s"}}}),FormValidation.Validator.lessThan={html5Attributes:{message:"message",value:"value",inclusive:"inclusive"},enableByHtml5:function(a){var b=a.attr("type"),c=a.attr("max");return c&&"date"!==b?{value:c}:!1},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;f=this._format(f);var g=b.getLocale(),h=a.isNumeric(d.value)?d.value:b.getDynamicOption(c,d.value),i=this._format(h);return d.inclusive===!0||void 0===d.inclusive?{valid:a.isNumeric(f)&&parseFloat(f)<=i,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].lessThan["default"],h)}:{valid:a.isNumeric(f)&&parseFloat(f)<i,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].lessThan.notInclusive,h)}},_format:function(a){return(a+"").replace(",",".")}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{mac:{"default":"Please enter a valid MAC address"}}}),FormValidation.Validator.mac={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);return""===e?!0:/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/.test(e)||/^([0-9A-Fa-f]{4}\.){2}([0-9A-Fa-f]{4})$/.test(e)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{meid:{"default":"Please enter a valid MEID number"}}}),FormValidation.Validator.meid={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;switch(!0){case/^[0-9A-F]{15}$/i.test(e):case/^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}[- ][0-9A-F]$/i.test(e):case/^\d{19}$/.test(e):case/^\d{5}[- ]\d{5}[- ]\d{4}[- ]\d{4}[- ]\d$/.test(e):var f=e.charAt(e.length-1);if(e=e.replace(/[- ]/g,""),e.match(/^\d*$/i))return FormValidation.Helper.luhn(e);e=e.slice(0,-1);for(var g="",h=1;13>=h;h+=2)g+=(2*parseInt(e.charAt(h),16)).toString(16);var i=0;for(h=0;h<g.length;h++)i+=parseInt(g.charAt(h),16);return i%10===0?"0"===f:f===(2*(10*Math.floor((i+10)/10)-i)).toString(16);case/^[0-9A-F]{14}$/i.test(e):case/^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}$/i.test(e):case/^\d{18}$/.test(e):case/^\d{5}[- ]\d{5}[- ]\d{4}[- ]\d{4}$/.test(e):return!0;default:return!1}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{notEmpty:{"default":"Please enter a value"}}}),FormValidation.Validator.notEmpty={enableByHtml5:function(a){var b=a.attr("required")+"";return"required"===b||"true"===b},validate:function(b,c,d,e){var f=c.attr("type");if("radio"===f||"checkbox"===f){var g=b.getNamespace();return b.getFieldElements(c.attr("data-"+g+"-field")).filter(":checked").length>0}if("number"===f&&c.get(0).validity&&c.get(0).validity.badInput===!0)return!0;var h=b.getFieldValue(c,e);return""!==a.trim(h)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{numeric:{"default":"Please enter a valid float number"}}}),FormValidation.Validator.numeric={html5Attributes:{message:"message",separator:"separator",thousandsseparator:"thousandsSeparator",decimalseparator:"decimalSeparator"
},enableByHtml5:function(a){return"number"===a.attr("type")&&void 0!==a.attr("step")&&a.attr("step")%1!==0},validate:function(a,b,c,d){if(this.enableByHtml5(b)&&b.get(0).validity&&b.get(0).validity.badInput===!0)return!1;var e=a.getFieldValue(b,d);if(""===e)return!0;var f=c.separator||c.decimalSeparator||".",g=c.thousandsSeparator||"";e.substr(0,1)===f?e="0"+f+e.substr(1):e.substr(0,2)==="-"+f&&(e="-0"+f+e.substr(2)),f="."===f?"\\.":f,g="."===g?"\\.":g;var h=new RegExp("^-?[0-9]{1,3}("+g+"[0-9]{3})*("+f+"[0-9]+)?$"),i=new RegExp(g,"g");return h.test(e)?(g&&(e=e.replace(i,"")),f&&(e=e.replace(f,".")),!isNaN(parseFloat(e))&&isFinite(e)):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{phone:{"default":"Please enter a valid phone number",country:"Please enter a valid phone number in %s",countries:{AE:"United Arab Emirates",BG:"Bulgaria",BR:"Brazil",CN:"China",CZ:"Czech Republic",DE:"Germany",DK:"Denmark",ES:"Spain",FR:"France",GB:"United Kingdom",IN:"India",MA:"Morocco",NL:"Netherlands",PK:"Pakistan",RO:"Romania",RU:"Russia",SK:"Slovakia",TH:"Thailand",US:"USA",VE:"Venezuela"}}}}),FormValidation.Validator.phone={html5Attributes:{message:"message",country:"country"},COUNTRY_CODES:["AE","BG","BR","CN","CZ","DE","DK","ES","FR","GB","IN","MA","NL","PK","RO","RU","SK","TH","US","VE"],validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;var g=b.getLocale(),h=d.country;if(("string"!=typeof h||-1===a.inArray(h,this.COUNTRY_CODES))&&(h=b.getDynamicOption(c,h)),!h||-1===a.inArray(h.toUpperCase(),this.COUNTRY_CODES))return!0;var i=!0;switch(h.toUpperCase()){case"AE":f=a.trim(f),i=/^(((\+|00)?971[\s\.-]?(\(0\)[\s\.-]?)?|0)(\(5(0|2|5|6)\)|5(0|2|5|6)|2|3|4|6|7|9)|60)([\s\.-]?[0-9]){7}$/.test(f);break;case"BG":f=f.replace(/\+|\s|-|\/|\(|\)/gi,""),i=/^(0|359|00)(((700|900)[0-9]{5}|((800)[0-9]{5}|(800)[0-9]{4}))|(87|88|89)([0-9]{7})|((2[0-9]{7})|(([3-9][0-9])(([0-9]{6})|([0-9]{5})))))$/.test(f);break;case"BR":f=a.trim(f),i=/^(([\d]{4}[-.\s]{1}[\d]{2,3}[-.\s]{1}[\d]{2}[-.\s]{1}[\d]{2})|([\d]{4}[-.\s]{1}[\d]{3}[-.\s]{1}[\d]{4})|((\(?\+?[0-9]{2}\)?\s?)?(\(?\d{2}\)?\s?)?\d{4,5}[-.\s]?\d{4}))$/.test(f);break;case"CN":f=a.trim(f),i=/^((00|\+)?(86(?:-| )))?((\d{11})|(\d{3}[- ]{1}\d{4}[- ]{1}\d{4})|((\d{2,4}[- ]){1}(\d{7,8}|(\d{3,4}[- ]{1}\d{4}))([- ]{1}\d{1,4})?))$/.test(f);break;case"CZ":i=/^(((00)([- ]?)|\+)(420)([- ]?))?((\d{3})([- ]?)){2}(\d{3})$/.test(f);break;case"DE":f=a.trim(f),i=/^(((((((00|\+)49[ \-/]?)|0)[1-9][0-9]{1,4})[ \-/]?)|((((00|\+)49\()|\(0)[1-9][0-9]{1,4}\)[ \-/]?))[0-9]{1,7}([ \-/]?[0-9]{1,5})?)$/.test(f);break;case"DK":f=a.trim(f),i=/^(\+45|0045|\(45\))?\s?[2-9](\s?\d){7}$/.test(f);break;case"ES":f=a.trim(f),i=/^(?:(?:(?:\+|00)34\D?))?(?:5|6|7|8|9)(?:\d\D?){8}$/.test(f);break;case"FR":f=a.trim(f),i=/^(?:(?:(?:\+|00)33[ ]?(?:\(0\)[ ]?)?)|0){1}[1-9]{1}([ .-]?)(?:\d{2}\1?){3}\d{2}$/.test(f);break;case"GB":f=a.trim(f),i=/^\(?(?:(?:0(?:0|11)\)?[\s-]?\(?|\+)44\)?[\s-]?\(?(?:0\)?[\s-]?\(?)?|0)(?:\d{2}\)?[\s-]?\d{4}[\s-]?\d{4}|\d{3}\)?[\s-]?\d{3}[\s-]?\d{3,4}|\d{4}\)?[\s-]?(?:\d{5}|\d{3}[\s-]?\d{3})|\d{5}\)?[\s-]?\d{4,5}|8(?:00[\s-]?11[\s-]?11|45[\s-]?46[\s-]?4\d))(?:(?:[\s-]?(?:x|ext\.?\s?|\#)\d+)?)$/.test(f);break;case"IN":f=a.trim(f),i=/((\+?)((0[ -]+)*|(91 )*)(\d{12}|\d{10}))|\d{5}([- ]*)\d{6}/.test(f);break;case"MA":f=a.trim(f),i=/^(?:(?:(?:\+|00)212[\s]?(?:[\s]?\(0\)[\s]?)?)|0){1}(?:5[\s.-]?[2-3]|6[\s.-]?[13-9]){1}[0-9]{1}(?:[\s.-]?\d{2}){3}$/.test(f);break;case"NL":f=a.trim(f),i=/^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9])((\s|\s?-\s?)?[0-9])((\s|\s?-\s?)?[0-9])\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]$/gm.test(f);break;case"PK":f=a.trim(f),i=/^0?3[0-9]{2}[0-9]{7}$/.test(f);break;case"RO":i=/^(\+4|)?(07[0-8]{1}[0-9]{1}|02[0-9]{2}|03[0-9]{2}){1}?(\s|\.|\-)?([0-9]{3}(\s|\.|\-|)){2}$/g.test(f);break;case"RU":i=/^((8|\+7|007)[\-\.\/ ]?)?([\(\/\.]?\d{3}[\)\/\.]?[\-\.\/ ]?)?[\d\-\.\/ ]{7,10}$/g.test(f);break;case"SK":i=/^(((00)([- ]?)|\+)(421)([- ]?))?((\d{3})([- ]?)){2}(\d{3})$/.test(f);break;case"TH":i=/^0\(?([6|8-9]{2})*-([0-9]{3})*-([0-9]{4})$/.test(f);break;case"VE":f=a.trim(f),i=/^0(?:2(?:12|4[0-9]|5[1-9]|6[0-9]|7[0-8]|8[1-35-8]|9[1-5]|3[45789])|4(?:1[246]|2[46]))\d{7}$/.test(f);break;case"US":default:i=/^(?:(1\-?)|(\+1 ?))?\(?\d{3}\)?[\-\.\s]?\d{3}[\-\.\s]?\d{4}$/.test(f)}return{valid:i,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].phone.country,FormValidation.I18n[g].phone.countries[h])}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{promise:{"default":"Please enter a valid value"}}}),FormValidation.Validator.promise={priority:999,html5Attributes:{message:"message",promise:"promise"},validate:function(b,c,d,e){var f=b.getFieldValue(c,e),g=new a.Deferred,h=FormValidation.Helper.call(d.promise,[f,b,c]);return h.done(function(a){g.resolve(c,e,a)}).fail(function(a){a=a||{},a.valid=!1,g.resolve(c,e,a)}),g}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{regexp:{"default":"Please enter a value matching the pattern"}}}),FormValidation.Validator.regexp={html5Attributes:{message:"message",flags:"flags",regexp:"regexp"},enableByHtml5:function(a){var b=a.attr("pattern");return b?{regexp:b}:!1},validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;var f="string"==typeof c.regexp?c.flags?new RegExp(c.regexp,c.flags):new RegExp(c.regexp):c.regexp;return f.test(e)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{remote:{"default":"Please enter a valid value"}}}),FormValidation.Validator.remote={priority:1e3,html5Attributes:{async:"async",crossdomain:"crossDomain",data:"data",datatype:"dataType",delay:"delay",message:"message",name:"name",type:"type",url:"url",validkey:"validKey"},destroy:function(a,b,c,d){var e=a.getNamespace(),f=b.data(e+"."+d+".timer");f&&(clearTimeout(f),b.removeData(e+"."+d+".timer"))},validate:function(b,c,d,e){function f(){var b=a.ajax(n);return b.success(function(a){a.valid=a[m]===!0||"true"===a[m]?!0:a[m]===!1||"false"===a[m]?!1:null,i.resolve(c,e,a)}).error(function(a){i.resolve(c,e,{valid:!1})}),i.fail(function(){b.abort()}),i}var g=b.getNamespace(),h=b.getFieldValue(c,e),i=new a.Deferred;if(""===h)return i.resolve(c,e,{valid:!0}),i;var j=c.attr("data-"+g+"-field"),k=d.data||{},l=d.url,m=d.validKey||"valid";"function"==typeof k&&(k=k.call(this,b,c,h)),"string"==typeof k&&(k=JSON.parse(k)),"function"==typeof l&&(l=l.call(this,b,c,h)),k[d.name||j]=h;var n={async:null===d.async||d.async===!0||"true"===d.async,data:k,dataType:d.dataType||"json",headers:d.headers||{},type:d.type||"GET",url:l};return null!==d.crossDomain&&(n.crossDomain=d.crossDomain===!0||"true"===d.crossDomain),d.delay?(c.data(g+"."+e+".timer")&&clearTimeout(c.data(g+"."+e+".timer")),c.data(g+"."+e+".timer",setTimeout(f,d.delay)),i):f()}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{rtn:{"default":"Please enter a valid RTN number"}}}),FormValidation.Validator.rtn={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;if(!/^\d{9}$/.test(e))return!1;for(var f=0,g=0;g<e.length;g+=3)f+=3*parseInt(e.charAt(g),10)+7*parseInt(e.charAt(g+1),10)+parseInt(e.charAt(g+2),10);return 0!==f&&f%10===0}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{sedol:{"default":"Please enter a valid SEDOL number"}}}),FormValidation.Validator.sedol={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;if(e=e.toUpperCase(),!/^[0-9A-Z]{7}$/.test(e))return!1;for(var f=0,g=[1,3,1,7,3,9,1],h=e.length,i=0;h-1>i;i++)f+=g[i]*parseInt(e.charAt(i),36);return f=(10-f%10)%10,f+""===e.charAt(h-1)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{siren:{"default":"Please enter a valid SIREN number"}}}),FormValidation.Validator.siren={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);return""===e?!0:/^\d{9}$/.test(e)?FormValidation.Helper.luhn(e):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{siret:{"default":"Please enter a valid SIRET number"}}}),FormValidation.Validator.siret={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;for(var f,g=0,h=e.length,i=0;h>i;i++)f=parseInt(e.charAt(i),10),i%2===0&&(f=2*f,f>9&&(f-=9)),g+=f;return g%10===0}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{step:{"default":"Please enter a valid step of %s"}}}),FormValidation.Validator.step={html5Attributes:{message:"message",base:"baseValue",step:"step"},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;if(d=a.extend({},{baseValue:0,step:1},d),f=parseFloat(f),!a.isNumeric(f))return!1;var g=function(a,b){var c=Math.pow(10,b);a*=c;var d=a>0|-(0>a),e=a%1===.5*d;return e?(Math.floor(a)+(d>0))/c:Math.round(a)/c},h=function(a,b){if(0===b)return 1;var c=(a+"").split("."),d=(b+"").split("."),e=(1===c.length?0:c[1].length)+(1===d.length?0:d[1].length);return g(a-b*Math.floor(a/b),e)},i=b.getLocale(),j=h(f-d.baseValue,d.step);return{valid:0===j||j===d.step,message:FormValidation.Helper.format(d.message||FormValidation.I18n[i].step["default"],[d.step])}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{stringCase:{"default":"Please enter only lowercase characters",upper:"Please enter only uppercase characters"}}}),FormValidation.Validator.stringCase={html5Attributes:{message:"message","case":"case"},validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;var f=a.getLocale(),g=(c["case"]||"lower").toLowerCase();return{valid:"upper"===g?e===e.toUpperCase():e===e.toLowerCase(),message:c.message||("upper"===g?FormValidation.I18n[f].stringCase.upper:FormValidation.I18n[f].stringCase["default"])}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{stringLength:{"default":"Please enter a value with valid length",less:"Please enter less than %s characters",more:"Please enter more than %s characters",between:"Please enter value between %s and %s characters long"}}}),FormValidation.Validator.stringLength={html5Attributes:{message:"message",min:"min",max:"max",trim:"trim",utf8bytes:"utf8Bytes"},enableByHtml5:function(b){var c={},d=b.attr("maxlength"),e=b.attr("minlength");return d&&(c.max=parseInt(d,10)),e&&(c.min=parseInt(e,10)),a.isEmptyObject(c)?!1:c},validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if((d.trim===!0||"true"===d.trim)&&(f=a.trim(f)),""===f)return!0;var g=b.getLocale(),h=a.isNumeric(d.min)?d.min:b.getDynamicOption(c,d.min),i=a.isNumeric(d.max)?d.max:b.getDynamicOption(c,d.max),j=function(a){for(var b=a.length,c=a.length-1;c>=0;c--){var d=a.charCodeAt(c);d>127&&2047>=d?b++:d>2047&&65535>=d&&(b+=2),d>=56320&&57343>=d&&c--}return b},k=d.utf8Bytes?j(f):f.length,l=!0,m=d.message||FormValidation.I18n[g].stringLength["default"];switch((h&&k<parseInt(h,10)||i&&k>parseInt(i,10))&&(l=!1),!0){case!!h&&!!i:m=FormValidation.Helper.format(d.message||FormValidation.I18n[g].stringLength.between,[parseInt(h,10),parseInt(i,10)]);break;case!!h:m=FormValidation.Helper.format(d.message||FormValidation.I18n[g].stringLength.more,parseInt(h,10)-1);break;case!!i:m=FormValidation.Helper.format(d.message||FormValidation.I18n[g].stringLength.less,parseInt(i,10)+1)}return{valid:l,message:m}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{uri:{"default":"Please enter a valid URI"}}}),FormValidation.Validator.uri={html5Attributes:{message:"message",allowlocal:"allowLocal",allowemptyprotocol:"allowEmptyProtocol",protocol:"protocol"},enableByHtml5:function(a){return"url"===a.attr("type")},validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;var f=c.allowLocal===!0||"true"===c.allowLocal,g=c.allowEmptyProtocol===!0||"true"===c.allowEmptyProtocol,h=(c.protocol||"http, https, ftp").split(",").join("|").replace(/\s/g,""),i=new RegExp("^(?:(?:"+h+")://)"+(g?"?":"")+"(?:\\S+(?::\\S*)?@)?(?:"+(f?"":"(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})")+"(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-?)*[a-z\\u00a1-\\uffff0-9])*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))"+(f?"?":"")+")(?::\\d{2,5})?(?:/[^\\s]*)?$","i");return i.test(e)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{uuid:{"default":"Please enter a valid UUID number",version:"Please enter a valid UUID version %s number"}}}),FormValidation.Validator.uuid={html5Attributes:{message:"message",version:"version"},validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;var f=a.getLocale(),g={3:/^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,4:/^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,5:/^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,all:/^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i},h=c.version?c.version+"":"all";return{valid:null===g[h]?!0:g[h].test(e),message:c.version?FormValidation.Helper.format(c.message||FormValidation.I18n[f].uuid.version,c.version):c.message||FormValidation.I18n[f].uuid["default"]}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{vat:{"default":"Please enter a valid VAT number",country:"Please enter a valid VAT number in %s",countries:{AT:"Austria",BE:"Belgium",BG:"Bulgaria",BR:"Brazil",CH:"Switzerland",CY:"Cyprus",CZ:"Czech Republic",DE:"Germany",DK:"Denmark",EE:"Estonia",ES:"Spain",FI:"Finland",FR:"France",GB:"United Kingdom",GR:"Greek",EL:"Greek",HU:"Hungary",HR:"Croatia",IE:"Ireland",IS:"Iceland",IT:"Italy",LT:"Lithuania",LU:"Luxembourg",LV:"Latvia",MT:"Malta",NL:"Netherlands",NO:"Norway",PL:"Poland",PT:"Portugal",RO:"Romania",RU:"Russia",RS:"Serbia",SE:"Sweden",SI:"Slovenia",SK:"Slovakia",VE:"Venezuela",ZA:"South Africa"}}}}),FormValidation.Validator.vat={html5Attributes:{message:"message",country:"country"},COUNTRY_CODES:["AT","BE","BG","BR","CH","CY","CZ","DE","DK","EE","EL","ES","FI","FR","GB","GR","HR","HU","IE","IS","IT","LT","LU","LV","MT","NL","NO","PL","PT","RO","RU","RS","SE","SK","SI","VE","ZA"],validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f)return!0;var g=b.getLocale(),h=d.country;if(h?("string"!=typeof h||-1===a.inArray(h.toUpperCase(),this.COUNTRY_CODES))&&(h=b.getDynamicOption(c,h)):h=f.substr(0,2),-1===a.inArray(h,this.COUNTRY_CODES))return!0;var i=["_",h.toLowerCase()].join(""),j=this[i](f);return j=j===!0||j===!1?{valid:j}:j,j.message=FormValidation.Helper.format(d.message||FormValidation.I18n[g].vat.country,FormValidation.I18n[g].vat.countries[h.toUpperCase()]),j},_at:function(a){if(/^ATU[0-9]{8}$/.test(a)&&(a=a.substr(2)),!/^U[0-9]{8}$/.test(a))return!1;a=a.substr(1);for(var b=0,c=[1,2,1,2,1,2,1],d=0,e=0;7>e;e++)d=parseInt(a.charAt(e),10)*c[e],d>9&&(d=Math.floor(d/10)+d%10),b+=d;return b=10-(b+4)%10,10===b&&(b=0),b+""===a.substr(7,1)},_be:function(a){if(/^BE[0]{0,1}[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0]{0,1}[0-9]{9}$/.test(a))return!1;if(9===a.length&&(a="0"+a),"0"===a.substr(1,1))return!1;var b=parseInt(a.substr(0,8),10)+parseInt(a.substr(8,2),10);return b%97===0},_bg:function(a){if(/^BG[0-9]{9,10}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9,10}$/.test(a))return!1;var b=0,c=0;if(9===a.length){for(c=0;8>c;c++)b+=parseInt(a.charAt(c),10)*(c+1);if(b%=11,10===b)for(b=0,c=0;8>c;c++)b+=parseInt(a.charAt(c),10)*(c+3);return b%=10,b+""===a.substr(8)}if(10===a.length){var d=function(a){var b=parseInt(a.substr(0,2),10)+1900,c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10);if(c>40?(b+=100,c-=40):c>20&&(b-=100,c-=20),!FormValidation.Helper.date(b,c,d))return!1;for(var e=0,f=[2,4,8,5,10,9,7,3,6],g=0;9>g;g++)e+=parseInt(a.charAt(g),10)*f[g];return e=e%11%10,e+""===a.substr(9,1)},e=function(a){for(var b=0,c=[21,19,17,13,11,9,7,3,1],d=0;9>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%=10,b+""===a.substr(9,1)},f=function(a){for(var b=0,c=[4,3,2,7,6,5,4,3,2],d=0;9>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=11-b%11,10===b?!1:(11===b&&(b=0),b+""===a.substr(9,1))};return d(a)||e(a)||f(a)}return!1},_br:function(a){if(""===a)return!0;var b=a.replace(/[^\d]+/g,"");if(""===b||14!==b.length)return!1;if("00000000000000"===b||"11111111111111"===b||"22222222222222"===b||"33333333333333"===b||"44444444444444"===b||"55555555555555"===b||"66666666666666"===b||"77777777777777"===b||"88888888888888"===b||"99999999999999"===b)return!1;for(var c=b.length-2,d=b.substring(0,c),e=b.substring(c),f=0,g=c-7,h=c;h>=1;h--)f+=parseInt(d.charAt(c-h),10)*g--,2>g&&(g=9);var i=2>f%11?0:11-f%11;if(i!==parseInt(e.charAt(0),10))return!1;for(c+=1,d=b.substring(0,c),f=0,g=c-7,h=c;h>=1;h--)f+=parseInt(d.charAt(c-h),10)*g--,2>g&&(g=9);return i=2>f%11?0:11-f%11,i===parseInt(e.charAt(1),10)},_ch:function(a){if(/^CHE[0-9]{9}(MWST)?$/.test(a)&&(a=a.substr(2)),!/^E[0-9]{9}(MWST)?$/.test(a))return!1;a=a.substr(1);for(var b=0,c=[5,4,3,2,7,6,5,4],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=11-b%11,10===b?!1:(11===b&&(b=0),b+""===a.substr(8,1))},_cy:function(a){if(/^CY[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(a)&&(a=a.substr(2)),!/^[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(a))return!1;if("12"===a.substr(0,2))return!1;for(var b=0,c={0:1,1:0,2:5,3:7,4:9,5:13,6:15,7:17,8:19,9:21},d=0;8>d;d++){var e=parseInt(a.charAt(d),10);d%2===0&&(e=c[e+""]),b+=e}return b="ABCDEFGHIJKLMNOPQRSTUVWXYZ"[b%26],b+""===a.substr(8,1)},_cz:function(a){if(/^CZ[0-9]{8,10}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{8,10}$/.test(a))return!1;var b=0,c=0;if(8===a.length){if(a.charAt(0)+""=="9")return!1;for(b=0,c=0;7>c;c++)b+=parseInt(a.charAt(c),10)*(8-c);return b=11-b%11,10===b&&(b=0),11===b&&(b=1),b+""===a.substr(7,1)}if(9===a.length&&a.charAt(0)+""=="6"){for(b=0,c=0;7>c;c++)b+=parseInt(a.charAt(c+1),10)*(8-c);return b=11-b%11,10===b&&(b=0),11===b&&(b=1),b=[8,7,6,5,4,3,2,1,0,9,10][b-1],b+""===a.substr(8,1)}if(9===a.length||10===a.length){var d=1900+parseInt(a.substr(0,2),10),e=parseInt(a.substr(2,2),10)%50%20,f=parseInt(a.substr(4,2),10);if(9===a.length){if(d>=1980&&(d-=100),d>1953)return!1}else 1954>d&&(d+=100);if(!FormValidation.Helper.date(d,e,f))return!1;if(10===a.length){var g=parseInt(a.substr(0,9),10)%11;return 1985>d&&(g%=10),g+""===a.substr(9,1)}return!0}return!1},_de:function(a){return/^DE[0-9]{9}$/.test(a)&&(a=a.substr(2)),/^[0-9]{9}$/.test(a)?FormValidation.Helper.mod11And10(a):!1},_dk:function(a){if(/^DK[0-9]{8}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{8}$/.test(a))return!1;for(var b=0,c=[2,7,6,5,4,3,2,1],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%11===0},_ee:function(a){if(/^EE[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}$/.test(a))return!1;for(var b=0,c=[3,7,1,3,7,1,3,7,1],d=0;9>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%10===0},_es:function(a){if(/^ES[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(a)&&(a=a.substr(2)),!/^[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(a))return!1;var b=function(a){var b=parseInt(a.substr(0,8),10);return b="TRWAGMYFPDXBNJZSQVHLCKE"[b%23],b+""===a.substr(8,1)},c=function(a){var b=["XYZ".indexOf(a.charAt(0)),a.substr(1)].join("");return b=parseInt(b,10),b="TRWAGMYFPDXBNJZSQVHLCKE"[b%23],b+""===a.substr(8,1)},d=function(a){var b,c=a.charAt(0);if(-1!=="KLM".indexOf(c))return b=parseInt(a.substr(1,8),10),b="TRWAGMYFPDXBNJZSQVHLCKE"[b%23],b+""===a.substr(8,1);if(-1!=="ABCDEFGHJNPQRSUVW".indexOf(c)){for(var d=0,e=[2,1,2,1,2,1,2],f=0,g=0;7>g;g++)f=parseInt(a.charAt(g+1),10)*e[g],f>9&&(f=Math.floor(f/10)+f%10),d+=f;return d=10-d%10,10===d&&(d=0),d+""===a.substr(8,1)||"JABCDEFGHI"[d]===a.substr(8,1)}return!1},e=a.charAt(0);return/^[0-9]$/.test(e)?{valid:b(a),type:"DNI"}:/^[XYZ]$/.test(e)?{valid:c(a),type:"NIE"}:{valid:d(a),type:"CIF"}},_fi:function(a){if(/^FI[0-9]{8}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{8}$/.test(a))return!1;for(var b=0,c=[7,9,10,5,8,4,2,1],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%11===0},_fr:function(a){if(/^FR[0-9A-Z]{2}[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9A-Z]{2}[0-9]{9}$/.test(a))return!1;if(!FormValidation.Helper.luhn(a.substr(2)))return!1;if(/^[0-9]{2}$/.test(a.substr(0,2)))return a.substr(0,2)===parseInt(a.substr(2)+"12",10)%97+"";var b,c="0123456789ABCDEFGHJKLMNPQRSTUVWXYZ";return b=/^[0-9]{1}$/.test(a.charAt(0))?24*c.indexOf(a.charAt(0))+c.indexOf(a.charAt(1))-10:34*c.indexOf(a.charAt(0))+c.indexOf(a.charAt(1))-100,(parseInt(a.substr(2),10)+1+Math.floor(b/11))%11===b%11},_gb:function(a){if((/^GB[0-9]{9}$/.test(a)||/^GB[0-9]{12}$/.test(a)||/^GBGD[0-9]{3}$/.test(a)||/^GBHA[0-9]{3}$/.test(a)||/^GB(GD|HA)8888[0-9]{5}$/.test(a))&&(a=a.substr(2)),!(/^[0-9]{9}$/.test(a)||/^[0-9]{12}$/.test(a)||/^GD[0-9]{3}$/.test(a)||/^HA[0-9]{3}$/.test(a)||/^(GD|HA)8888[0-9]{5}$/.test(a)))return!1;var b=a.length;if(5===b){var c=a.substr(0,2),d=parseInt(a.substr(2),10);return"GD"===c&&500>d||"HA"===c&&d>=500}if(11===b&&("GD8888"===a.substr(0,6)||"HA8888"===a.substr(0,6)))return"GD"===a.substr(0,2)&&parseInt(a.substr(6,3),10)>=500||"HA"===a.substr(0,2)&&parseInt(a.substr(6,3),10)<500?!1:parseInt(a.substr(6,3),10)%97===parseInt(a.substr(9,2),10);if(9===b||12===b){for(var e=0,f=[8,7,6,5,4,3,2,10,1],g=0;9>g;g++)e+=parseInt(a.charAt(g),10)*f[g];return e%=97,parseInt(a.substr(0,3),10)>=100?0===e||42===e||55===e:0===e}return!0},_gr:function(a){if(/^(GR|EL)[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}$/.test(a))return!1;8===a.length&&(a="0"+a);for(var b=0,c=[256,128,64,32,16,8,4,2],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=b%11%10,b+""===a.substr(8,1)},_el:function(a){return this._gr(a)},_hu:function(a){if(/^HU[0-9]{8}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{8}$/.test(a))return!1;for(var b=0,c=[9,7,3,1,9,7,3,1],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%10===0},_hr:function(a){return/^HR[0-9]{11}$/.test(a)&&(a=a.substr(2)),/^[0-9]{11}$/.test(a)?FormValidation.Helper.mod11And10(a):!1},_ie:function(a){if(/^IE[0-9]{1}[0-9A-Z\*\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{1}[0-9A-Z\*\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(a))return!1;var b=function(a){for(;a.length<7;)a="0"+a;for(var b="WABCDEFGHIJKLMNOPQRSTUV",c=0,d=0;7>d;d++)c+=parseInt(a.charAt(d),10)*(8-d);return c+=9*b.indexOf(a.substr(7)),b[c%23]};return/^[0-9]+$/.test(a.substr(0,7))?a.charAt(7)===b(a.substr(0,7)+a.substr(8)+""):-1!=="ABCDEFGHIJKLMNOPQRSTUVWXYZ+*".indexOf(a.charAt(1))?a.charAt(7)===b(a.substr(2,5)+a.substr(0,1)+""):!0},_is:function(a){return/^IS[0-9]{5,6}$/.test(a)&&(a=a.substr(2)),/^[0-9]{5,6}$/.test(a)},_it:function(a){if(/^IT[0-9]{11}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{11}$/.test(a))return!1;if(0===parseInt(a.substr(0,7),10))return!1;var b=parseInt(a.substr(7,3),10);return 1>b||b>201&&999!==b&&888!==b?!1:FormValidation.Helper.luhn(a)},_lt:function(a){if(/^LT([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(a)&&(a=a.substr(2)),!/^([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(a))return!1;var b,c=a.length,d=0;for(b=0;c-1>b;b++)d+=parseInt(a.charAt(b),10)*(1+b%9);var e=d%11;if(10===e)for(d=0,b=0;c-1>b;b++)d+=parseInt(a.charAt(b),10)*(1+(b+2)%9);return e=e%11%10,e+""===a.charAt(c-1)},_lu:function(a){return/^LU[0-9]{8}$/.test(a)&&(a=a.substr(2)),/^[0-9]{8}$/.test(a)?parseInt(a.substr(0,6),10)%89+""===a.substr(6,2):!1},_lv:function(a){if(/^LV[0-9]{11}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{11}$/.test(a))return!1;var b,c=parseInt(a.charAt(0),10),d=0,e=[],f=a.length;if(c>3){for(d=0,e=[9,1,4,8,3,10,2,5,7,6,1],b=0;f>b;b++)d+=parseInt(a.charAt(b),10)*e[b];return d%=11,3===d}var g=parseInt(a.substr(0,2),10),h=parseInt(a.substr(2,2),10),i=parseInt(a.substr(4,2),10);if(i=i+1800+100*parseInt(a.charAt(6),10),!FormValidation.Helper.date(i,h,g))return!1;for(d=0,e=[10,5,8,4,2,1,6,3,7,9],b=0;f-1>b;b++)d+=parseInt(a.charAt(b),10)*e[b];return d=(d+1)%11%10,d+""===a.charAt(f-1)},_mt:function(a){if(/^MT[0-9]{8}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{8}$/.test(a))return!1;for(var b=0,c=[3,4,6,7,8,9,10,1],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%37===0},_nl:function(a){if(/^NL[0-9]{9}B[0-9]{2}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}B[0-9]{2}$/.test(a))return!1;for(var b=0,c=[9,8,7,6,5,4,3,2],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%=11,b>9&&(b=0),b+""===a.substr(8,1)},_no:function(a){if(/^NO[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}$/.test(a))return!1;for(var b=0,c=[3,2,7,6,5,4,3,2],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=11-b%11,11===b&&(b=0),b+""===a.substr(8,1)},_pl:function(a){if(/^PL[0-9]{10}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{10}$/.test(a))return!1;for(var b=0,c=[6,5,7,2,3,4,5,6,7,-1],d=0;10>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%11===0},_pt:function(a){if(/^PT[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}$/.test(a))return!1;for(var b=0,c=[9,8,7,6,5,4,3,2],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=11-b%11,b>9&&(b=0),b+""===a.substr(8,1)},_ro:function(a){if(/^RO[1-9][0-9]{1,9}$/.test(a)&&(a=a.substr(2)),!/^[1-9][0-9]{1,9}$/.test(a))return!1;for(var b=a.length,c=[7,5,3,2,1,7,5,3,2].slice(10-b),d=0,e=0;b-1>e;e++)d+=parseInt(a.charAt(e),10)*c[e];return d=10*d%11%10,d+""===a.substr(b-1,1)},_ru:function(a){if(/^RU([0-9]{10}|[0-9]{12})$/.test(a)&&(a=a.substr(2)),!/^([0-9]{10}|[0-9]{12})$/.test(a))return!1;var b=0;if(10===a.length){var c=0,d=[2,4,10,3,5,9,4,6,8,0];for(b=0;10>b;b++)c+=parseInt(a.charAt(b),10)*d[b];return c%=11,c>9&&(c%=10),c+""===a.substr(9,1)}if(12===a.length){var e=0,f=[7,2,4,10,3,5,9,4,6,8,0],g=0,h=[3,7,2,4,10,3,5,9,4,6,8,0];for(b=0;11>b;b++)e+=parseInt(a.charAt(b),10)*f[b],g+=parseInt(a.charAt(b),10)*h[b];return e%=11,e>9&&(e%=10),g%=11,g>9&&(g%=10),e+""===a.substr(10,1)&&g+""===a.substr(11,1)}return!1},_rs:function(a){if(/^RS[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}$/.test(a))return!1;for(var b=10,c=0,d=0;8>d;d++)c=(parseInt(a.charAt(d),10)+b)%10,0===c&&(c=10),b=2*c%11;return(b+parseInt(a.substr(8,1),10))%10===1},_se:function(a){return/^SE[0-9]{10}01$/.test(a)&&(a=a.substr(2)),/^[0-9]{10}01$/.test(a)?(a=a.substr(0,10),FormValidation.Helper.luhn(a)):!1},_si:function(a){var b=a.match(/^(SI)?([1-9][0-9]{7})$/);if(!b)return!1;b[1]&&(a=a.substr(2));for(var c=0,d=[8,7,6,5,4,3,2],e=0;7>e;e++)c+=parseInt(a.charAt(e),10)*d[e];return c=11-c%11,10===c&&(c=0),c+""===a.substr(7,1)},_sk:function(a){return/^SK[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(a)&&(a=a.substr(2)),/^[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(a)?parseInt(a,10)%11===0:!1},_ve:function(a){if(/^VE[VEJPG][0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[VEJPG][0-9]{9}$/.test(a))return!1;for(var b={V:4,E:8,J:12,P:16,G:20},c=b[a.charAt(0)],d=[3,2,7,6,5,4,3,2],e=0;8>e;e++)c+=parseInt(a.charAt(e+1),10)*d[e];return c=11-c%11,(11===c||10===c)&&(c=0),c+""===a.substr(9,1)},_za:function(a){return/^ZA4[0-9]{9}$/.test(a)&&(a=a.substr(2)),/^4[0-9]{9}$/.test(a)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{vin:{"default":"Please enter a valid VIN number"}}}),FormValidation.Validator.vin={validate:function(a,b,c,d){var e=a.getFieldValue(b,d);if(""===e)return!0;if(!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/i.test(e))return!1;e=e.toUpperCase();for(var f={A:1,B:2,C:3,D:4,E:5,F:6,G:7,H:8,J:1,K:2,L:3,M:4,N:5,P:7,R:9,S:2,T:3,U:4,V:5,W:6,X:7,Y:8,Z:9,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,0:0},g=[8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2],h=0,i=e.length,j=0;i>j;j++)h+=f[e.charAt(j)+""]*g[j];var k=h%11;return 10===k&&(k="X"),k+""===e.charAt(8)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{zipCode:{"default":"Please enter a valid postal code",country:"Please enter a valid postal code in %s",countries:{AT:"Austria",BG:"Bulgaria",BR:"Brazil",CA:"Canada",CH:"Switzerland",CZ:"Czech Republic",DE:"Germany",DK:"Denmark",ES:"Spain",FR:"France",GB:"United Kingdom",IE:"Ireland",IN:"India",IT:"Italy",MA:"Morocco",NL:"Netherlands",PL:"Poland",PT:"Portugal",RO:"Romania",RU:"Russia",SE:"Sweden",SG:"Singapore",SK:"Slovakia",US:"USA"}}}}),FormValidation.Validator.zipCode={html5Attributes:{message:"message",country:"country"},COUNTRY_CODES:["AT","BG","BR","CA","CH","CZ","DE","DK","ES","FR","GB","IE","IN","IT","MA","NL","PL","PT","RO","RU","SE","SG","SK","US"],validate:function(b,c,d,e){var f=b.getFieldValue(c,e);if(""===f||!d.country)return!0;var g=b.getLocale(),h=d.country;if(("string"!=typeof h||-1===a.inArray(h,this.COUNTRY_CODES))&&(h=b.getDynamicOption(c,h)),!h||-1===a.inArray(h.toUpperCase(),this.COUNTRY_CODES))return!0;var i=!1;switch(h=h.toUpperCase()){case"AT":i=/^([1-9]{1})(\d{3})$/.test(f);break;case"BG":i=/^([1-9]{1}[0-9]{3})$/.test(a.trim(f));break;case"BR":i=/^(\d{2})([\.]?)(\d{3})([\-]?)(\d{3})$/.test(f);break;case"CA":i=/^(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}\s?[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}[0-9]{1}$/i.test(f);break;case"CH":i=/^([1-9]{1})(\d{3})$/.test(f);break;case"CZ":i=/^(\d{3})([ ]?)(\d{2})$/.test(f);break;case"DE":i=/^(?!01000|99999)(0[1-9]\d{3}|[1-9]\d{4})$/.test(f);break;case"DK":i=/^(DK(-|\s)?)?\d{4}$/i.test(f);break;case"ES":i=/^(?:0[1-9]|[1-4][0-9]|5[0-2])\d{3}$/.test(f);break;case"FR":i=/^[0-9]{5}$/i.test(f);break;case"GB":i=this._gb(f);break;case"IN":i=/^\d{3}\s?\d{3}$/.test(f);break;case"IE":i=/^(D6W|[ACDEFHKNPRTVWXY]\d{2})\s[0-9ACDEFHKNPRTVWXY]{4}$/.test(f);break;case"IT":i=/^(I-|IT-)?\d{5}$/i.test(f);break;case"MA":i=/^[1-9][0-9]{4}$/i.test(f);break;case"NL":i=/^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i.test(f);break;case"PL":i=/^[0-9]{2}\-[0-9]{3}$/.test(f);break;case"PT":i=/^[1-9]\d{3}-\d{3}$/.test(f);break;case"RO":i=/^(0[1-8]{1}|[1-9]{1}[0-5]{1})?[0-9]{4}$/i.test(f);break;case"RU":i=/^[0-9]{6}$/i.test(f);break;case"SE":i=/^(S-)?\d{3}\s?\d{2}$/i.test(f);break;case"SG":i=/^([0][1-9]|[1-6][0-9]|[7]([0-3]|[5-9])|[8][0-2])(\d{4})$/i.test(f);break;case"SK":i=/^(\d{3})([ ]?)(\d{2})$/.test(f);break;case"US":default:i=/^\d{4,5}([\-]?\d{4})?$/.test(f)}return{valid:i,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].zipCode.country,FormValidation.I18n[g].zipCode.countries[h])}},_gb:function(a){for(var b="[ABCDEFGHIJKLMNOPRSTUWYZ]",c="[ABCDEFGHKLMNOPQRSTUVWXY]",d="[ABCDEFGHJKPMNRSTUVWXY]",e="[ABEHMNPRVWXY]",f="[ABDEFGHJLNPQRSTUWXYZ]",g=[new RegExp("^("+b+"{1}"+c+"?[0-9]{1,2})(\\s*)([0-9]{1}"+f+"{2})$","i"),new RegExp("^("+b+"{1}[0-9]{1}"+d+"{1})(\\s*)([0-9]{1}"+f+"{2})$","i"),new RegExp("^("+b+"{1}"+c+"{1}?[0-9]{1}"+e+"{1})(\\s*)([0-9]{1}"+f+"{2})$","i"),new RegExp("^(BF1)(\\s*)([0-6]{1}[ABDEFGHJLNPQRST]{1}[ABDEFGHJLNPQRSTUWZYZ]{1})$","i"),/^(GIR)(\s*)(0AA)$/i,/^(BFPO)(\s*)([0-9]{1,4})$/i,/^(BFPO)(\s*)(c\/o\s*[0-9]{1,3})$/i,/^([A-Z]{4})(\s*)(1ZZ)$/i,/^(AI-2640)$/i],h=0;h<g.length;h++)if(g[h].test(a))return!0;return!1}}}(jQuery);
/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.8.1, built on 2016-07-29 1:10:56 AM
 * @author      https://twitter.com/formvalidation
 * @copyright   (c) 2013 - 2016 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */

!function(a){FormValidation.Framework.Bootstrap=function(b,c,d){c=a.extend(!0,{button:{selector:'[type="submit"]:not([formnovalidate])',disabled:"disabled"},err:{clazz:"help-block",parent:"^(.*)col-(xs|sm|md|lg)-(offset-){0,1}[0-9]+(.*)$"},icon:{valid:null,invalid:null,validating:null,feedback:"form-control-feedback"},row:{selector:".form-group",valid:"has-success",invalid:"has-error",feedback:"has-feedback"}},c),FormValidation.Base.apply(this,[b,c,d])},FormValidation.Framework.Bootstrap.prototype=a.extend({},FormValidation.Base.prototype,{_fixIcon:function(a,b){var c=this._namespace,d=a.attr("type"),e=a.attr("data-"+c+"-field"),f=this.options.fields[e].row||this.options.row.selector,g=a.closest(f);if("checkbox"===d||"radio"===d){var h=a.parent();h.hasClass(d)?b.insertAfter(h):h.parent().hasClass(d)&&b.insertAfter(h.parent())}0!==g.find(".input-group").length&&b.addClass("fv-bootstrap-icon-input-group").insertAfter(g.find(".input-group").eq(0))},_createTooltip:function(a,b,c){var d=this._namespace,e=a.data(d+".icon");if(e)switch(c){case"popover":e.css({cursor:"pointer","pointer-events":"auto"}).popover("destroy").popover({container:"body",content:b,html:!0,placement:"auto top",trigger:"hover click"});break;case"tooltip":default:e.css({cursor:"pointer","pointer-events":"auto"}).tooltip("destroy").tooltip({container:"body",html:!0,placement:"auto top",title:b})}},_destroyTooltip:function(a,b){var c=this._namespace,d=a.data(c+".icon");if(d)switch(b){case"popover":d.css({cursor:"","pointer-events":"none"}).popover("destroy");break;case"tooltip":default:d.css({cursor:"","pointer-events":"none"}).tooltip("destroy")}},_hideTooltip:function(a,b){var c=this._namespace,d=a.data(c+".icon");if(d)switch(b){case"popover":d.popover("hide");break;case"tooltip":default:d.tooltip("hide")}},_showTooltip:function(a,b){var c=this._namespace,d=a.data(c+".icon");if(d)switch(b){case"popover":d.popover("show");break;case"tooltip":default:d.tooltip("show")}}}),a.fn.bootstrapValidator=function(b){var c=arguments;return this.each(function(){var d=a(this),e=d.data("formValidation")||d.data("bootstrapValidator"),f="object"==typeof b&&b;e||(e=new FormValidation.Framework.Bootstrap(this,a.extend({},{events:{formInit:"init.form.bv",formPreValidate:"prevalidate.form.bv",formError:"error.form.bv",formSuccess:"success.form.bv",fieldAdded:"added.field.bv",fieldRemoved:"removed.field.bv",fieldInit:"init.field.bv",fieldError:"error.field.bv",fieldSuccess:"success.field.bv",fieldStatus:"status.field.bv",localeChanged:"changed.locale.bv",validatorError:"error.validator.bv",validatorSuccess:"success.validator.bv"}},f),"bv"),d.addClass("fv-form-bootstrap").data("formValidation",e).data("bootstrapValidator",e)),"string"==typeof b&&e[b].apply(e,Array.prototype.slice.call(c,1))})},a.fn.bootstrapValidator.Constructor=FormValidation.Framework.Bootstrap}(jQuery);
/*! jQuery v3.2.1 | (c) JS Foundation and other contributors | jquery.org/license */

!function(a,b){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){"use strict";var c=[],d=a.document,e=Object.getPrototypeOf,f=c.slice,g=c.concat,h=c.push,i=c.indexOf,j={},k=j.toString,l=j.hasOwnProperty,m=l.toString,n=m.call(Object),o={};function p(a,b){b=b||d;var c=b.createElement("script");c.text=a,b.head.appendChild(c).parentNode.removeChild(c)}var q="3.2.1",r=function(a,b){return new r.fn.init(a,b)},s=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,t=/^-ms-/,u=/-([a-z])/g,v=function(a,b){return b.toUpperCase()};r.fn=r.prototype={jquery:q,constructor:r,length:0,toArray:function(){return f.call(this)},get:function(a){return null==a?f.call(this):a<0?this[a+this.length]:this[a]},pushStack:function(a){var b=r.merge(this.constructor(),a);return b.prevObject=this,b},each:function(a){return r.each(this,a)},map:function(a){return this.pushStack(r.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(f.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(a<0?b:0);return this.pushStack(c>=0&&c<b?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:c.sort,splice:c.splice},r.extend=r.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||r.isFunction(g)||(g={}),h===i&&(g=this,h--);h<i;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(r.isPlainObject(d)||(e=Array.isArray(d)))?(e?(e=!1,f=c&&Array.isArray(c)?c:[]):f=c&&r.isPlainObject(c)?c:{},g[b]=r.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},r.extend({expando:"jQuery"+(q+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===r.type(a)},isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=r.type(a);return("number"===b||"string"===b)&&!isNaN(a-parseFloat(a))},isPlainObject:function(a){var b,c;return!(!a||"[object Object]"!==k.call(a))&&(!(b=e(a))||(c=l.call(b,"constructor")&&b.constructor,"function"==typeof c&&m.call(c)===n))},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?j[k.call(a)]||"object":typeof a},globalEval:function(a){p(a)},camelCase:function(a){return a.replace(t,"ms-").replace(u,v)},each:function(a,b){var c,d=0;if(w(a)){for(c=a.length;d<c;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(s,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(w(Object(a))?r.merge(c,"string"==typeof a?[a]:a):h.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:i.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;d<c;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;f<g;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,f=0,h=[];if(w(a))for(d=a.length;f<d;f++)e=b(a[f],f,c),null!=e&&h.push(e);else for(f in a)e=b(a[f],f,c),null!=e&&h.push(e);return g.apply([],h)},guid:1,proxy:function(a,b){var c,d,e;if("string"==typeof b&&(c=a[b],b=a,a=c),r.isFunction(a))return d=f.call(arguments,2),e=function(){return a.apply(b||this,d.concat(f.call(arguments)))},e.guid=a.guid=a.guid||r.guid++,e},now:Date.now,support:o}),"function"==typeof Symbol&&(r.fn[Symbol.iterator]=c[Symbol.iterator]),r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){j["[object "+b+"]"]=b.toLowerCase()});function w(a){var b=!!a&&"length"in a&&a.length,c=r.type(a);return"function"!==c&&!r.isWindow(a)&&("array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a)}var x=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=function(a,b){for(var c=0,d=a.length;c<d;c++)if(a[c]===b)return c;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+K+"*("+L+")(?:"+K+"*([*^$|!~]?=)"+K+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+L+"))|)"+K+"*\\]",N=":("+L+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",O=new RegExp(K+"+","g"),P=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),T=new RegExp(N),U=new RegExp("^"+L+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,_=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),aa=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:d<0?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ba=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ca=function(a,b){return b?"\0"===a?"\ufffd":a.slice(0,-1)+"\\"+a.charCodeAt(a.length-1).toString(16)+" ":"\\"+a},da=function(){m()},ea=ta(function(a){return a.disabled===!0&&("form"in a||"label"in a)},{dir:"parentNode",next:"legend"});try{G.apply(D=H.call(v.childNodes),v.childNodes),D[v.childNodes.length].nodeType}catch(fa){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s=b&&b.ownerDocument,w=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==w&&9!==w&&11!==w)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==w&&(l=Z.exec(a)))if(f=l[1]){if(9===w){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(s&&(j=s.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(l[2])return G.apply(d,b.getElementsByTagName(a)),d;if((f=l[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==w)s=b,r=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(ba,ca):b.setAttribute("id",k=u),o=g(a),h=o.length;while(h--)o[h]="#"+k+" "+sa(o[h]);r=o.join(","),s=$.test(a)&&qa(b.parentNode)||b}if(r)try{return G.apply(d,s.querySelectorAll(r)),d}catch(x){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(P,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("fieldset");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&a.sourceIndex-b.sourceIndex;if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return function(b){return"form"in b?b.parentNode&&b.disabled===!1?"label"in b?"label"in b.parentNode?b.parentNode.disabled===a:b.disabled===a:b.isDisabled===a||b.isDisabled!==!a&&ea(b)===a:b.disabled===a:"label"in b&&b.disabled===a}}function pa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function qa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return!!b&&"HTML"!==b.nodeName},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),v!==n&&(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(n.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){return a.getAttribute("id")===b}},d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}}):(d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}},d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c,d,e,f=b.getElementById(a);if(f){if(c=f.getAttributeNode("id"),c&&c.value===a)return[f];e=b.getElementsByName(a),d=0;while(f=e[d++])if(c=f.getAttributeNode("id"),c&&c.value===a)return[f]}return[]}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){if("undefined"!=typeof b.getElementsByClassName&&p)return b.getElementsByClassName(a)},r=[],q=[],(c.qsa=Y.test(n.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+K+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+K+"*(?:value|"+J+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){a.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+K+"*[*^$|!~]?="),2!==a.querySelectorAll(":enabled").length&&q.push(":enabled",":disabled"),o.appendChild(a).disabled=!0,2!==a.querySelectorAll(":disabled").length&&q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Y.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"*"),s.call(a,"[s!='']:x"),r.push("!=",N)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Y.test(o.compareDocumentPosition),t=b||Y.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?I(k,a)-I(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?I(k,a)-I(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?la(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(S,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.escape=function(a){return(a+"").replace(ba,ca)},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(_,aa),a[3]=(a[3]||a[4]||a[5]||"").replace(_,aa),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return V.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&T.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(_,aa).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:!b||(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(O," ")+" ").indexOf(c)>-1:"|="===b&&(e===c||e.slice(0,c.length+1)===c+"-"))}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(P,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(_,aa),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return U.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(_,aa).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:oa(!1),disabled:oa(!0),checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return X.test(a.nodeName)},input:function(a){return W.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:pa(function(){return[0]}),last:pa(function(a,b){return[b-1]}),eq:pa(function(a,b,c){return[c<0?c+b:c]}),even:pa(function(a,b){for(var c=0;c<b;c+=2)a.push(c);return a}),odd:pa(function(a,b){for(var c=1;c<b;c+=2)a.push(c);return a}),lt:pa(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:pa(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function ra(){}ra.prototype=d.filters=d.pseudos,d.setFilters=new ra,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=Q.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P," ")}),h=h.slice(c.length));for(g in d.filter)!(e=V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function sa(a){for(var b=0,c=a.length,d="";b<c;b++)d+=a[b].value;return d}function ta(a,b,c){var d=b.dir,e=b.next,f=e||d,g=c&&"parentNode"===f,h=x++;return b.first?function(b,c,e){while(b=b[d])if(1===b.nodeType||g)return a(b,c,e);return!1}:function(b,c,i){var j,k,l,m=[w,h];if(i){while(b=b[d])if((1===b.nodeType||g)&&a(b,c,i))return!0}else while(b=b[d])if(1===b.nodeType||g)if(l=b[u]||(b[u]={}),k=l[b.uniqueID]||(l[b.uniqueID]={}),e&&e===b.nodeName.toLowerCase())b=b[d]||b;else{if((j=k[f])&&j[0]===w&&j[1]===h)return m[2]=j[2];if(k[f]=m,m[2]=a(b,c,i))return!0}return!1}}function ua(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function va(a,b,c){for(var d=0,e=b.length;d<e;d++)ga(a,b[d],c);return c}function wa(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;h<i;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function xa(a,b,c,d,e,f){return d&&!d[u]&&(d=xa(d)),e&&!e[u]&&(e=xa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||va(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:wa(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=wa(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=wa(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ya(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ta(function(a){return a===b},h,!0),l=ta(function(a){return I(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];i<f;i++)if(c=d.relative[a[i].type])m=[ta(ua(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;e<f;e++)if(d.relative[a[e].type])break;return xa(i>1&&ua(m),i>1&&sa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(P,"$1"),c,i<e&&ya(a.slice(i,e)),e<f&&ya(a=a.slice(e)),e<f&&sa(a))}m.push(c)}return ua(m)}function za(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=E.call(i));u=wa(u)}G.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&ga.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=ya(b[c]),f[u]?d.push(f):e.push(f);f=A(a,za(e,d)),f.selector=a}return f},i=ga.select=function(a,b,c,e){var f,i,j,k,l,m="function"==typeof a&&a,n=!e&&g(a=m.selector||a);if(c=c||[],1===n.length){if(i=n[0]=n[0].slice(0),i.length>2&&"ID"===(j=i[0]).type&&9===b.nodeType&&p&&d.relative[i[1].type]){if(b=(d.find.ID(j.matches[0].replace(_,aa),b)||[])[0],!b)return c;m&&(b=b.parentNode),a=a.slice(i.shift().value.length)}f=V.needsContext.test(a)?0:i.length;while(f--){if(j=i[f],d.relative[k=j.type])break;if((l=d.find[k])&&(e=l(j.matches[0].replace(_,aa),$.test(i[0].type)&&qa(b.parentNode)||b))){if(i.splice(f,1),a=e.length&&sa(i),!a)return G.apply(c,e),c;break}}}return(m||h(a,n))(e,b,!p,c,!b||$.test(a)&&qa(b.parentNode)||b),c},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("fieldset"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){if(!c)return a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){if(!c&&"input"===a.nodeName.toLowerCase())return a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(J,function(a,b,c){var d;if(!c)return a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);r.find=x,r.expr=x.selectors,r.expr[":"]=r.expr.pseudos,r.uniqueSort=r.unique=x.uniqueSort,r.text=x.getText,r.isXMLDoc=x.isXML,r.contains=x.contains,r.escapeSelector=x.escape;var y=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&r(a).is(c))break;d.push(a)}return d},z=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},A=r.expr.match.needsContext;function B(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()}var C=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,D=/^.[^:#\[\.,]*$/;function E(a,b,c){return r.isFunction(b)?r.grep(a,function(a,d){return!!b.call(a,d,a)!==c}):b.nodeType?r.grep(a,function(a){return a===b!==c}):"string"!=typeof b?r.grep(a,function(a){return i.call(b,a)>-1!==c}):D.test(b)?r.filter(b,a,c):(b=r.filter(b,a),r.grep(a,function(a){return i.call(b,a)>-1!==c&&1===a.nodeType}))}r.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?r.find.matchesSelector(d,a)?[d]:[]:r.find.matches(a,r.grep(b,function(a){return 1===a.nodeType}))},r.fn.extend({find:function(a){var b,c,d=this.length,e=this;if("string"!=typeof a)return this.pushStack(r(a).filter(function(){for(b=0;b<d;b++)if(r.contains(e[b],this))return!0}));for(c=this.pushStack([]),b=0;b<d;b++)r.find(a,e[b],c);return d>1?r.uniqueSort(c):c},filter:function(a){return this.pushStack(E(this,a||[],!1))},not:function(a){return this.pushStack(E(this,a||[],!0))},is:function(a){return!!E(this,"string"==typeof a&&A.test(a)?r(a):a||[],!1).length}});var F,G=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,H=r.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||F,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:G.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof r?b[0]:b,r.merge(this,r.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),C.test(e[1])&&r.isPlainObject(b))for(e in b)r.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&(this[0]=f,this.length=1),this}return a.nodeType?(this[0]=a,this.length=1,this):r.isFunction(a)?void 0!==c.ready?c.ready(a):a(r):r.makeArray(a,this)};H.prototype=r.fn,F=r(d);var I=/^(?:parents|prev(?:Until|All))/,J={children:!0,contents:!0,next:!0,prev:!0};r.fn.extend({has:function(a){var b=r(a,this),c=b.length;return this.filter(function(){for(var a=0;a<c;a++)if(r.contains(this,b[a]))return!0})},closest:function(a,b){var c,d=0,e=this.length,f=[],g="string"!=typeof a&&r(a);if(!A.test(a))for(;d<e;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&r.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?r.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?i.call(r(a),this[0]):i.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(r.uniqueSort(r.merge(this.get(),r(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function K(a,b){while((a=a[b])&&1!==a.nodeType);return a}r.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return y(a,"parentNode")},parentsUntil:function(a,b,c){return y(a,"parentNode",c)},next:function(a){return K(a,"nextSibling")},prev:function(a){return K(a,"previousSibling")},nextAll:function(a){return y(a,"nextSibling")},prevAll:function(a){return y(a,"previousSibling")},nextUntil:function(a,b,c){return y(a,"nextSibling",c)},prevUntil:function(a,b,c){return y(a,"previousSibling",c)},siblings:function(a){return z((a.parentNode||{}).firstChild,a)},children:function(a){return z(a.firstChild)},contents:function(a){return B(a,"iframe")?a.contentDocument:(B(a,"template")&&(a=a.content||a),r.merge([],a.childNodes))}},function(a,b){r.fn[a]=function(c,d){var e=r.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=r.filter(d,e)),this.length>1&&(J[a]||r.uniqueSort(e),I.test(a)&&e.reverse()),this.pushStack(e)}});var L=/[^\x20\t\r\n\f]+/g;function M(a){var b={};return r.each(a.match(L)||[],function(a,c){b[c]=!0}),b}r.Callbacks=function(a){a="string"==typeof a?M(a):r.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=e||a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){r.each(b,function(b,c){r.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==r.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return r.each(arguments,function(a,b){var c;while((c=r.inArray(b,f,c))>-1)f.splice(c,1),c<=h&&h--}),this},has:function(a){return a?r.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||b||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j};function N(a){return a}function O(a){throw a}function P(a,b,c,d){var e;try{a&&r.isFunction(e=a.promise)?e.call(a).done(b).fail(c):a&&r.isFunction(e=a.then)?e.call(a,b,c):b.apply(void 0,[a].slice(d))}catch(a){c.apply(void 0,[a])}}r.extend({Deferred:function(b){var c=[["notify","progress",r.Callbacks("memory"),r.Callbacks("memory"),2],["resolve","done",r.Callbacks("once memory"),r.Callbacks("once memory"),0,"resolved"],["reject","fail",r.Callbacks("once memory"),r.Callbacks("once memory"),1,"rejected"]],d="pending",e={state:function(){return d},always:function(){return f.done(arguments).fail(arguments),this},"catch":function(a){return e.then(null,a)},pipe:function(){var a=arguments;return r.Deferred(function(b){r.each(c,function(c,d){var e=r.isFunction(a[d[4]])&&a[d[4]];f[d[1]](function(){var a=e&&e.apply(this,arguments);a&&r.isFunction(a.promise)?a.promise().progress(b.notify).done(b.resolve).fail(b.reject):b[d[0]+"With"](this,e?[a]:arguments)})}),a=null}).promise()},then:function(b,d,e){var f=0;function g(b,c,d,e){return function(){var h=this,i=arguments,j=function(){var a,j;if(!(b<f)){if(a=d.apply(h,i),a===c.promise())throw new TypeError("Thenable self-resolution");j=a&&("object"==typeof a||"function"==typeof a)&&a.then,r.isFunction(j)?e?j.call(a,g(f,c,N,e),g(f,c,O,e)):(f++,j.call(a,g(f,c,N,e),g(f,c,O,e),g(f,c,N,c.notifyWith))):(d!==N&&(h=void 0,i=[a]),(e||c.resolveWith)(h,i))}},k=e?j:function(){try{j()}catch(a){r.Deferred.exceptionHook&&r.Deferred.exceptionHook(a,k.stackTrace),b+1>=f&&(d!==O&&(h=void 0,i=[a]),c.rejectWith(h,i))}};b?k():(r.Deferred.getStackHook&&(k.stackTrace=r.Deferred.getStackHook()),a.setTimeout(k))}}return r.Deferred(function(a){c[0][3].add(g(0,a,r.isFunction(e)?e:N,a.notifyWith)),c[1][3].add(g(0,a,r.isFunction(b)?b:N)),c[2][3].add(g(0,a,r.isFunction(d)?d:O))}).promise()},promise:function(a){return null!=a?r.extend(a,e):e}},f={};return r.each(c,function(a,b){var g=b[2],h=b[5];e[b[1]]=g.add,h&&g.add(function(){d=h},c[3-a][2].disable,c[0][2].lock),g.add(b[3].fire),f[b[0]]=function(){return f[b[0]+"With"](this===f?void 0:this,arguments),this},f[b[0]+"With"]=g.fireWith}),e.promise(f),b&&b.call(f,f),f},when:function(a){var b=arguments.length,c=b,d=Array(c),e=f.call(arguments),g=r.Deferred(),h=function(a){return function(c){d[a]=this,e[a]=arguments.length>1?f.call(arguments):c,--b||g.resolveWith(d,e)}};if(b<=1&&(P(a,g.done(h(c)).resolve,g.reject,!b),"pending"===g.state()||r.isFunction(e[c]&&e[c].then)))return g.then();while(c--)P(e[c],h(c),g.reject);return g.promise()}});var Q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;r.Deferred.exceptionHook=function(b,c){a.console&&a.console.warn&&b&&Q.test(b.name)&&a.console.warn("jQuery.Deferred exception: "+b.message,b.stack,c)},r.readyException=function(b){a.setTimeout(function(){throw b})};var R=r.Deferred();r.fn.ready=function(a){return R.then(a)["catch"](function(a){r.readyException(a)}),this},r.extend({isReady:!1,readyWait:1,ready:function(a){(a===!0?--r.readyWait:r.isReady)||(r.isReady=!0,a!==!0&&--r.readyWait>0||R.resolveWith(d,[r]))}}),r.ready.then=R.then;function S(){d.removeEventListener("DOMContentLoaded",S),
a.removeEventListener("load",S),r.ready()}"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(r.ready):(d.addEventListener("DOMContentLoaded",S),a.addEventListener("load",S));var T=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===r.type(c)){e=!0;for(h in c)T(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,r.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(r(a),c)})),b))for(;h<i;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},U=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function V(){this.expando=r.expando+V.uid++}V.uid=1,V.prototype={cache:function(a){var b=a[this.expando];return b||(b={},U(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[r.camelCase(b)]=c;else for(d in b)e[r.camelCase(d)]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][r.camelCase(b)]},access:function(a,b,c){return void 0===b||b&&"string"==typeof b&&void 0===c?this.get(a,b):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d=a[this.expando];if(void 0!==d){if(void 0!==b){Array.isArray(b)?b=b.map(r.camelCase):(b=r.camelCase(b),b=b in d?[b]:b.match(L)||[]),c=b.length;while(c--)delete d[b[c]]}(void 0===b||r.isEmptyObject(d))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!r.isEmptyObject(b)}};var W=new V,X=new V,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function $(a){return"true"===a||"false"!==a&&("null"===a?null:a===+a+""?+a:Y.test(a)?JSON.parse(a):a)}function _(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Z,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c=$(c)}catch(e){}X.set(a,b,c)}else c=void 0;return c}r.extend({hasData:function(a){return X.hasData(a)||W.hasData(a)},data:function(a,b,c){return X.access(a,b,c)},removeData:function(a,b){X.remove(a,b)},_data:function(a,b,c){return W.access(a,b,c)},_removeData:function(a,b){W.remove(a,b)}}),r.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=X.get(f),1===f.nodeType&&!W.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=r.camelCase(d.slice(5)),_(f,d,e[d])));W.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){X.set(this,a)}):T(this,function(b){var c;if(f&&void 0===b){if(c=X.get(f,a),void 0!==c)return c;if(c=_(f,a),void 0!==c)return c}else this.each(function(){X.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){X.remove(this,a)})}}),r.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=W.get(a,b),c&&(!d||Array.isArray(c)?d=W.access(a,b,r.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=r.queue(a,b),d=c.length,e=c.shift(),f=r._queueHooks(a,b),g=function(){r.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return W.get(a,c)||W.access(a,c,{empty:r.Callbacks("once memory").add(function(){W.remove(a,[b+"queue",c])})})}}),r.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?r.queue(this[0],a):void 0===b?this:this.each(function(){var c=r.queue(this,a,b);r._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&r.dequeue(this,a)})},dequeue:function(a){return this.each(function(){r.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=r.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=W.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var aa=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ba=new RegExp("^(?:([+-])=|)("+aa+")([a-z%]*)$","i"),ca=["Top","Right","Bottom","Left"],da=function(a,b){return a=b||a,"none"===a.style.display||""===a.style.display&&r.contains(a.ownerDocument,a)&&"none"===r.css(a,"display")},ea=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};function fa(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return r.css(a,b,"")},i=h(),j=c&&c[3]||(r.cssNumber[b]?"":"px"),k=(r.cssNumber[b]||"px"!==j&&+i)&&ba.exec(r.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,r.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var ga={};function ha(a){var b,c=a.ownerDocument,d=a.nodeName,e=ga[d];return e?e:(b=c.body.appendChild(c.createElement(d)),e=r.css(b,"display"),b.parentNode.removeChild(b),"none"===e&&(e="block"),ga[d]=e,e)}function ia(a,b){for(var c,d,e=[],f=0,g=a.length;f<g;f++)d=a[f],d.style&&(c=d.style.display,b?("none"===c&&(e[f]=W.get(d,"display")||null,e[f]||(d.style.display="")),""===d.style.display&&da(d)&&(e[f]=ha(d))):"none"!==c&&(e[f]="none",W.set(d,"display",c)));for(f=0;f<g;f++)null!=e[f]&&(a[f].style.display=e[f]);return a}r.fn.extend({show:function(){return ia(this,!0)},hide:function(){return ia(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){da(this)?r(this).show():r(this).hide()})}});var ja=/^(?:checkbox|radio)$/i,ka=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,la=/^$|\/(?:java|ecma)script/i,ma={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ma.optgroup=ma.option,ma.tbody=ma.tfoot=ma.colgroup=ma.caption=ma.thead,ma.th=ma.td;function na(a,b){var c;return c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[],void 0===b||b&&B(a,b)?r.merge([a],c):c}function oa(a,b){for(var c=0,d=a.length;c<d;c++)W.set(a[c],"globalEval",!b||W.get(b[c],"globalEval"))}var pa=/<|&#?\w+;/;function qa(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],n=0,o=a.length;n<o;n++)if(f=a[n],f||0===f)if("object"===r.type(f))r.merge(m,f.nodeType?[f]:f);else if(pa.test(f)){g=g||l.appendChild(b.createElement("div")),h=(ka.exec(f)||["",""])[1].toLowerCase(),i=ma[h]||ma._default,g.innerHTML=i[1]+r.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;r.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",n=0;while(f=m[n++])if(d&&r.inArray(f,d)>-1)e&&e.push(f);else if(j=r.contains(f.ownerDocument,f),g=na(l.appendChild(f),"script"),j&&oa(g),c){k=0;while(f=g[k++])la.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),o.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",o.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var ra=d.documentElement,sa=/^key/,ta=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ua=/^([^.]*)(?:\.(.+)|)/;function va(){return!0}function wa(){return!1}function xa(){try{return d.activeElement}catch(a){}}function ya(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ya(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=wa;else if(!e)return a;return 1===f&&(g=e,e=function(a){return r().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=r.guid++)),a.each(function(){r.event.add(this,b,e,d,c)})}r.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=W.get(a);if(q){c.handler&&(f=c,c=f.handler,e=f.selector),e&&r.find.matchesSelector(ra,e),c.guid||(c.guid=r.guid++),(i=q.events)||(i=q.events={}),(g=q.handle)||(g=q.handle=function(b){return"undefined"!=typeof r&&r.event.triggered!==b.type?r.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(L)||[""],j=b.length;while(j--)h=ua.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n&&(l=r.event.special[n]||{},n=(e?l.delegateType:l.bindType)||n,l=r.event.special[n]||{},k=r.extend({type:n,origType:p,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&r.expr.match.needsContext.test(e),namespace:o.join(".")},f),(m=i[n])||(m=i[n]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,o,g)!==!1||a.addEventListener&&a.addEventListener(n,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),r.event.global[n]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=W.hasData(a)&&W.get(a);if(q&&(i=q.events)){b=(b||"").match(L)||[""],j=b.length;while(j--)if(h=ua.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n){l=r.event.special[n]||{},n=(d?l.delegateType:l.bindType)||n,m=i[n]||[],h=h[2]&&new RegExp("(^|\\.)"+o.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&p!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,o,q.handle)!==!1||r.removeEvent(a,n,q.handle),delete i[n])}else for(n in i)r.event.remove(a,n+b[j],c,d,!0);r.isEmptyObject(i)&&W.remove(a,"handle events")}},dispatch:function(a){var b=r.event.fix(a),c,d,e,f,g,h,i=new Array(arguments.length),j=(W.get(this,"events")||{})[b.type]||[],k=r.event.special[b.type]||{};for(i[0]=b,c=1;c<arguments.length;c++)i[c]=arguments[c];if(b.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,b)!==!1){h=r.event.handlers.call(this,b,j),c=0;while((f=h[c++])&&!b.isPropagationStopped()){b.currentTarget=f.elem,d=0;while((g=f.handlers[d++])&&!b.isImmediatePropagationStopped())b.rnamespace&&!b.rnamespace.test(g.namespace)||(b.handleObj=g,b.data=g.data,e=((r.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(b.result=e)===!1&&(b.preventDefault(),b.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,b),b.result}},handlers:function(a,b){var c,d,e,f,g,h=[],i=b.delegateCount,j=a.target;if(i&&j.nodeType&&!("click"===a.type&&a.button>=1))for(;j!==this;j=j.parentNode||this)if(1===j.nodeType&&("click"!==a.type||j.disabled!==!0)){for(f=[],g={},c=0;c<i;c++)d=b[c],e=d.selector+" ",void 0===g[e]&&(g[e]=d.needsContext?r(e,this).index(j)>-1:r.find(e,this,null,[j]).length),g[e]&&f.push(d);f.length&&h.push({elem:j,handlers:f})}return j=this,i<b.length&&h.push({elem:j,handlers:b.slice(i)}),h},addProp:function(a,b){Object.defineProperty(r.Event.prototype,a,{enumerable:!0,configurable:!0,get:r.isFunction(b)?function(){if(this.originalEvent)return b(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[a]},set:function(b){Object.defineProperty(this,a,{enumerable:!0,configurable:!0,writable:!0,value:b})}})},fix:function(a){return a[r.expando]?a:new r.Event(a)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==xa()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===xa()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&B(this,"input"))return this.click(),!1},_default:function(a){return B(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},r.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},r.Event=function(a,b){return this instanceof r.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?va:wa,this.target=a.target&&3===a.target.nodeType?a.target.parentNode:a.target,this.currentTarget=a.currentTarget,this.relatedTarget=a.relatedTarget):this.type=a,b&&r.extend(this,b),this.timeStamp=a&&a.timeStamp||r.now(),void(this[r.expando]=!0)):new r.Event(a,b)},r.Event.prototype={constructor:r.Event,isDefaultPrevented:wa,isPropagationStopped:wa,isImmediatePropagationStopped:wa,isSimulated:!1,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=va,a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=va,a&&!this.isSimulated&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=va,a&&!this.isSimulated&&a.stopImmediatePropagation(),this.stopPropagation()}},r.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(a){var b=a.button;return null==a.which&&sa.test(a.type)?null!=a.charCode?a.charCode:a.keyCode:!a.which&&void 0!==b&&ta.test(a.type)?1&b?1:2&b?3:4&b?2:0:a.which}},r.event.addProp),r.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){r.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||r.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),r.fn.extend({on:function(a,b,c,d){return ya(this,a,b,c,d)},one:function(a,b,c,d){return ya(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,r(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=wa),this.each(function(){r.event.remove(this,a,c,b)})}});var za=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Aa=/<script|<style|<link/i,Ba=/checked\s*(?:[^=]|=\s*.checked.)/i,Ca=/^true\/(.*)/,Da=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ea(a,b){return B(a,"table")&&B(11!==b.nodeType?b:b.firstChild,"tr")?r(">tbody",a)[0]||a:a}function Fa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function Ga(a){var b=Ca.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Ha(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(W.hasData(a)&&(f=W.access(a),g=W.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;c<d;c++)r.event.add(b,e,j[e][c])}X.hasData(a)&&(h=X.access(a),i=r.extend({},h),X.set(b,i))}}function Ia(a,b){var c=b.nodeName.toLowerCase();"input"===c&&ja.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function Ja(a,b,c,d){b=g.apply([],b);var e,f,h,i,j,k,l=0,m=a.length,n=m-1,q=b[0],s=r.isFunction(q);if(s||m>1&&"string"==typeof q&&!o.checkClone&&Ba.test(q))return a.each(function(e){var f=a.eq(e);s&&(b[0]=q.call(this,e,f.html())),Ja(f,b,c,d)});if(m&&(e=qa(b,a[0].ownerDocument,!1,a,d),f=e.firstChild,1===e.childNodes.length&&(e=f),f||d)){for(h=r.map(na(e,"script"),Fa),i=h.length;l<m;l++)j=e,l!==n&&(j=r.clone(j,!0,!0),i&&r.merge(h,na(j,"script"))),c.call(a[l],j,l);if(i)for(k=h[h.length-1].ownerDocument,r.map(h,Ga),l=0;l<i;l++)j=h[l],la.test(j.type||"")&&!W.access(j,"globalEval")&&r.contains(k,j)&&(j.src?r._evalUrl&&r._evalUrl(j.src):p(j.textContent.replace(Da,""),k))}return a}function Ka(a,b,c){for(var d,e=b?r.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||r.cleanData(na(d)),d.parentNode&&(c&&r.contains(d.ownerDocument,d)&&oa(na(d,"script")),d.parentNode.removeChild(d));return a}r.extend({htmlPrefilter:function(a){return a.replace(za,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=r.contains(a.ownerDocument,a);if(!(o.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||r.isXMLDoc(a)))for(g=na(h),f=na(a),d=0,e=f.length;d<e;d++)Ia(f[d],g[d]);if(b)if(c)for(f=f||na(a),g=g||na(h),d=0,e=f.length;d<e;d++)Ha(f[d],g[d]);else Ha(a,h);return g=na(h,"script"),g.length>0&&oa(g,!i&&na(a,"script")),h},cleanData:function(a){for(var b,c,d,e=r.event.special,f=0;void 0!==(c=a[f]);f++)if(U(c)){if(b=c[W.expando]){if(b.events)for(d in b.events)e[d]?r.event.remove(c,d):r.removeEvent(c,d,b.handle);c[W.expando]=void 0}c[X.expando]&&(c[X.expando]=void 0)}}}),r.fn.extend({detach:function(a){return Ka(this,a,!0)},remove:function(a){return Ka(this,a)},text:function(a){return T(this,function(a){return void 0===a?r.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return Ja(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ea(this,a);b.appendChild(a)}})},prepend:function(){return Ja(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ea(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ja(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ja(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(r.cleanData(na(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null!=a&&a,b=null==b?a:b,this.map(function(){return r.clone(this,a,b)})},html:function(a){return T(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!Aa.test(a)&&!ma[(ka.exec(a)||["",""])[1].toLowerCase()]){a=r.htmlPrefilter(a);try{for(;c<d;c++)b=this[c]||{},1===b.nodeType&&(r.cleanData(na(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ja(this,arguments,function(b){var c=this.parentNode;r.inArray(this,a)<0&&(r.cleanData(na(this)),c&&c.replaceChild(b,this))},a)}}),r.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){r.fn[a]=function(a){for(var c,d=[],e=r(a),f=e.length-1,g=0;g<=f;g++)c=g===f?this:this.clone(!0),r(e[g])[b](c),h.apply(d,c.get());return this.pushStack(d)}});var La=/^margin/,Ma=new RegExp("^("+aa+")(?!px)[a-z%]+$","i"),Na=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)};!function(){function b(){if(i){i.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",i.innerHTML="",ra.appendChild(h);var b=a.getComputedStyle(i);c="1%"!==b.top,g="2px"===b.marginLeft,e="4px"===b.width,i.style.marginRight="50%",f="4px"===b.marginRight,ra.removeChild(h),i=null}}var c,e,f,g,h=d.createElement("div"),i=d.createElement("div");i.style&&(i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",o.clearCloneStyle="content-box"===i.style.backgroundClip,h.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",h.appendChild(i),r.extend(o,{pixelPosition:function(){return b(),c},boxSizingReliable:function(){return b(),e},pixelMarginRight:function(){return b(),f},reliableMarginLeft:function(){return b(),g}}))}();function Oa(a,b,c){var d,e,f,g,h=a.style;return c=c||Na(a),c&&(g=c.getPropertyValue(b)||c[b],""!==g||r.contains(a.ownerDocument,a)||(g=r.style(a,b)),!o.pixelMarginRight()&&Ma.test(g)&&La.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function Pa(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Qa=/^(none|table(?!-c[ea]).+)/,Ra=/^--/,Sa={position:"absolute",visibility:"hidden",display:"block"},Ta={letterSpacing:"0",fontWeight:"400"},Ua=["Webkit","Moz","ms"],Va=d.createElement("div").style;function Wa(a){if(a in Va)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ua.length;while(c--)if(a=Ua[c]+b,a in Va)return a}function Xa(a){var b=r.cssProps[a];return b||(b=r.cssProps[a]=Wa(a)||a),b}function Ya(a,b,c){var d=ba.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Za(a,b,c,d,e){var f,g=0;for(f=c===(d?"border":"content")?4:"width"===b?1:0;f<4;f+=2)"margin"===c&&(g+=r.css(a,c+ca[f],!0,e)),d?("content"===c&&(g-=r.css(a,"padding"+ca[f],!0,e)),"margin"!==c&&(g-=r.css(a,"border"+ca[f]+"Width",!0,e))):(g+=r.css(a,"padding"+ca[f],!0,e),"padding"!==c&&(g+=r.css(a,"border"+ca[f]+"Width",!0,e)));return g}function $a(a,b,c){var d,e=Na(a),f=Oa(a,b,e),g="border-box"===r.css(a,"boxSizing",!1,e);return Ma.test(f)?f:(d=g&&(o.boxSizingReliable()||f===a.style[b]),"auto"===f&&(f=a["offset"+b[0].toUpperCase()+b.slice(1)]),f=parseFloat(f)||0,f+Za(a,b,c||(g?"border":"content"),d,e)+"px")}r.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Oa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=r.camelCase(b),i=Ra.test(b),j=a.style;return i||(b=Xa(h)),g=r.cssHooks[b]||r.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:j[b]:(f=typeof c,"string"===f&&(e=ba.exec(c))&&e[1]&&(c=fa(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(r.cssNumber[h]?"":"px")),o.clearCloneStyle||""!==c||0!==b.indexOf("background")||(j[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i?j.setProperty(b,c):j[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=r.camelCase(b),i=Ra.test(b);return i||(b=Xa(h)),g=r.cssHooks[b]||r.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Oa(a,b,d)),"normal"===e&&b in Ta&&(e=Ta[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),r.each(["height","width"],function(a,b){r.cssHooks[b]={get:function(a,c,d){if(c)return!Qa.test(r.css(a,"display"))||a.getClientRects().length&&a.getBoundingClientRect().width?$a(a,b,d):ea(a,Sa,function(){return $a(a,b,d)})},set:function(a,c,d){var e,f=d&&Na(a),g=d&&Za(a,b,d,"border-box"===r.css(a,"boxSizing",!1,f),f);return g&&(e=ba.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=r.css(a,b)),Ya(a,c,g)}}}),r.cssHooks.marginLeft=Pa(o.reliableMarginLeft,function(a,b){if(b)return(parseFloat(Oa(a,"marginLeft"))||a.getBoundingClientRect().left-ea(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px"}),r.each({margin:"",padding:"",border:"Width"},function(a,b){r.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];d<4;d++)e[a+ca[d]+b]=f[d]||f[d-2]||f[0];return e}},La.test(a)||(r.cssHooks[a+b].set=Ya)}),r.fn.extend({css:function(a,b){return T(this,function(a,b,c){var d,e,f={},g=0;if(Array.isArray(b)){for(d=Na(a),e=b.length;g<e;g++)f[b[g]]=r.css(a,b[g],!1,d);return f}return void 0!==c?r.style(a,b,c):r.css(a,b)},a,b,arguments.length>1)}});function _a(a,b,c,d,e){return new _a.prototype.init(a,b,c,d,e)}r.Tween=_a,_a.prototype={constructor:_a,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||r.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(r.cssNumber[c]?"":"px")},cur:function(){var a=_a.propHooks[this.prop];return a&&a.get?a.get(this):_a.propHooks._default.get(this)},run:function(a){var b,c=_a.propHooks[this.prop];return this.options.duration?this.pos=b=r.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):_a.propHooks._default.set(this),this}},_a.prototype.init.prototype=_a.prototype,_a.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=r.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){r.fx.step[a.prop]?r.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[r.cssProps[a.prop]]&&!r.cssHooks[a.prop]?a.elem[a.prop]=a.now:r.style(a.elem,a.prop,a.now+a.unit)}}},_a.propHooks.scrollTop=_a.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},r.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},r.fx=_a.prototype.init,r.fx.step={};var ab,bb,cb=/^(?:toggle|show|hide)$/,db=/queueHooks$/;function eb(){bb&&(d.hidden===!1&&a.requestAnimationFrame?a.requestAnimationFrame(eb):a.setTimeout(eb,r.fx.interval),r.fx.tick())}function fb(){return a.setTimeout(function(){ab=void 0}),ab=r.now()}function gb(a,b){var c,d=0,e={height:a};for(b=b?1:0;d<4;d+=2-b)c=ca[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function hb(a,b,c){for(var d,e=(kb.tweeners[b]||[]).concat(kb.tweeners["*"]),f=0,g=e.length;f<g;f++)if(d=e[f].call(c,b,a))return d}function ib(a,b,c){var d,e,f,g,h,i,j,k,l="width"in b||"height"in b,m=this,n={},o=a.style,p=a.nodeType&&da(a),q=W.get(a,"fxshow");c.queue||(g=r._queueHooks(a,"fx"),null==g.unqueued&&(g.unqueued=0,h=g.empty.fire,g.empty.fire=function(){g.unqueued||h()}),g.unqueued++,m.always(function(){m.always(function(){g.unqueued--,r.queue(a,"fx").length||g.empty.fire()})}));for(d in b)if(e=b[d],cb.test(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}n[d]=q&&q[d]||r.style(a,d)}if(i=!r.isEmptyObject(b),i||!r.isEmptyObject(n)){l&&1===a.nodeType&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=q&&q.display,null==j&&(j=W.get(a,"display")),k=r.css(a,"display"),"none"===k&&(j?k=j:(ia([a],!0),j=a.style.display||j,k=r.css(a,"display"),ia([a]))),("inline"===k||"inline-block"===k&&null!=j)&&"none"===r.css(a,"float")&&(i||(m.done(function(){o.display=j}),null==j&&(k=o.display,j="none"===k?"":k)),o.display="inline-block")),c.overflow&&(o.overflow="hidden",m.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]})),i=!1;for(d in n)i||(q?"hidden"in q&&(p=q.hidden):q=W.access(a,"fxshow",{display:j}),f&&(q.hidden=!p),p&&ia([a],!0),m.done(function(){p||ia([a]),W.remove(a,"fxshow");for(d in n)r.style(a,d,n[d])})),i=hb(p?q[d]:0,d,m),d in q||(q[d]=i.start,p&&(i.end=i.start,i.start=0))}}function jb(a,b){var c,d,e,f,g;for(c in a)if(d=r.camelCase(c),e=b[d],f=a[c],Array.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=r.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kb(a,b,c){var d,e,f=0,g=kb.prefilters.length,h=r.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=ab||fb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;g<i;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),f<1&&i?c:(i||h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:r.extend({},b),opts:r.extend(!0,{specialEasing:{},easing:r.easing._default},c),originalProperties:b,originalOptions:c,startTime:ab||fb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=r.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;c<d;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jb(k,j.opts.specialEasing);f<g;f++)if(d=kb.prefilters[f].call(j,a,k,j.opts))return r.isFunction(d.stop)&&(r._queueHooks(j.elem,j.opts.queue).stop=r.proxy(d.stop,d)),d;return r.map(k,hb,j),r.isFunction(j.opts.start)&&j.opts.start.call(a,j),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always),r.fx.timer(r.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j}r.Animation=r.extend(kb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return fa(c.elem,a,ba.exec(b),c),c}]},tweener:function(a,b){r.isFunction(a)?(b=a,a=["*"]):a=a.match(L);for(var c,d=0,e=a.length;d<e;d++)c=a[d],kb.tweeners[c]=kb.tweeners[c]||[],kb.tweeners[c].unshift(b)},prefilters:[ib],prefilter:function(a,b){b?kb.prefilters.unshift(a):kb.prefilters.push(a)}}),r.speed=function(a,b,c){var d=a&&"object"==typeof a?r.extend({},a):{complete:c||!c&&b||r.isFunction(a)&&a,duration:a,easing:c&&b||b&&!r.isFunction(b)&&b};return r.fx.off?d.duration=0:"number"!=typeof d.duration&&(d.duration in r.fx.speeds?d.duration=r.fx.speeds[d.duration]:d.duration=r.fx.speeds._default),null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){r.isFunction(d.old)&&d.old.call(this),d.queue&&r.dequeue(this,d.queue)},d},r.fn.extend({fadeTo:function(a,b,c,d){return this.filter(da).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=r.isEmptyObject(a),f=r.speed(b,c,d),g=function(){var b=kb(this,r.extend({},a),f);(e||W.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=r.timers,g=W.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&db.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||r.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=W.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=r.timers,g=d?d.length:0;for(c.finish=!0,r.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;b<g;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),r.each(["toggle","show","hide"],function(a,b){var c=r.fn[b];r.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gb(b,!0),a,d,e)}}),r.each({slideDown:gb("show"),slideUp:gb("hide"),slideToggle:gb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){r.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),r.timers=[],r.fx.tick=function(){var a,b=0,c=r.timers;for(ab=r.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||r.fx.stop(),ab=void 0},r.fx.timer=function(a){r.timers.push(a),r.fx.start()},r.fx.interval=13,r.fx.start=function(){bb||(bb=!0,eb())},r.fx.stop=function(){bb=null},r.fx.speeds={slow:600,fast:200,_default:400},r.fn.delay=function(b,c){return b=r.fx?r.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",o.checkOn=""!==a.value,o.optSelected=c.selected,a=d.createElement("input"),a.value="t",a.type="radio",o.radioValue="t"===a.value}();var lb,mb=r.expr.attrHandle;r.fn.extend({attr:function(a,b){return T(this,r.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){r.removeAttr(this,a)})}}),r.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?r.prop(a,b,c):(1===f&&r.isXMLDoc(a)||(e=r.attrHooks[b.toLowerCase()]||(r.expr.match.bool.test(b)?lb:void 0)),void 0!==c?null===c?void r.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=r.find.attr(a,b),
null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!o.radioValue&&"radio"===b&&B(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d=0,e=b&&b.match(L);if(e&&1===a.nodeType)while(c=e[d++])a.removeAttribute(c)}}),lb={set:function(a,b,c){return b===!1?r.removeAttr(a,c):a.setAttribute(c,c),c}},r.each(r.expr.match.bool.source.match(/\w+/g),function(a,b){var c=mb[b]||r.find.attr;mb[b]=function(a,b,d){var e,f,g=b.toLowerCase();return d||(f=mb[g],mb[g]=e,e=null!=c(a,b,d)?g:null,mb[g]=f),e}});var nb=/^(?:input|select|textarea|button)$/i,ob=/^(?:a|area)$/i;r.fn.extend({prop:function(a,b){return T(this,r.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[r.propFix[a]||a]})}}),r.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&r.isXMLDoc(a)||(b=r.propFix[b]||b,e=r.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=r.find.attr(a,"tabindex");return b?parseInt(b,10):nb.test(a.nodeName)||ob.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),o.optSelected||(r.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),r.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){r.propFix[this.toLowerCase()]=this});function pb(a){var b=a.match(L)||[];return b.join(" ")}function qb(a){return a.getAttribute&&a.getAttribute("class")||""}r.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).addClass(a.call(this,b,qb(this)))});if("string"==typeof a&&a){b=a.match(L)||[];while(c=this[i++])if(e=qb(c),d=1===c.nodeType&&" "+pb(e)+" "){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=pb(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).removeClass(a.call(this,b,qb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(L)||[];while(c=this[i++])if(e=qb(c),d=1===c.nodeType&&" "+pb(e)+" "){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=pb(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):r.isFunction(a)?this.each(function(c){r(this).toggleClass(a.call(this,c,qb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=r(this),f=a.match(L)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=qb(this),b&&W.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":W.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+pb(qb(c))+" ").indexOf(b)>-1)return!0;return!1}});var rb=/\r/g;r.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=r.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,r(this).val()):a,null==e?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=r.map(e,function(a){return null==a?"":a+""})),b=r.valHooks[this.type]||r.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=r.valHooks[e.type]||r.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(rb,""):null==c?"":c)}}}),r.extend({valHooks:{option:{get:function(a){var b=r.find.attr(a,"value");return null!=b?b:pb(r.text(a))}},select:{get:function(a){var b,c,d,e=a.options,f=a.selectedIndex,g="select-one"===a.type,h=g?null:[],i=g?f+1:e.length;for(d=f<0?i:g?f:0;d<i;d++)if(c=e[d],(c.selected||d===f)&&!c.disabled&&(!c.parentNode.disabled||!B(c.parentNode,"optgroup"))){if(b=r(c).val(),g)return b;h.push(b)}return h},set:function(a,b){var c,d,e=a.options,f=r.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=r.inArray(r.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),r.each(["radio","checkbox"],function(){r.valHooks[this]={set:function(a,b){if(Array.isArray(b))return a.checked=r.inArray(r(a).val(),b)>-1}},o.checkOn||(r.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var sb=/^(?:focusinfocus|focusoutblur)$/;r.extend(r.event,{trigger:function(b,c,e,f){var g,h,i,j,k,m,n,o=[e||d],p=l.call(b,"type")?b.type:b,q=l.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!sb.test(p+r.event.triggered)&&(p.indexOf(".")>-1&&(q=p.split("."),p=q.shift(),q.sort()),k=p.indexOf(":")<0&&"on"+p,b=b[r.expando]?b:new r.Event(p,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=q.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:r.makeArray(c,[b]),n=r.event.special[p]||{},f||!n.trigger||n.trigger.apply(e,c)!==!1)){if(!f&&!n.noBubble&&!r.isWindow(e)){for(j=n.delegateType||p,sb.test(j+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),i=h;i===(e.ownerDocument||d)&&o.push(i.defaultView||i.parentWindow||a)}g=0;while((h=o[g++])&&!b.isPropagationStopped())b.type=g>1?j:n.bindType||p,m=(W.get(h,"events")||{})[b.type]&&W.get(h,"handle"),m&&m.apply(h,c),m=k&&h[k],m&&m.apply&&U(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=p,f||b.isDefaultPrevented()||n._default&&n._default.apply(o.pop(),c)!==!1||!U(e)||k&&r.isFunction(e[p])&&!r.isWindow(e)&&(i=e[k],i&&(e[k]=null),r.event.triggered=p,e[p](),r.event.triggered=void 0,i&&(e[k]=i)),b.result}},simulate:function(a,b,c){var d=r.extend(new r.Event,c,{type:a,isSimulated:!0});r.event.trigger(d,null,b)}}),r.fn.extend({trigger:function(a,b){return this.each(function(){r.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];if(c)return r.event.trigger(a,b,c,!0)}}),r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(a,b){r.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),r.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),o.focusin="onfocusin"in a,o.focusin||r.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){r.event.simulate(b,a.target,r.event.fix(a))};r.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=W.access(d,b);e||d.addEventListener(a,c,!0),W.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=W.access(d,b)-1;e?W.access(d,b,e):(d.removeEventListener(a,c,!0),W.remove(d,b))}}});var tb=a.location,ub=r.now(),vb=/\?/;r.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||r.error("Invalid XML: "+b),c};var wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(Array.isArray(b))r.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==r.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}r.param=function(a,b){var c,d=[],e=function(a,b){var c=r.isFunction(b)?b():b;d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(null==c?"":c)};if(Array.isArray(a)||a.jquery&&!r.isPlainObject(a))r.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&")},r.fn.extend({serialize:function(){return r.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=r.prop(this,"elements");return a?r.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!r(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!ja.test(a))}).map(function(a,b){var c=r(this).val();return null==c?null:Array.isArray(c)?r.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}});var Bb=/%20/g,Cb=/#.*$/,Db=/([?&])_=[^&]*/,Eb=/^(.*?):[ \t]*([^\r\n]*)$/gm,Fb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Gb=/^(?:GET|HEAD)$/,Hb=/^\/\//,Ib={},Jb={},Kb="*/".concat("*"),Lb=d.createElement("a");Lb.href=tb.href;function Mb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(L)||[];if(r.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Nb(a,b,c,d){var e={},f=a===Jb;function g(h){var i;return e[h]=!0,r.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Ob(a,b){var c,d,e=r.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&r.extend(!0,a,d),a}function Pb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}if(f)return f!==i[0]&&i.unshift(f),c[f]}function Qb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}r.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:tb.href,type:"GET",isLocal:Fb.test(tb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Kb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":r.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Ob(Ob(a,r.ajaxSettings),b):Ob(r.ajaxSettings,a)},ajaxPrefilter:Mb(Ib),ajaxTransport:Mb(Jb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m,n,o=r.ajaxSetup({},c),p=o.context||o,q=o.context&&(p.nodeType||p.jquery)?r(p):r.event,s=r.Deferred(),t=r.Callbacks("once memory"),u=o.statusCode||{},v={},w={},x="canceled",y={readyState:0,getResponseHeader:function(a){var b;if(k){if(!h){h={};while(b=Eb.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return k?g:null},setRequestHeader:function(a,b){return null==k&&(a=w[a.toLowerCase()]=w[a.toLowerCase()]||a,v[a]=b),this},overrideMimeType:function(a){return null==k&&(o.mimeType=a),this},statusCode:function(a){var b;if(a)if(k)y.always(a[y.status]);else for(b in a)u[b]=[u[b],a[b]];return this},abort:function(a){var b=a||x;return e&&e.abort(b),A(0,b),this}};if(s.promise(y),o.url=((b||o.url||tb.href)+"").replace(Hb,tb.protocol+"//"),o.type=c.method||c.type||o.method||o.type,o.dataTypes=(o.dataType||"*").toLowerCase().match(L)||[""],null==o.crossDomain){j=d.createElement("a");try{j.href=o.url,j.href=j.href,o.crossDomain=Lb.protocol+"//"+Lb.host!=j.protocol+"//"+j.host}catch(z){o.crossDomain=!0}}if(o.data&&o.processData&&"string"!=typeof o.data&&(o.data=r.param(o.data,o.traditional)),Nb(Ib,o,c,y),k)return y;l=r.event&&o.global,l&&0===r.active++&&r.event.trigger("ajaxStart"),o.type=o.type.toUpperCase(),o.hasContent=!Gb.test(o.type),f=o.url.replace(Cb,""),o.hasContent?o.data&&o.processData&&0===(o.contentType||"").indexOf("application/x-www-form-urlencoded")&&(o.data=o.data.replace(Bb,"+")):(n=o.url.slice(f.length),o.data&&(f+=(vb.test(f)?"&":"?")+o.data,delete o.data),o.cache===!1&&(f=f.replace(Db,"$1"),n=(vb.test(f)?"&":"?")+"_="+ub++ +n),o.url=f+n),o.ifModified&&(r.lastModified[f]&&y.setRequestHeader("If-Modified-Since",r.lastModified[f]),r.etag[f]&&y.setRequestHeader("If-None-Match",r.etag[f])),(o.data&&o.hasContent&&o.contentType!==!1||c.contentType)&&y.setRequestHeader("Content-Type",o.contentType),y.setRequestHeader("Accept",o.dataTypes[0]&&o.accepts[o.dataTypes[0]]?o.accepts[o.dataTypes[0]]+("*"!==o.dataTypes[0]?", "+Kb+"; q=0.01":""):o.accepts["*"]);for(m in o.headers)y.setRequestHeader(m,o.headers[m]);if(o.beforeSend&&(o.beforeSend.call(p,y,o)===!1||k))return y.abort();if(x="abort",t.add(o.complete),y.done(o.success),y.fail(o.error),e=Nb(Jb,o,c,y)){if(y.readyState=1,l&&q.trigger("ajaxSend",[y,o]),k)return y;o.async&&o.timeout>0&&(i=a.setTimeout(function(){y.abort("timeout")},o.timeout));try{k=!1,e.send(v,A)}catch(z){if(k)throw z;A(-1,z)}}else A(-1,"No Transport");function A(b,c,d,h){var j,m,n,v,w,x=c;k||(k=!0,i&&a.clearTimeout(i),e=void 0,g=h||"",y.readyState=b>0?4:0,j=b>=200&&b<300||304===b,d&&(v=Pb(o,y,d)),v=Qb(o,v,y,j),j?(o.ifModified&&(w=y.getResponseHeader("Last-Modified"),w&&(r.lastModified[f]=w),w=y.getResponseHeader("etag"),w&&(r.etag[f]=w)),204===b||"HEAD"===o.type?x="nocontent":304===b?x="notmodified":(x=v.state,m=v.data,n=v.error,j=!n)):(n=x,!b&&x||(x="error",b<0&&(b=0))),y.status=b,y.statusText=(c||x)+"",j?s.resolveWith(p,[m,x,y]):s.rejectWith(p,[y,x,n]),y.statusCode(u),u=void 0,l&&q.trigger(j?"ajaxSuccess":"ajaxError",[y,o,j?m:n]),t.fireWith(p,[y,x]),l&&(q.trigger("ajaxComplete",[y,o]),--r.active||r.event.trigger("ajaxStop")))}return y},getJSON:function(a,b,c){return r.get(a,b,c,"json")},getScript:function(a,b){return r.get(a,void 0,b,"script")}}),r.each(["get","post"],function(a,b){r[b]=function(a,c,d,e){return r.isFunction(c)&&(e=e||d,d=c,c=void 0),r.ajax(r.extend({url:a,type:b,dataType:e,data:c,success:d},r.isPlainObject(a)&&a))}}),r._evalUrl=function(a){return r.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},r.fn.extend({wrapAll:function(a){var b;return this[0]&&(r.isFunction(a)&&(a=a.call(this[0])),b=r(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this},wrapInner:function(a){return r.isFunction(a)?this.each(function(b){r(this).wrapInner(a.call(this,b))}):this.each(function(){var b=r(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=r.isFunction(a);return this.each(function(c){r(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(a){return this.parent(a).not("body").each(function(){r(this).replaceWith(this.childNodes)}),this}}),r.expr.pseudos.hidden=function(a){return!r.expr.pseudos.visible(a)},r.expr.pseudos.visible=function(a){return!!(a.offsetWidth||a.offsetHeight||a.getClientRects().length)},r.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Rb={0:200,1223:204},Sb=r.ajaxSettings.xhr();o.cors=!!Sb&&"withCredentials"in Sb,o.ajax=Sb=!!Sb,r.ajaxTransport(function(b){var c,d;if(o.cors||Sb&&!b.crossDomain)return{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Rb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}}),r.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)}),r.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return r.globalEval(a),a}}}),r.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),r.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=r("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Tb=[],Ub=/(=)\?(?=&|$)|\?\?/;r.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Tb.pop()||r.expando+"_"+ub++;return this[a]=!0,a}}),r.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Ub.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ub.test(b.data)&&"data");if(h||"jsonp"===b.dataTypes[0])return e=b.jsonpCallback=r.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Ub,"$1"+e):b.jsonp!==!1&&(b.url+=(vb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||r.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?r(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Tb.push(e)),g&&r.isFunction(f)&&f(g[0]),g=f=void 0}),"script"}),o.createHTMLDocument=function(){var a=d.implementation.createHTMLDocument("").body;return a.innerHTML="<form></form><form></form>",2===a.childNodes.length}(),r.parseHTML=function(a,b,c){if("string"!=typeof a)return[];"boolean"==typeof b&&(c=b,b=!1);var e,f,g;return b||(o.createHTMLDocument?(b=d.implementation.createHTMLDocument(""),e=b.createElement("base"),e.href=d.location.href,b.head.appendChild(e)):b=d),f=C.exec(a),g=!c&&[],f?[b.createElement(f[1])]:(f=qa([a],b,g),g&&g.length&&r(g).remove(),r.merge([],f.childNodes))},r.fn.load=function(a,b,c){var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=pb(a.slice(h)),a=a.slice(0,h)),r.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&r.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?r("<div>").append(r.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},r.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){r.fn[b]=function(a){return this.on(b,a)}}),r.expr.pseudos.animated=function(a){return r.grep(r.timers,function(b){return a===b.elem}).length},r.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=r.css(a,"position"),l=r(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=r.css(a,"top"),i=r.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),r.isFunction(b)&&(b=b.call(a,c,r.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},r.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){r.offset.setOffset(this,a,b)});var b,c,d,e,f=this[0];if(f)return f.getClientRects().length?(d=f.getBoundingClientRect(),b=f.ownerDocument,c=b.documentElement,e=b.defaultView,{top:d.top+e.pageYOffset-c.clientTop,left:d.left+e.pageXOffset-c.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===r.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),B(a[0],"html")||(d=a.offset()),d={top:d.top+r.css(a[0],"borderTopWidth",!0),left:d.left+r.css(a[0],"borderLeftWidth",!0)}),{top:b.top-d.top-r.css(c,"marginTop",!0),left:b.left-d.left-r.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===r.css(a,"position"))a=a.offsetParent;return a||ra})}}),r.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;r.fn[a]=function(d){return T(this,function(a,d,e){var f;return r.isWindow(a)?f=a:9===a.nodeType&&(f=a.defaultView),void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),r.each(["top","left"],function(a,b){r.cssHooks[b]=Pa(o.pixelPosition,function(a,c){if(c)return c=Oa(a,b),Ma.test(c)?r(a).position()[b]+"px":c})}),r.each({Height:"height",Width:"width"},function(a,b){r.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){r.fn[d]=function(e,f){var g=arguments.length&&(c||"boolean"!=typeof e),h=c||(e===!0||f===!0?"margin":"border");return T(this,function(b,c,e){var f;return r.isWindow(b)?0===d.indexOf("outer")?b["inner"+a]:b.document.documentElement["client"+a]:9===b.nodeType?(f=b.documentElement,Math.max(b.body["scroll"+a],f["scroll"+a],b.body["offset"+a],f["offset"+a],f["client"+a])):void 0===e?r.css(b,c,h):r.style(b,c,e,h)},b,g?e:void 0,g)}})}),r.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),r.holdReady=function(a){a?r.readyWait++:r.ready(!0)},r.isArray=Array.isArray,r.parseJSON=JSON.parse,r.nodeName=B,"function"==typeof define&&define.amd&&define("jquery",[],function(){return r});var Vb=a.jQuery,Wb=a.$;return r.noConflict=function(b){return a.$===r&&(a.$=Wb),b&&a.jQuery===r&&(a.jQuery=Vb),r},b||(a.jQuery=a.$=r),r});
(function ($) {
    /**
     * Arabic language package
     * Translated by @Arkni
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ar_MA': {
            base64: {
                'default': 'الرجاء إدخال قيمة مشفرة طبقا للقاعدة 64.'
            },
            between: {
                'default': 'الرجاء إدخال قيمة بين %s و %s .',
                notInclusive: 'الرجاء إدخال قيمة بين %s و %s بدقة.'
            },
            bic: {
                'default': 'الرجاء إدخال رقم BIC صالح.'
            },
            callback: {
                'default': 'الرجاء إدخال قيمة صالحة.'
            },
            choice: {
                'default': 'الرجاء إدخال قيمة صالحة.',
                less: 'الرجاء اختيار %s خيارات كحد أدنى.',
                more: 'الرجاء اختيار %s خيارات كحد أقصى.',
                between: 'الرجاء إختيار %s-%s خيارات.'
            },
            color: {
                'default': 'الرجاء إدخال رمز لون صالح.'
            },
            creditCard: {
                'default': 'الرجاء إدخال رقم بطاقة إئتمان صحيح.'
            },
            cusip: {
                'default': 'الرجاء إدخال رقم CUSIP صالح.'
            },
            cvv: {
                'default': 'الرجاء إدخال رقم CVV صالح.'
            },
            date: {
                'default': 'الرجاء إدخال تاريخ صالح.',
                min: 'الرجاء إدخال تاريخ بعد %s.',
                max: 'الرجاء إدخال تاريخ قبل %s.',
                range: 'الرجاء إدخال تاريخ في المجال %s - %s.'
            },
            different: {
                'default': 'الرجاء إدخال قيمة مختلفة.'
            },
            digits: {
                'default': 'الرجاء إدخال الأرقام فقط.'
            },
            ean: {
                'default': 'الرجاء إدخال رقم EAN صالح.'
            },
            ein: {
                'default': 'الرجاء إدخال رقم EIN صالح.'
            },
            emailAddress: {
                'default': 'الرجاء إدخال بريد إلكتروني صحيح.'
            },
            file: {
                'default': 'الرجاء إختيار ملف صالح.'
            },
            greaterThan: {
                'default': 'الرجاء إدخال قيمة أكبر من أو تساوي %s.',
                notInclusive: 'الرجاء إدخال قيمة أكبر من %s.'
            },
            grid: {
                'default': 'الرجاء إدخال رقم GRid صالح.'
            },
            hex: {
                'default': 'الرجاء إدخال رقم ست عشري صالح.'
            },
            iban: {
                'default': 'الرجاء إدخال رقم IBAN صالح.',
                country: 'الرجاء إدخال رقم IBAN صالح في %s.',
                countries: {
                    AD: 'أندورا',
                    AE: 'الإمارات العربية المتحدة',
                    AL: 'ألبانيا',
                    AO: 'أنغولا',
                    AT: 'النمسا',
                    AZ: 'أذربيجان',
                    BA: 'البوسنة والهرسك',
                    BE: 'بلجيكا',
                    BF: 'بوركينا فاسو',
                    BG: 'بلغاريا',
                    BH: 'البحرين',
                    BI: 'بوروندي',
                    BJ: 'بنين',
                    BR: 'البرازيل',
                    CH: 'سويسرا',
                    CI: 'ساحل العاج',
                    CM: 'الكاميرون',
                    CR: 'كوستاريكا',
                    CV: 'الرأس الأخضر',
                    CY: 'قبرص',
                    CZ: 'التشيك',
                    DE: 'ألمانيا',
                    DK: 'الدنمارك',
                    DO: 'جمهورية الدومينيكان',
                    DZ: 'الجزائر',
                    EE: 'إستونيا',
                    ES: 'إسبانيا',
                    FI: 'فنلندا',
                    FO: 'جزر فارو',
                    FR: 'فرنسا',
                    GB: 'المملكة المتحدة',
                    GE: 'جورجيا',
                    GI: 'جبل طارق',
                    GL: 'جرينلاند',
                    GR: 'اليونان',
                    GT: 'غواتيمالا',
                    HR: 'كرواتيا',
                    HU: 'المجر',
                    IE: 'أيرلندا',
                    IL: 'إسرائيل',
                    IR: 'إيران',
                    IS: 'آيسلندا',
                    IT: 'إيطاليا',
                    JO: 'الأردن',
                    KW: 'الكويت',
                    KZ: 'كازاخستان',
                    LB: 'لبنان',
                    LI: 'ليختنشتاين',
                    LT: 'ليتوانيا',
                    LU: 'لوكسمبورغ',
                    LV: 'لاتفيا',
                    MC: 'موناكو',
                    MD: 'مولدوفا',
                    ME: 'الجبل الأسود',
                    MG: 'مدغشقر',
                    MK: 'جمهورية مقدونيا',
                    ML: 'مالي',
                    MR: 'موريتانيا',
                    MT: 'مالطا',
                    MU: 'موريشيوس',
                    MZ: 'موزمبيق',
                    NL: 'هولندا',
                    NO: 'النرويج',
                    PK: 'باكستان',
                    PL: 'بولندا',
                    PS: 'فلسطين',
                    PT: 'البرتغال',
                    QA: 'قطر',
                    RO: 'رومانيا',
                    RS: 'صربيا',
                    SA: 'المملكة العربية السعودية',
                    SE: 'السويد',
                    SI: 'سلوفينيا',
                    SK: 'سلوفاكيا',
                    SM: 'سان مارينو',
                    SN: 'السنغال',
                    TL: 'تيمور الشرقية',
                    TN: 'تونس',
                    TR: 'تركيا',
                    VG: 'جزر العذراء البريطانية',
                    XK: 'جمهورية كوسوفو'
                }
            },
            id: {
                'default': 'الرجاء إدخال رقم هوية صالحة.',
                country: 'الرجاء إدخال رقم تعريف صالح في %s.',
                countries: {
                    BA: 'البوسنة والهرسك',
                    BG: 'بلغاريا',
                    BR: 'البرازيل',
                    CH: 'سويسرا',
                    CL: 'تشيلي',
                    CN: 'الصين',
                    CZ: 'التشيك',
                    DK: 'الدنمارك',
                    EE: 'إستونيا',
                    ES: 'إسبانيا',
                    FI: 'فنلندا',
                    HR: 'كرواتيا',
                    IE: 'أيرلندا',
                    IS: 'آيسلندا',
                    LT: 'ليتوانيا',
                    LV: 'لاتفيا',
                    ME: 'الجبل الأسود',
                    MK: 'جمهورية مقدونيا',
                    NL: 'هولندا',
                    PL: 'بولندا',
                    RO: 'رومانيا',
                    RS: 'صربيا',
                    SE: 'السويد',
                    SI: 'سلوفينيا',
                    SK: 'سلوفاكيا',
                    SM: 'سان مارينو',
                    TH: 'تايلاند',
                    TR: 'تركيا',
                    ZA: 'جنوب أفريقيا'
                }
            },
            identical: {
                'default': 'الرجاء إدخال نفس القيمة.'
            },
            imei: {
                'default': 'الرجاء إدخال رقم IMEI صالح.'
            },
            imo: {
                'default': 'الرجاء إدخال رقم IMO صالح.'
            },
            integer: {
                'default': 'الرجاء إدخال رقم صحيح.'
            },
            ip: {
                'default': 'الرجاء إدخال عنوان IP صالح.',
                ipv4: 'الرجاء إدخال عنوان IPv4 صالح.',
                ipv6: 'الرجاء إدخال عنوان IPv6 صالح.'
            },
            isbn: {
                'default': 'الرجاء إدخال رقم ISBN صالح.'
            },
            isin: {
                'default': 'الرجاء إدخال رقم ISIN صالح.'
            },
            ismn: {
                'default': 'الرجاء إدخال رقم ISMN صالح.'
            },
            issn: {
                'default': 'الرجاء إدخال رقم ISSN صالح.'
            },
            lessThan: {
                'default': 'الرجاء إدخال قيمة أصغر من أو تساوي %s.',
                notInclusive: 'الرجاء إدخال قيمة أصغر من %s.'
            },
            mac: {
                'default': 'يرجى إدخال عنوان MAC صالح.'
            },
            meid: {
                'default': 'الرجاء إدخال رقم MEID صالح.'
            },
            notEmpty: {
                'default': 'الرجاء إدخال قيمة.'
            },
            numeric: {
                'default': 'الرجاء إدخال عدد عشري صالح.'
            },
            phone: {
                'default': 'الرجاء إدخال رقم هاتف صحيح.',
                country: 'الرجاء إدخال رقم هاتف صالح في %s.',
                countries: {
                    AE: 'الإمارات العربية المتحدة',
                    BG: 'بلغاريا',
                    BR: 'البرازيل',
                    CN: 'الصين',
                    CZ: 'التشيك',
                    DE: 'ألمانيا',
                    DK: 'الدنمارك',
                    ES: 'إسبانيا',
                    FR: 'فرنسا',
                    GB: 'المملكة المتحدة',
                    IN: 'الهند',
                    MA: 'المغرب',
                    NL: 'هولندا',
                    PK: 'باكستان',
                    RO: 'رومانيا',
                    RU: 'روسيا',
                    SK: 'سلوفاكيا',
                    TH: 'تايلاند',
                    US: 'الولايات المتحدة',
                    VE: 'فنزويلا'
                }
            },
            promise: {
                'default': 'الرجاء إدخال قيمة صالحة.'
            },
            regexp: {
                'default': 'الرجاء إدخال قيمة مطابقة للنمط.'
            },
            remote: {
                'default': 'الرجاء إدخال قيمة صالحة.'
            },
            rtn: {
                'default': 'الرجاء إدخال رقم RTN صالح.'
            },
            sedol: {
                'default': 'الرجاء إدخال رقم SEDOL صالح.'
            },
            siren: {
                'default': 'الرجاء إدخال رقم SIREN صالح.'
            },
            siret: {
                'default': 'الرجاء إدخال رقم SIRET صالح.'
            },
            step: {
                'default': 'الرجاء إدخال قيمة من مضاعفات %s .'
            },
            stringCase: {
                'default': 'الرجاء إدخال أحرف صغيرة فقط.',
                upper: 'الرجاء إدخال أحرف كبيرة فقط.'
            },
            stringLength: {
                'default': 'الرجاء إدخال قيمة ذات طول صحيح.',
                less: 'الرجاء إدخال أقل من %s حرفا.',
                more: 'الرجاء إدخال أكتر من %s حرفا.',
                between: 'الرجاء إدخال قيمة ذات عدد حروف بين %s و %s حرفا.'
            },
            uri: {
                'default': 'الرجاء إدخال URI صالح.'
            },
            uuid: {
                'default': 'الرجاء إدخال رقم UUID صالح.',
                version: 'الرجاء إدخال رقم UUID صالح إصدار %s.'
            },
            vat: {
                'default': 'الرجاء إدخال رقم VAT صالح.',
                country: 'الرجاء إدخال رقم VAT صالح في %s.',
                countries: {
                    AT: 'النمسا',
                    BE: 'بلجيكا',
                    BG: 'بلغاريا',
                    BR: 'البرازيل',
                    CH: 'سويسرا',
                    CY: 'قبرص',
                    CZ: 'التشيك',
                    DE: 'جورجيا',
                    DK: 'الدنمارك',
                    EE: 'إستونيا',
                    ES: 'إسبانيا',
                    FI: 'فنلندا',
                    FR: 'فرنسا',
                    GB: 'المملكة المتحدة',
                    GR: 'اليونان',
                    EL: 'اليونان',
                    HR: 'كرواتيا',
                    HU: 'المجر',
                    IE: 'أيرلندا',
                    IS: 'آيسلندا',
                    IT: 'إيطاليا',
                    LT: 'ليتوانيا',
                    LU: 'لوكسمبورغ',
                    LV: 'لاتفيا',
                    MT: 'مالطا',
                    NL: 'هولندا',
                    NO: 'النرويج',
                    PL: 'بولندا',
                    PT: 'البرتغال',
                    RO: 'رومانيا',
                    RU: 'روسيا',
                    RS: 'صربيا',
                    SE: 'السويد',
                    SI: 'سلوفينيا',
                    SK: 'سلوفاكيا',
                    VE: 'فنزويلا',
                    ZA: 'جنوب أفريقيا'
                }
            },
            vin: {
                'default': 'الرجاء إدخال رقم VIN صالح.'
            },
            zipCode: {
                'default': 'الرجاء إدخال رمز بريدي صالح.',
                country: 'الرجاء إدخال رمز بريدي صالح في %s.',
                countries: {
                    AT: 'النمسا',
                    BG: 'بلغاريا',
                    BR: 'البرازيل',
                    CA: 'كندا',
                    CH: 'سويسرا',
                    CZ: 'التشيك',
                    DE: 'ألمانيا',
                    DK: 'الدنمارك',
                    ES: 'إسبانيا',
                    FR: 'فرنسا',
                    GB: 'المملكة المتحدة',
                    IE: 'أيرلندا',
                    IN: 'الهند',
                    IT: 'إيطاليا',
                    MA: 'المغرب',
                    NL: 'هولندا',
                    PL: 'بولندا',
                    PT: 'البرتغال',
                    RO: 'رومانيا',
                    RU: 'روسيا',
                    SE: 'السويد',
                    SG: 'سنغافورة',
                    SK: 'سلوفاكيا',
                    US: 'الولايات المتحدة'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Bulgarian language package
     * Translated by @mraiur
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'bg_BG': {
            base64: {
                'default': 'Моля, въведете валиден base 64 кодиран'
            },
            between: {
                'default': 'Моля, въведете стойност между %s и %s',
                notInclusive: 'Моля, въведете стойност точно между %s и %s'
            },
            bic: {
                'default': 'Моля, въведете валиден BIC номер'
            },
            callback: {
                'default': 'Моля, въведете валидна стойност'
            },
            choice: {
                'default': 'Моля, въведете валидна стойност',
                less: 'Моля изберете минимална стойност %s',
                more: 'Моля изберете максимална стойност %s',
                between: 'Моля изберете от %s до %s стойност'
            },
            color: {
                'default': 'Моля, въведете валиден цвят'
            },
            creditCard: {
                'default': 'Моля, въведете валиден номер на кредитна карта'
            },
            cusip: {
                'default': 'Моля, въведете валиден CUSIP номер'
            },
            cvv: {
                'default': 'Моля, въведете валиден CVV номер'
            },
            date: {
                'default': 'Моля, въведете валидна дата',
                min: 'Моля въведете дата след %s',
                max: 'Моля въведете дата преди %s',
                range: 'Моля въведете дата между %s и %s'
            },
            different: {
                'default': 'Моля, въведете различна стойност'
            },
            digits: {
                'default': 'Моля, въведете само цифри'
            },
            ean: {
                'default': 'Моля, въведете валиден EAN номер'
            },
            ein: {
                'default': 'Моля, въведете валиден EIN номер'
            },
            emailAddress: {
                'default': 'Моля, въведете валиден имейл адрес'
            },
            file: {
                'default': 'Моля, изберете валиден файл'
            },
            greaterThan: {
                'default': 'Моля, въведете стойност по-голяма от или равна на %s',
                notInclusive: 'Моля, въведете стойност по-голяма от %s'
            },
            grid: {
                'default': 'Моля, изберете валиден GRId номер'
            },
            hex: {
                'default': 'Моля, въведете валиден шестнадесетичен номер'
            },
            iban: {
                'default': 'Моля, въведете валиден IBAN номер',
                country: 'Моля, въведете валиден номер на IBAN в %s',
                countries: {
                    АD: 'Андора',
                    AE: 'Обединени арабски емирства',
                    AL: 'Албания',
                    AO: 'Ангола',
                    AT: 'Австрия',
                    AZ: 'Азербайджан',
                    BA: 'Босна и Херцеговина',
                    BE: 'Белгия',
                    BF: 'Буркина Фасо',
                    BG: 'България',
                    BH: 'Бахрейн',
                    BI: 'Бурунди',
                    BJ: 'Бенин',
                    BR: 'Бразилия',
                    CH: 'Швейцария',
                    CI: 'Ivory Coast',
                    CM: 'Камерун',
                    CR: 'Коста Рика',
                    CV: 'Cape Verde',
                    CY: 'Кипър',
                    CZ: 'Чешката република',
                    DE: 'Германия',
                    DK: 'Дания',
                    DO: 'Доминиканска република',
                    DZ: 'Алжир',
                    EE: 'Естония',
                    ES: 'Испания',
                    FI: 'Финландия',
                    FO: 'Фарьорските острови',
                    FR: 'Франция',
                    GB: 'Обединеното кралство',
                    GE: 'Грузия',
                    GI: 'Гибралтар',
                    GL: 'Гренландия',
                    GR: 'Гърция',
                    GT: 'Гватемала',
                    HR: 'Хърватия',
                    HU: 'Унгария',
                    IE: 'Ирландия',
                    IL: 'Израел',
                    IR: 'Иран',
                    IS: 'Исландия',
                    IT: 'Италия',
                    JO: 'Йордания',
                    KW: 'Кувейт',
                    KZ: 'Казахстан',
                    LB: 'Ливан',
                    LI: 'Лихтенщайн',
                    LT: 'Литва',
                    LU: 'Люксембург',
                    LV: 'Латвия',
                    MC: 'Монако',
                    MD: 'Молдова',
                    ME: 'Черна гора',
                    MG: 'Мадагаскар',
                    MK: 'Македония',
                    ML: 'Мали',
                    MR: 'Мавритания',
                    MT: 'Малта',
                    MU: 'Мавриций',
                    MZ: 'Мозамбик',
                    NL: 'Нидерландия',
                    NO: 'Норвегия',
                    PK: 'Пакистан',
                    PL: 'Полша',
                    PS: 'палестинска',
                    PT: 'Португалия',
                    QA: 'Катар',
                    RO: 'Румъния',
                    RS: 'Сърбия',
                    SA: 'Саудитска Арабия',
                    SE: 'Швеция',
                    SI: 'Словения',
                    SK: 'Словакия',
                    SM: 'San Marino',
                    SN: 'Сенегал',
                    TL: 'Източен Тимор',
                    TN: 'Тунис',
                    TR: 'Турция',
                    VG: 'Британски Вирджински острови',
                    XK: 'Република Косово'
                }
            },
            id: {
                'default': 'Моля, въведете валиден идентификационен номер',
                country: 'Моля, въведете валиден идентификационен номер в %s',
                countries: {
                    BA: 'Босна и Херцеговина',
                    BG: 'България',
                    BR: 'Бразилия',
                    СН: 'Швейцария',
                    CL: 'Чили',
                    CN: 'Китай',
                    CZ: 'Чешката република',
                    DK: 'Дания',
                    EE: 'Естония',
                    ES: 'Испания',
                    FI: 'Финландия',
                    HR: 'Хърватия',
                    IE: 'Ирландия',
                    IS: 'Исландия',
                    LT: 'Литва',
                    LV: 'Латвия',
                    ME: 'Черна гора',
                    MK: 'Македония',
                    NL: 'Холандия',
                    PL: 'Полша',
                    RO: 'Румъния',
                    RS: 'Сърбия',
                    SE: 'Швеция',
                    SI: 'Словения',
                    SK: 'Словакия',
                    SM: 'San Marino',
                    TH: 'Тайланд',
                    TR: 'Турция',
                    ZA: 'Южна Африка'
                }
            },
            identical: {
                'default': 'Моля, въведете една и съща стойност'
            },
            imei: {
                'default': 'Моля, въведете валиден IMEI номер'
            },
            imo: {
                'default': 'Моля, въведете валиден IMO номер'
            },
            integer: {
                'default': 'Моля, въведете валиден номер'
            },
            ip: {
                'default': 'Моля, въведете валиден IP адрес',
                ipv4: 'Моля, въведете валиден IPv4 адрес',
                ipv6: 'Моля, въведете валиден IPv6 адрес'
            },
            isbn: {
                'default': 'Моля, въведете валиден ISBN номер'
            },
            isin: {
                'default': 'Моля, въведете валиден ISIN номер'
            },
            ismn: {
                'default': 'Моля, въведете валиден ISMN номер'
            },
            issn: {
                'default': 'Моля, въведете валиден ISSN номер'
            },
            lessThan: {
                'default': 'Моля, въведете стойност по-малка или равна на %s',
                notInclusive: 'Моля, въведете стойност по-малко от %s'
            },
            mac: {
                'default': 'Моля, въведете валиден MAC адрес'
            },
            meid: {
                'default': 'Моля, въведете валиден MEID номер'
            },
            notEmpty: {
                'default': 'Моля, въведете стойност'
            },
            numeric: {
                'default': 'Моля, въведете валидно число с плаваща запетая'
            },
            phone: {
                'default': 'Моля, въведете валиден телефонен номер',
                country: 'Моля, въведете валиден телефонен номер в %s',
                countries: {
                    AE: 'Обединени арабски емирства',
                    BG: 'България',
                    BR: 'Бразилия',
                    CN: 'Китай',
                    CZ: 'Чешката република',
                    DE: 'Германия',
                    DK: 'Дания',
                    ES: 'Испания',
                    FR: 'Франция',
                    GB: 'Обединеното кралство',
                    IN: 'Индия',
                    MA: 'Мароко',
                    NL: 'Нидерландия',
                    PK: 'Пакистан',
                    RO: 'Румъния',
                    RU: 'Русия',
                    SK: 'Словакия',
                    TH: 'Тайланд',
                    US: 'САЩ',
                    VE: 'Венецуела'
                }
            },
            promise: {
                'default': 'Моля, въведете валидна стойност'
            },
            regexp: {
                'default': 'Моля, въведете стойност, отговаряща на модела'
            },
            remote: {
                'default': 'Моля, въведете валидна стойност'
            },
            rtn: {
                'default': 'Моля, въведете валиде  RTN номер'
            },
            sedol: {
                'default': 'Моля, въведете валиден SEDOL номер'
            },
            siren: {
                'default': 'Моля, въведете валиден SIREN номер'
            },
            siret: {
                'default': 'Моля, въведете валиден SIRET номер'
            },
            step: {
                'default': 'Моля, въведете валиденa стъпка от %s'
            },
            stringCase: {
                'default': 'Моля, въведете само с малки букви',
                upper: 'Моля въведете само главни букви'
            },
            stringLength: {
                'default': 'Моля, въведете стойност с валидни дължина',
                less: 'Моля, въведете по-малко от %s знака',
                more: 'Моля въведете повече от %s знака',
                between: 'Моля, въведете стойност между %s и %s знака'
            },
            uri: {
                'default': 'Моля, въведете валиден URI'
            },
            uuid: {
                'default': 'Моля, въведете валиден UUID номер',
                version: 'Моля, въведете валиден UUID номер с версия %s'
            },
            vat: {
                'default': 'Моля, въведете валиден ДДС',
                country: 'Моля, въведете валиден ДДС в %s',
                countries: {
                    AT: 'Австрия',
                    BE: 'Белгия',
                    BG: 'България',
                    BR: 'Бразилия',
                    СН: 'Швейцария',
                    CY: 'Кипър',
                    CZ: 'Чешката република',
                    DE: 'Германия',
                    DK: 'Дания',
                    EE: 'Естония',
                    ES: 'Испания',
                    FI: 'Финландия',
                    FR: 'Франция',
                    GB: 'Обединеното кралство',
                    GR: 'Гърция',
                    EL: 'Гърция',
                    HU: 'Унгария',
                    HR: 'Ирландия',
                    IE: 'Ирландски',
                    IS: 'Исландия',
                    IT: 'Италия',
                    LT: 'Литва',
                    LU: 'Люксембург',
                    LV: 'Латвия',
                    MT: 'Малта',
                    NL: 'Холандия',
                    NO: 'Норвегия',
                    PL: 'Полша',
                    PT: 'Португалия',
                    RO: 'Румъния',
                    RU: 'Русия',
                    RS: 'Сърбия',
                    SE: 'Швеция',
                    SI: 'Словения',
                    SK: 'Словакия',
                    VE: 'Венецуела',
                    ZA: 'Южна Африка'
                }
            },
            vin: {
                'default': 'Моля, въведете валиден номер VIN'
            },
            zipCode: {
                'default': 'Моля, въведете валиден пощенски код',
                country: 'Моля, въведете валиден пощенски код в %s',
                countries: {
                    AT: 'Австрия',
                    BG: 'България',
                    BR: 'Бразилия',
                    CA: 'Канада',
                    СН: 'Швейцария',
                    CZ: 'Чешката република',
                    DE: 'Германия',
                    DK: 'Дания',
                    ES: 'Испания',
                    FR: 'Франция',
                    GB: 'Обединеното кралство',
                    IE: 'Ирландски',
                    IN: 'Индия',
                    IT: 'Италия',
                    MA: 'Мароко',
                    NL: 'Холандия',
                    PL: 'Полша',
                    PT: 'Португалия',
                    RO: 'Румъния',
                    RU: 'Русия',
                    SE: 'Швеция',
                    SG: 'Сингапур',
                    SK: 'Словакия',
                    US: 'САЩ'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Catalan language package
     * Translated by @ArnauAregall
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ca_ES': {
            base64: {
                'default': 'Si us plau introdueix un valor vàlid en base 64'
            },
            between: {
                'default': 'Si us plau introdueix un valor entre %s i %s',
                notInclusive: 'Si us plau introdueix un valor comprès entre %s i %s'
            },
            bic: {
                'default': 'Si us plau introdueix un nombre BIC vàlid'
            },
            callback: {
                'default': 'Si us plau introdueix un valor vàlid'
            },
            choice: {
                'default': 'Si us plau introdueix un valor vàlid',
                less: 'Si us plau escull %s opcions com a mínim',
                more: 'Si us plau escull %s opcions com a màxim',
                between: 'Si us plau escull entre %s i %s opcions'
            },
            color: {
                'default': 'Si us plau introdueix un color vàlid'
            },
            creditCard: {
                'default': 'Si us plau introdueix un nombre vàlid de targeta de crèdit'
            },
            cusip: {
                'default': 'Si us plau introdueix un nombre CUSIP vàlid'
            },
            cvv: {
                'default': 'Si us plau introdueix un nombre CVV vàlid'
            },
            date: {
                'default': 'Si us plau introdueix una data vàlida',
                min: 'Si us plau introdueix una data posterior a %s',
                max: 'Si us plau introdueix una data anterior %s',
                range: 'Si us plau introdueix una data compresa entre %s i %s'
            },
            different: {
                'default': 'Si us plau introdueix un valor diferent'
            },
            digits: {
                'default': 'Si us plau introdueix només dígits'
            },
            ean: {
                'default': 'Si us plau introdueix un nombre EAN vàlid'
            },
            ein: {
                'default': 'Si us plau introdueix un nombre EIN vàlid'
            },
            emailAddress: {
                'default': 'Si us plau introdueix una adreça electrònica vàlida'
            },
            file: {
                'default': 'Si us plau selecciona un arxiu vàlid'
            },
            greaterThan: {
                'default': 'Si us plau introdueix un valor més gran o igual a %s',
                notInclusive: 'Si us plau introdueix un valor més gran que %s'
            },
            grid: {
                'default': 'Si us plau introdueix un nombre GRId vàlid'
            },
            hex: {
                'default': 'Si us plau introdueix un valor hexadecimal vàlid'
            },
            iban: {
                'default': 'Si us plau introdueix un nombre IBAN vàlid',
                country: 'Si us plau introdueix un nombre IBAN vàlid a %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emirats Àrabs Units',
                    AL: 'Albània',
                    AO: 'Angola',
                    AT: 'Àustria',
                    AZ: 'Azerbaidjan',
                    BA: 'Bòsnia i Hercegovina',
                    BE: 'Bèlgica',
                    BF: 'Burkina Faso',
                    BG: 'Bulgària',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benín',
                    BR: 'Brasil',
                    CH: 'Suïssa',
                    CI: 'Costa d\'Ivori',
                    CM: 'Camerun',
                    CR: 'Costa Rica',
                    CV: 'Cap Verd',
                    CY: 'Xipre',
                    CZ: 'República Txeca',
                    DE: 'Alemanya',
                    DK: 'Dinamarca',
                    DO: 'República Dominicana',
                    DZ: 'Algèria',
                    EE: 'Estònia',
                    ES: 'Espanya',
                    FI: 'Finlàndia',
                    FO: 'Illes Fèroe',
                    FR: 'França',
                    GB: 'Regne Unit',
                    GE: 'Geòrgia',
                    GI: 'Gibraltar',
                    GL: 'Grenlàndia',
                    GR: 'Grècia',
                    GT: 'Guatemala',
                    HR: 'Croàcia',
                    HU: 'Hongria',
                    IE: 'Irlanda',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islàndia',
                    IT: 'Itàlia',
                    JO: 'Jordània',
                    KW: 'Kuwait',
                    KZ: 'Kazajistán',
                    LB: 'Líban',
                    LI: 'Liechtenstein',
                    LT: 'Lituània',
                    LU: 'Luxemburg',
                    LV: 'Letònia',
                    MC: 'Mònaco',
                    MD: 'Moldàvia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedònia',
                    ML: 'Malo',
                    MR: 'Mauritània',
                    MT: 'Malta',
                    MU: 'Maurici',
                    MZ: 'Moçambic',
                    NL: 'Països Baixos',
                    NO: 'Noruega',
                    PK: 'Pakistan',
                    PL: 'Polònia',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Sèrbia',
                    SA: 'Aràbia Saudita',
                    SE: 'Suècia',
                    SI: 'Eslovènia',
                    SK: 'Eslovàquia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Timor Oriental',
                    TN: 'Tunísia',
                    TR: 'Turquia',
                    VG: 'Illes Verges Britàniques',
                    XK: 'República de Kosovo'
                }
            },
            id: {
                'default': 'Si us plau introdueix un nombre d\'identificació vàlid',
                country: 'Si us plau introdueix un nombre d\'identificació vàlid a %s',
                countries: {
                    BA: 'Bòsnia i Hercegovina',
                    BG: 'Bulgària',
                    BR: 'Brasil',
                    CH: 'Suïssa',
                    CL: 'Xile',
                    CN: 'Xina',
                    CZ: 'República Checa',
                    DK: 'Dinamarca',
                    EE: 'Estònia',
                    ES: 'Espanya',
                    FI: 'Finlpandia',
                    HR: 'Cropàcia',
                    IE: 'Irlanda',
                    IS: 'Islàndia',
                    LT: 'Lituania',
                    LV: 'Letònia',
                    ME: 'Montenegro',
                    MK: 'Macedònia',
                    NL: 'Països Baixos',
                    PL: 'Polònia',
                    RO: 'Romania',
                    RS: 'Sèrbia',
                    SE: 'Suècia',
                    SI: 'Eslovènia',
                    SK: 'Eslovàquia',
                    SM: 'San Marino',
                    TH: 'Tailàndia',
                    TR: 'Turquia',
                    ZA: 'Sud-àfrica'
                }
            },
            identical: {
                'default': 'Si us plau introdueix exactament el mateix valor'
            },
            imei: {
                'default': 'Si us plau introdueix un nombre IMEI vàlid'
            },
            imo: {
                'default': 'Si us plau introdueix un nombre IMO vàlid'
            },
            integer: {
                'default': 'Si us plau introdueix un nombre vàlid'
            },
            ip: {
                'default': 'Si us plau introdueix una direcció IP vàlida',
                ipv4: 'Si us plau introdueix una direcció IPV4 vàlida',
                ipv6: 'Si us plau introdueix una direcció IPV6 vàlida'
            },
            isbn: {
                'default': 'Si us plau introdueix un nombre ISBN vàlid'
            },
            isin: {
                'default': 'Si us plau introdueix un nombre ISIN vàlid'
            },
            ismn: {
                'default': 'Si us plau introdueix un nombre ISMN vàlid'
            },
            issn: {
                'default': 'Si us plau introdueix un nombre ISSN vàlid'
            },
            lessThan: {
                'default': 'Si us plau introdueix un valor menor o igual a %s',
                notInclusive: 'Si us plau introdueix un valor menor que %s'
            },
            mac: {
                'default': 'Si us plau introdueix una adreça MAC vàlida'
            },
            meid: {
                'default': 'Si us plau introdueix nombre MEID vàlid'
            },
            notEmpty: {
                'default': 'Si us plau introdueix un valor'
            },
            numeric: {
                'default': 'Si us plau introdueix un nombre decimal vàlid'
            },
            phone: {
                'default': 'Si us plau introdueix un telèfon vàlid',
                country: 'Si us plau introdueix un telèfon vàlid a %s',
                countries: {
                    AE: 'Emirats Àrabs Units',
                    BG: 'Bulgària',
                    BR: 'Brasil',
                    CN: 'Xina',
                    CZ: 'República Checa',
                    DE: 'Alemanya',
                    DK: 'Dinamarca',
                    ES: 'Espanya',
                    FR: 'França',
                    GB: 'Regne Unit',
                    IN: 'Índia',
                    MA: 'Marroc',
                    NL: 'Països Baixos',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Rússia',
                    SK: 'Eslovàquia',
                    TH: 'Tailàndia',
                    US: 'Estats Units',
                    VE: 'Veneçuela'
                }
            },
            promise: {
                'default': 'Si us plau introdueix un valor vàlid'
            },
            regexp: {
                'default': 'Si us plau introdueix un valor que coincideixi amb el patró'
            },
            remote: {
                'default': 'Si us plau introdueix un valor vàlid'
            },
            rtn: {
                'default': 'Si us plau introdueix un nombre RTN vàlid'
            },
            sedol: {
                'default': 'Si us plau introdueix un nombre SEDOL vàlid'
            },
            siren: {
                'default': 'Si us plau introdueix un nombre SIREN vàlid'
            },
            siret: {
                'default': 'Si us plau introdueix un nombre SIRET vàlid'
            },
            step: {
                'default': 'Si us plau introdueix un pas vàlid de %s'
            },
            stringCase: {
                'default': 'Si us plau introdueix només caràcters en minúscula',
                upper: 'Si us plau introdueix només caràcters en majúscula'
            },
            stringLength: {
                'default': 'Si us plau introdueix un valor amb una longitud vàlida',
                less: 'Si us plau introdueix menys de %s caràcters',
                more: 'Si us plau introdueix més de %s caràcters',
                between: 'Si us plau introdueix un valor amb una longitud compresa entre %s i %s caràcters'
            },
            uri: {
                'default': 'Si us plau introdueix una URI vàlida'
            },
            uuid: {
                'default': 'Si us plau introdueix un nom UUID vàlid',
                version: 'Si us plau introdueix una versió UUID vàlida per %s'
            },
            vat: {
                'default': 'Si us plau introdueix una quantitat d\'IVA vàlida',
                country: 'Si us plau introdueix una quantitat d\' IVA vàlida a %s',
                countries: {
                    AT: 'Àustria',
                    BE: 'Bèlgica',
                    BG: 'Bulgària',
                    BR: 'Brasil',
                    CH: 'Suïssa',
                    CY: 'Xipre',
                    CZ: 'República Checa',
                    DE: 'Alemanya',
                    DK: 'Dinamarca',
                    EE: 'Estònia',
                    ES: 'Espanya',
                    FI: 'Finlàndia',
                    FR: 'França',
                    GB: 'Regne Unit',
                    GR: 'Grècia',
                    EL: 'Grècia',
                    HU: 'Hongria',
                    HR: 'Croàcia',
                    IE: 'Irlanda',
                    IS: 'Islàndia',
                    IT: 'Itàlia',
                    LT: 'Lituània',
                    LU: 'Luxemburg',
                    LV: 'Letònia',
                    MT: 'Malta',
                    NL: 'Països Baixos',
                    NO: 'Noruega',
                    PL: 'Polònia',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Rússia',
                    RS: 'Sèrbia',
                    SE: 'Suècia',
                    SI: 'Eslovènia',
                    SK: 'Eslovàquia',
                    VE: 'Veneçuela',
                    ZA: 'Sud-àfrica'
                }
            },
            vin: {
                'default': 'Si us plau introdueix un nombre VIN vàlid'
            },
            zipCode: {
                'default': 'Si us plau introdueix un codi postal vàlid',
                country: 'Si us plau introdueix un codi postal vàlid a %s',
                countries: {
                    AT: 'Àustria',
                    BG: 'Bulgària',
                    BR: 'Brasil',
                    CA: 'Canadà',
                    CH: 'Suïssa',
                    CZ: 'República Checa',
                    DE: 'Alemanya',
                    DK: 'Dinamarca',
                    ES: 'Espanya',
                    FR: 'França',
                    GB: 'Rege Unit',
                    IE: 'Irlanda',
                    IN: 'Índia',
                    IT: 'Itàlia',
                    MA: 'Marroc',
                    NL: 'Països Baixos',
                    PL: 'Polònia',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Rússia',
                    SE: 'Suècia',
                    SG: 'Singapur',
                    SK: 'Eslovàquia',
                    US: 'Estats Units'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Czech language package
     * Translated by @AdwinTrave. Improved by @cuchac, @budik21
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'cs_CZ': {
            base64: {
                'default': 'Prosím zadejte správný base64'
            },
            between: {
                'default': 'Prosím zadejte hodnotu mezi %s a %s',
                notInclusive: 'Prosím zadejte hodnotu mezi %s a %s (včetně těchto čísel)'
            },
            bic: {
                'default': 'Prosím zadejte správné BIC číslo'
            },
            callback: {
                'default': 'Prosím zadejte správnou hodnotu'
            },
            choice: {
                'default': 'Prosím vyberte správnou hodnotu',
                less: 'Hodnota musí být minimálně %s',
                more: 'Hodnota nesmí být více jak %s',
                between: 'Prosím vyberte mezi %s a %s'
            },
            color: {
                'default': 'Prosím zadejte správnou barvu'
            },
            creditCard: {
                'default': 'Prosím zadejte správné číslo kreditní karty'
            },
            cusip: {
                'default': 'Prosím zadejte správné CUSIP číslo'
            },
            cvv: {
                'default': 'Prosím zadejte správné CVV číslo'
            },
            date: {
                'default': 'Prosím zadejte správné datum',
                min: 'Prosím zadejte datum před %s',
                max: 'Prosím zadejte datum po %s',
                range: 'Prosím zadejte datum v rozmezí %s až %s'
            },
            different: {
                'default': 'Prosím zadejte jinou hodnotu'
            },
            digits: {
                'default': 'Toto pole může obsahovat pouze čísla'
            },
            ean: {
                'default': 'Prosím zadejte správné EAN číslo'
            },
            ein: {
                'default': 'Prosím zadejte správné EIN číslo'
            },
            emailAddress: {
                'default': 'Prosím zadejte správnou emailovou adresu'
            },
            file: {
                'default': 'Prosím vyberte soubor'
            },
            greaterThan: {
                'default': 'Prosím zadejte hodnotu větší nebo rovnu %s',
                notInclusive: 'Prosím zadejte hodnotu větší než %s'
            },
            grid: {
                'default': 'Prosím zadejte správné GRId číslo'
            },
            hex: {
                'default': 'Prosím zadejte správné hexadecimální číslo'
            },
            iban: {
                'default': 'Prosím zadejte správné IBAN číslo',
                country: 'Prosím zadejte správné IBAN číslo pro %s',
                countries: {
                    AD: 'Andorru',
                    AE: 'Spojené arabské emiráty',
                    AL: 'Albanii',
                    AO: 'Angolu',
                    AT: 'Rakousko',
                    AZ: 'Ázerbajdžán',
                    BA: 'Bosnu a Herzegovinu',
                    BE: 'Belgii',
                    BF: 'Burkinu Faso',
                    BG: 'Bulharsko',
                    BH: 'Bahrajn',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazílii',
                    CH: 'Švýcarsko',
                    CI: 'Pobřeží slonoviny',
                    CM: 'Kamerun',
                    CR: 'Kostariku',
                    CV: 'Cape Verde',
                    CY: 'Kypr',
                    CZ: 'Českou republiku',
                    DE: 'Německo',
                    DK: 'Dánsko',
                    DO: 'Dominikánskou republiku',
                    DZ: 'Alžírsko',
                    EE: 'Estonsko',
                    ES: 'Španělsko',
                    FI: 'Finsko',
                    FO: 'Faerské ostrovy',
                    FR: 'Francie',
                    GB: 'Velkou Británii',
                    GE: 'Gruzii',
                    GI: 'Gibraltar',
                    GL: 'Grónsko',
                    GR: 'Řecko',
                    GT: 'Guatemalu',
                    HR: 'Chorvatsko',
                    HU: 'Maďarsko',
                    IE: 'Irsko',
                    IL: 'Israel',
                    IR: 'Irán',
                    IS: 'Island',
                    IT: 'Itálii',
                    JO: 'Jordansko',
                    KW: 'Kuwait',
                    KZ: 'Kazachstán',
                    LB: 'Libanon',
                    LI: 'Lichtenštejnsko',
                    LT: 'Litvu',
                    LU: 'Lucembursko',
                    LV: 'Lotyšsko',
                    MC: 'Monaco',
                    MD: 'Moldavsko',
                    ME: 'Černou Horu',
                    MG: 'Madagaskar',
                    MK: 'Makedonii',
                    ML: 'Mali',
                    MR: 'Mauritánii',
                    MT: 'Maltu',
                    MU: 'Mauritius',
                    MZ: 'Mosambik',
                    NL: 'Nizozemsko',
                    NO: 'Norsko',
                    PK: 'Pakistán',
                    PL: 'Polsko',
                    PS: 'Palestinu',
                    PT: 'Portugalsko',
                    QA: 'Katar',
                    RO: 'Rumunsko',
                    RS: 'Srbsko',
                    SA: 'Saudskou Arábii',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Východní Timor',
                    TN: 'Tunisko',
                    TR: 'Turecko',
                    VG: 'Britské Panenské ostrovy',
                    XK: 'Republic of Kosovo'
                }
            },
            id: {
                'default': 'Prosím zadejte správné rodné číslo',
                country: 'Prosím zadejte správné rodné číslo pro %s',
                countries: {
                    BA: 'Bosnu a Hercegovinu',
                    BG: 'Bulharsko',
                    BR: 'Brazílii',
                    CH: 'Švýcarsko',
                    CL: 'Chile',
                    CN: 'Čínu',
                    CZ: 'Českou Republiku',
                    DK: 'Dánsko',
                    EE: 'Estonsko',
                    ES: 'Španělsko',
                    FI: 'Finsko',
                    HR: 'Chorvatsko',
                    IE: 'Irsko',
                    IS: 'Island',
                    LT: 'Litvu',
                    LV: 'Lotyšsko',
                    ME: 'Černou horu',
                    MK: 'Makedonii',
                    NL: 'Nizozemí',
                    PL: 'Polsko',
                    RO: 'Rumunsko',
                    RS: 'Srbsko',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    SM: 'San Marino',
                    TH: 'Thajsko',
                    TR: 'Turecko',
                    ZA: 'Jižní Afriku'
                }
            },
            identical: {
                'default': 'Prosím zadejte stejnou hodnotu'
            },
            imei: {
                'default': 'Prosím zadejte správné IMEI číslo'
            },
            imo: {
                'default': 'Prosím zadejte správné IMO číslo'
            },
            integer: {
                'default': 'Prosím zadejte celé číslo'
            },
            ip: {
                'default': 'Prosím zadejte správnou IP adresu',
                ipv4: 'Prosím zadejte správnou IPv4 adresu',
                ipv6: 'Prosím zadejte správnou IPv6 adresu'
            },
            isbn: {
                'default': 'Prosím zadejte správné ISBN číslo'
            },
            isin: {
                'default': 'Prosím zadejte správné ISIN číslo'
            },
            ismn: {
                'default': 'Prosím zadejte správné ISMN číslo'
            },
            issn: {
                'default': 'Prosím zadejte správné ISSN číslo'
            },
            lessThan: {
                'default': 'Prosím zadejte hodnotu menší nebo rovno %s',
                notInclusive: 'Prosím zadejte hodnotu menčí než %s'
            },
            mac: {
                'default': 'Prosím zadejte správnou MAC adresu'
            },
            meid: {
                'default': 'Prosím zadejte správné MEID číslo'
            },
            notEmpty: {
                'default': 'Toto pole nesmí být prázdné'
            },
            numeric: {
                'default': 'Prosím zadejte číselnou hodnotu'
            },
            phone: {
                'default': 'Prosím zadejte správné telefoní číslo',
                country: 'Prosím zadejte správné telefoní číslo pro %s',
                countries: {
                    AE: 'Spojené arabské emiráty',
                    BG: 'Bulharsko',
                    BR: 'Brazílii',
                    CN: 'Čínu',
                    CZ: 'Českou Republiku',
                    DE: 'Německo',
                    DK: 'Dánsko',
                    ES: 'Španělsko',
                    FR: 'Francii',
                    GB: 'Velkou Británii',
                    IN: 'Indie',
                    MA: 'Maroko',
                    NL: 'Nizozemsko',
                    PK: 'Pákistán',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    SK: 'Slovensko',
                    TH: 'Thajsko',
                    US: 'Spojené Státy Americké',
                    VE: 'Venezuelu'
                }
            },
            promise: {
                'default': 'Prosím zadejte správnou hodnotu'
            },
            regexp: {
                'default': 'Prosím zadejte hodnotu splňující zadání'
            },
            remote: {
                'default': 'Prosím zadejte správnou hodnotu'
            },
            rtn: {
                'default': 'Prosím zadejte správné RTN číslo'
            },
            sedol: {
                'default': 'Prosím zadejte správné SEDOL číslo'
            },
            siren: {
                'default': 'Prosím zadejte správné SIREN číslo'
            },
            siret: {
                'default': 'Prosím zadejte správné SIRET číslo'
            },
            step: {
                'default': 'Prosím zadejte správný krok %s'
            },
            stringCase: {
                'default': 'Pouze malá písmena jsou povoleny v tomto poli',
                upper: 'Pouze velké písmena jsou povoleny v tomto poli'
            },
            stringLength: {
                'default': 'Toto pole nesmí být prázdné',
                less: 'Prosím zadejte hodnotu menší než %s znaků',
                more: 'Prosím zadejte hodnotu %s znaků a delší',
                between: 'Prosím zadejte hodnotu mezi %s a %s znaky'
            },
            uri: {
                'default': 'Prosím zadejte správnou URI'
            },
            uuid: {
                'default': 'Prosím zadejte správné UUID číslo',
                version: 'Prosím zadejte správné UUID verze %s'
            },
            vat: {
                'default': 'Prosím zadejte správné VAT číslo',
                country: 'Prosím zadejte správné VAT číslo pro %s',
                countries: {
                    AT: 'Rakousko',
                    BE: 'Belgii',
                    BG: 'Bulharsko',
                    BR: 'Brazílii',
                    CH: 'Švýcarsko',
                    CY: 'Kypr',
                    CZ: 'Českou Republiku',
                    DE: 'Německo',
                    DK: 'Dánsko',
                    EE: 'Estonsko',
                    ES: 'Španělsko',
                    FI: 'Finsko',
                    FR: 'Francii',
                    GB: 'Velkou Británii',
                    GR: 'Řecko',
                    EL: 'Řecko',
                    HU: 'Maďarsko',
                    HR: 'Chorvatsko',
                    IE: 'Irsko',
                    IS: 'Island',
                    IT: 'Itálii',
                    LT: 'Litvu',
                    LU: 'Lucembursko',
                    LV: 'Lotyšsko',
                    MT: 'Maltu',
                    NL: 'Nizozemí',
                    NO: 'Norsko',
                    PL: 'Polsko',
                    PT: 'Portugalsko',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    RS: 'Srbsko',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    VE: 'Venezuelu',
                    ZA: 'Jižní Afriku'
                }
            },
            vin: {
                'default': 'Prosím zadejte správné VIN číslo'
            },
            zipCode: {
                'default': 'Prosím zadejte správné PSČ',
                country: 'Prosím zadejte správné PSČ pro %s',
                countries: {
                    AT: 'Rakousko',
                    BG: 'Bulharsko',
                    BR: 'Brazílie',
                    CA: 'Kanadu',
                    CH: 'Švýcarsko',
                    CZ: 'Českou Republiku',
                    DE: 'Německo',
                    DK: 'Dánsko',
                    ES: 'Španělsko',
                    FR: 'Francii',
                    GB: 'Velkou Británii',
                    IE: 'Irsko',
                    IN: 'Indie',
                    IT: 'Itálii',
                    MA: 'Maroko',
                    NL: 'Nizozemí',
                    PL: 'Polsko',
                    PT: 'Portugalsko',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    SE: 'Švédsko',
                    SG: 'Singapur',
                    SK: 'Slovensko',
                    US: 'Spojené Státy Americké'
                }
            }
        }
    });
}(window.jQuery));
(function($) {
    /**
     * Danish language package
     * Translated by @Djarnis
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'da_DK': {
            base64: {
                'default': 'Udfyld venligst dette felt med en gyldig base64-kodet værdi'
            },
            between: {
                'default': 'Udfyld venligst dette felt med en værdi mellem %s og %s',
                notInclusive: 'Indtast venligst kun en værdi mellem %s og %s'
            },
            bic: {
                'default': 'Udfyld venligst dette felt med et gyldigt BIC-nummer'
            },
            callback: {
                'default': 'Udfyld venligst dette felt med en gyldig værdi'
            },
            choice: {
                'default': 'Udfyld venligst dette felt med en gyldig værdi',
                less: 'Vælg venligst mindst %s valgmuligheder',
                more: 'Vælg venligst højst %s valgmuligheder',
                between: 'Vælg venligst %s - %s valgmuligheder'
            },
            color: {
                'default': 'Udfyld venligst dette felt med en gyldig farve'
            },
            creditCard: {
                'default': 'Udfyld venligst dette felt med et gyldigt kreditkort-nummer'
            },
            cusip: {
                'default': 'Udfyld venligst dette felt med et gyldigt CUSIP-nummer'
            },
            cvv: {
                'default': 'Udfyld venligst dette felt med et gyldigt CVV-nummer'
            },
            date: {
                'default': 'Udfyld venligst dette felt med en gyldig dato',
                min: 'Angiv venligst en dato efter %s',
                max: 'Angiv venligst en dato før %s',
                range: 'Angiv venligst en dato mellem %s - %s'
            },
            different: {
                'default': 'Udfyld venligst dette felt med en anden værdi'
            },
            digits: {
                'default': 'Indtast venligst kun cifre'
            },
            ean: {
                'default': 'Udfyld venligst dette felt med et gyldigt EAN-nummer'
            },
            ein: {
                'default': 'Udfyld venligst dette felt med et gyldigt EIN-nummer'
            },
            emailAddress: {
                'default': 'Udfyld venligst dette felt med en gyldig e-mail-adresse'
            },
            file: {
                'default': 'Vælg venligst en gyldig fil'
            },
            greaterThan: {
                'default': 'Udfyld venligst dette felt med en værdi større eller lig med %s',
                notInclusive: 'Udfyld venligst dette felt med en værdi større end %s'
            },
            grid: {
                'default': 'Udfyld venligst dette felt med et gyldigt GRId-nummer'
            },
            hex: {
                'default': 'Udfyld venligst dette felt med et gyldigt hexadecimal-nummer'
            },
            iban: {
                'default': 'Udfyld venligst dette felt med et gyldigt IBAN-nummer',
                country: 'Udfyld venligst dette felt med et gyldigt IBAN-nummer i %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'De Forenede Arabiske Emirater',
                    AL: 'Albanien',
                    AO: 'Angola',
                    AT: 'Østrig',
                    AZ: 'Aserbajdsjan',
                    BA: 'Bosnien-Hercegovina',
                    BE: 'Belgien',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarien',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CI: 'Elfenbenskysten',
                    CM: 'Cameroun',
                    CR: 'Costa Rica',
                    CV: 'Kap Verde',
                    CY: 'Cypern',
                    CZ: 'Tjekkiet',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    DO: 'Den Dominikanske Republik',
                    DZ: 'Algeriet',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    FO: 'Færøerne',
                    FR: 'Frankrig',
                    GB: 'Storbritannien',
                    GE: 'Georgien',
                    GI: 'Gibraltar',
                    GL: 'Grønland',
                    GR: 'Grækenland',
                    GT: 'Guatemala',
                    HR: 'Kroatien',
                    HU: 'Ungarn',
                    IE: 'Irland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Island',
                    IT: 'Italien',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kasakhstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Litauen',
                    LU: 'Luxembourg',
                    LV: 'Letland',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagaskar',
                    MK: 'Makedonien',
                    ML: 'Mali',
                    MR: 'Mauretanien',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Holland',
                    NO: 'Norge',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palæstina',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Rumænien',
                    RS: 'Serbien',
                    SA: 'Saudi-Arabien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakiet',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Østtimor',
                    TN: 'Tunesien',
                    TR: 'Tyrkiet',
                    VG: 'Britiske Jomfruøer',
                    XK: 'Kosovo'
                }
            },
            id: {
                'default': 'Udfyld venligst dette felt med et gyldigt identifikations-nummer',
                country: 'Udfyld venligst dette felt med et gyldigt identifikations-nummer i %s',
                countries: {
                    BA: 'Bosnien-Hercegovina',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CL: 'Chile',
                    CN: 'Kina',
                    CZ: 'Tjekkiet',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    LT: 'Litauen',
                    LV: 'Letland',
                    ME: 'Montenegro',
                    MK: 'Makedonien',
                    NL: 'Holland',
                    PL: 'Polen',
                    RO: 'Rumænien',
                    RS: 'Serbien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakiet',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    TR: 'Tyrkiet',
                    ZA: 'Sydafrika'
                }
            },
            identical: {
                'default': 'Udfyld venligst dette felt med den samme værdi'
            },
            imei: {
                'default': 'Udfyld venligst dette felt med et gyldigt IMEI-nummer'
            },
            imo: {
                'default': 'Udfyld venligst dette felt med et gyldigt IMO-nummer'
            },
            integer: {
                'default': 'Udfyld venligst dette felt med et gyldigt tal'
            },
            ip: {
                'default': 'Udfyld venligst dette felt med en gyldig IP adresse',
                ipv4: 'Udfyld venligst dette felt med en gyldig IPv4 adresse',
                ipv6: 'Udfyld venligst dette felt med en gyldig IPv6 adresse'
            },
            isbn: {
                'default': 'Udfyld venligst dette felt med et gyldigt ISBN-nummer'
            },
            isin: {
                'default': 'Udfyld venligst dette felt med et gyldigt ISIN-nummer'
            },
            ismn: {
                'default': 'Udfyld venligst dette felt med et gyldigt ISMN-nummer'
            },
            issn: {
                'default': 'Udfyld venligst dette felt med et gyldigt ISSN-nummer'
            },
            lessThan: {
                'default': 'Udfyld venligst dette felt med en værdi mindre eller lig med %s',
                notInclusive: 'Udfyld venligst dette felt med en værdi mindre end %s'
            },
            mac: {
                'default': 'Udfyld venligst dette felt med en gyldig MAC adresse'
            },
            meid: {
                'default': 'Udfyld venligst dette felt med et gyldigt MEID-nummer'
            },
            notEmpty: {
                'default': 'Udfyld venligst dette felt'
            },
            numeric: {
                'default': 'Udfyld venligst dette felt med et gyldigt flydende decimaltal'
            },
            phone: {
                'default': 'Udfyld venligst dette felt med et gyldigt telefonnummer',
                country: 'Udfyld venligst dette felt med et gyldigt telefonnummer i %s',
                countries: {
                    AE: 'De Forenede Arabiske Emirater',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CN: 'Kina',
                    CZ: 'Tjekkiet',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spanien',
                    FR: 'Frankrig',
                    GB: 'Storbritannien',
                    IN: 'Indien',
                    MA: 'Marokko',
                    NL: 'Holland',
                    PK: 'Pakistan',
                    RO: 'Rumænien',
                    RU: 'Rusland',
                    SK: 'Slovakiet',
                    TH: 'Thailand',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Udfyld venligst dette felt med en gyldig værdi'
            },
            regexp: {
                'default': 'Udfyld venligst dette felt med en værdi der matcher mønsteret'
            },
            remote: {
                'default': 'Udfyld venligst dette felt med en gyldig værdi'
            },
            rtn: {
                'default': 'Udfyld venligst dette felt med et gyldigt RTN-nummer'
            },
            sedol: {
                'default': 'Udfyld venligst dette felt med et gyldigt SEDOL-nummer'
            },
            siren: {
                'default': 'Udfyld venligst dette felt med et gyldigt SIREN-nummer'
            },
            siret: {
                'default': 'Udfyld venligst dette felt med et gyldigt SIRET-nummer'
            },
            step: {
                'default': 'Udfyld venligst dette felt med et gyldigt trin af %s'
            },
            stringCase: {
                'default': 'Udfyld venligst kun dette felt med små bogstaver',
                upper: 'Udfyld venligst kun dette felt med store bogstaver'
            },
            stringLength: {
                'default': 'Udfyld venligst dette felt med en værdi af gyldig længde',
                less: 'Udfyld venligst dette felt med mindre end %s tegn',
                more: 'Udfyld venligst dette felt med mere end %s tegn',
                between: 'Udfyld venligst dette felt med en værdi mellem %s og %s tegn'
            },
            uri: {
                'default': 'Udfyld venligst dette felt med en gyldig URI'
            },
            uuid: {
                'default': 'Udfyld venligst dette felt med et gyldigt UUID-nummer',
                version: 'Udfyld venligst dette felt med en gyldig UUID version %s-nummer'
            },
            vat: {
                'default': 'Udfyld venligst dette felt med et gyldig moms-nummer',
                country: 'Udfyld venligst dette felt med et gyldigt moms-nummer i %s',
                countries: {
                    AT: 'Østrig',
                    BE: 'Belgien',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CY: 'Cypern',
                    CZ: 'Tjekkiet',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    FR: 'Frankrig',
                    GB: 'Storbritannien',
                    GR: 'Grækenland',
                    EL: 'Grækenland',
                    HU: 'Ungarn',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    IT: 'Italien',
                    LT: 'Litauen',
                    LU: 'Luxembourg',
                    LV: 'Letland',
                    MT: 'Malta',
                    NL: 'Holland',
                    NO: 'Norge',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumænien',
                    RU: 'Rusland',
                    RS: 'Serbien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakiet',
                    VE: 'Venezuela',
                    ZA: 'Sydafrika'
                }
            },
            vin: {
                'default': 'Udfyld venligst dette felt med et gyldigt VIN-nummer'
            },
            zipCode: {
                'default': 'Udfyld venligst dette felt med et gyldigt postnummer',
                country: 'Udfyld venligst dette felt med et gyldigt postnummer i %s',
                countries: {
                    AT: 'Østrig',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CA: 'Canada',
                    CH: 'Schweiz',
                    CZ: 'Tjekkiet',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spanien',
                    FR: 'Frankrig',
                    GB: 'Storbritannien',
                    IE: 'Irland',
                    IN: 'Indien',
                    IT: 'Italien',
                    MA: 'Marokko',
                    NL: 'Holland',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumænien',
                    RU: 'Rusland',
                    SE: 'Sverige',
                    SG: 'Singapore',
                    SK: 'Slovakiet',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * German language package
     * Translated by @logemann
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'de_DE': {
            base64: {
                'default': 'Bitte eine Base64 Kodierung eingeben'
            },
            between: {
                'default': 'Bitte einen Wert zwischen %s und %s eingeben',
                notInclusive: 'Bitte einen Wert zwischen %s und %s (strictly) eingeben'
            },
            bic: {
                'default': 'Bitte gültige BIC Nummer eingeben'
            },
            callback: {
                'default': 'Bitte einen gültigen Wert eingeben'
            },
            choice: {
                'default': 'Bitte einen gültigen Wert eingeben',
                less: 'Bitte mindestens %s Werte eingeben',
                more: 'Bitte maximal %s Werte eingeben',
                between: 'Zwischen %s - %s Werten wählen'
            },
            color: {
                'default': 'Bitte gültige Farbe eingeben'
            },
            creditCard: {
                'default': 'Bitte gültige Kreditkartennr. eingeben'
            },
            cusip: {
                'default': 'Bitte gültige CUSIP Nummer eingeben'
            },
            cvv: {
                'default': 'Bitte gültige CVV Nummer eingeben'
            },
            date: {
                'default': 'Bitte gültiges Datum eingeben',
                min: 'Bitte gültiges Datum nach %s',
                max: 'Bitte gültiges Datum vor %s',
                range: 'Bitte gültiges Datum im zwischen %s - %s'
            },
            different: {
                'default': 'Bitte anderen Wert eingeben'
            },
            digits: {
                'default': 'Bitte Zahlen eingeben'
            },
            ean: {
                'default': 'Bitte gültige EAN Nummer eingeben'
            },
            ein: {
                'default': 'Bitte gültige EIN Nummer eingeben'
            },
            emailAddress: {
                'default': 'Bitte gültige Emailadresse eingeben'
            },
            file: {
                'default': 'Bitte gültiges File eingeben'
            },
            greaterThan: {
                'default': 'Bitte Wert größer gleich %s eingeben',
                notInclusive: 'Bitte Wert größer als %s eingeben'
            },
            grid: {
                'default': 'Bitte gültige GRId Nummer eingeben'
            },
            hex: {
                'default': 'Bitte gültigen Hexadezimalwert eingeben'
            },
            iban: {
                'default': 'Bitte eine gültige IBAN Nummer eingeben',
                country: 'Bitte eine gültige IBAN Nummer für %s eingeben',
                countries: {
                    AD: 'Andorra',
                    AE: 'Vereinigte Arabische Emirate',
                    AL: 'Albanien',
                    AO: 'Angola',
                    AT: 'Österreich',
                    AZ: 'Aserbaidschan',
                    BA: 'Bosnien und Herzegowina',
                    BE: 'Belgien',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarien',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CI: 'Elfenbeinküste',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Kap Verde',
                    CY: 'Zypern',
                    CZ: 'Tschechische',
                    DE: 'Deutschland',
                    DK: 'Dänemark',
                    DO: 'Dominikanische Republik',
                    DZ: 'Algerien',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finnland',
                    FO: 'Färöer-Inseln',
                    FR: 'Frankreich',
                    GB: 'Vereinigtes Königreich',
                    GE: 'Georgien',
                    GI: 'Gibraltar',
                    GL: 'Grönland',
                    GR: 'Griechenland',
                    GT: 'Guatemala',
                    HR: 'Croatia',
                    HU: 'Ungarn',
                    IE: 'Irland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Island',
                    IT: 'Italien',
                    JO: 'Jordanien',
                    KW: 'Kuwait',
                    KZ: 'Kasachstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Litauen',
                    LU: 'Luxemburg',
                    LV: 'Lettland',
                    MC: 'Monaco',
                    MD: 'Moldawien',
                    ME: 'Montenegro',
                    MG: 'Madagaskar',
                    MK: 'Mazedonien',
                    ML: 'Mali',
                    MR: 'Mauretanien',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mosambik',
                    NL: 'Niederlande',
                    NO: 'Norwegen',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palästina',
                    PT: 'Portugal',
                    QA: 'Katar',
                    RO: 'Rumänien',
                    RS: 'Serbien',
                    SA: 'Saudi-Arabien',
                    SE: 'Schweden',
                    SI: 'Slowenien',
                    SK: 'Slowakei',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Ost-Timor',
                    TN: 'Tunesien',
                    TR: 'Türkei',
                    VG: 'Jungferninseln',
                    XK: 'Republik Kosovo'
                }
            },
            id: {
                'default': 'Bitte gültige Identifikationsnnummer eingeben',
                country: 'Bitte gültige Identifikationsnummer für %s eingeben',
                countries: {
                    BA: 'Bosnien und Herzegowina',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'Tschechische',
                    DK: 'Dänemark',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finnland',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    LT: 'Litauen',
                    LV: 'Lettland',
                    ME: 'Montenegro',
                    MK: 'Mazedonien',
                    NL: 'Niederlande',
                    PL: 'Polen',
                    RO: 'Rumänien',
                    RS: 'Serbien',
                    SE: 'Schweden',
                    SI: 'Slowenien',
                    SK: 'Slowakei',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    TR: 'Türkei',
                    ZA: 'Südafrika'
                }
            },
            identical: {
                'default': 'Bitte gleichen Wert eingeben'
            },
            imei: {
                'default': 'Bitte gültige IMEI Nummer eingeben'
            },
            imo: {
                'default': 'Bitte gültige IMO Nummer eingeben'
            },
            integer: {
                'default': 'Bitte Zahl eingeben'
            },
            ip: {
                'default': 'Bitte  gültige IP-Adresse eingeben',
                ipv4: 'Bitte  gültige IPv4 Adresse eingeben',
                ipv6: 'Bitte  gültige IPv6 Adresse eingeben'
            },
            isbn: {
                'default': 'Bitte gültige ISBN Nummer eingeben'
            },
            isin: {
                'default': 'Bitte gültige ISIN Nummer eingeben'
            },
            ismn: {
                'default': 'Bitte gültige ISMN Nummer eingeben'
            },
            issn: {
                'default': 'Bitte gültige ISSN Nummer eingeben'
            },
            lessThan: {
                'default': 'Bitte Wert kleiner gleich %s eingeben',
                notInclusive: 'Bitte Wert kleiner als %s eingeben'
            },
            mac: {
                'default': 'Bitte gültige MAC Adresse eingeben'
            },
            meid: {
                'default': 'Bitte gültige MEID Nummer eingeben'
            },
            notEmpty: {
                'default': 'Bitte Wert eingeben'
            },
            numeric: {
                'default': 'Bitte Nummer eingeben'
            },
            phone: {
                'default': 'Bitte gültige Telefonnummer eingeben',
                country: 'Bitte valide Telefonnummer für %s eingeben',
                countries: {
                    AE: 'Vereinigte Arabische Emirate',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CN: 'China',
                    CZ: 'Tschechische',
                    DE: 'Deutschland',
                    DK: 'Dänemark',
                    ES: 'Spanien',
                    FR: 'Frankreich',
                    GB: 'Vereinigtes Königreich',
                    IN: 'Indien',
                    MA: 'Marokko',
                    NL: 'Niederlande',
                    PK: 'Pakistan',
                    RO: 'Rumänien',
                    RU: 'Russland',
                    SK: 'Slowakei',
                    TH: 'Thailand',
                    US: 'Vereinigte Staaten von Amerika',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Bitte einen gültigen Wert eingeben'
            },
            regexp: {
                'default': 'Bitte Wert eingeben, der der Maske entspricht'
            },
            remote: {
                'default': 'Bitte einen gültigen Wert eingeben'
            },
            rtn: {
                'default': 'Bitte gültige RTN Nummer eingeben'
            },
            sedol: {
                'default': 'Bitte gültige SEDOL Nummer eingeben'
            },
            siren: {
                'default': 'Bitte gültige SIREN Nummer eingeben'
            },
            siret: {
                'default': 'Bitte gültige SIRET Nummer eingeben'
            },
            step: {
                'default': 'Bitte einen gültigen Schritt von %s eingeben'
            },
            stringCase: {
                'default': 'Bitte nur Kleinbuchstaben eingeben',
                upper: 'Bitte nur Großbuchstaben eingeben'
            },
            stringLength: {
                'default': 'Bitte Wert mit gültiger Länge eingeben',
                less: 'Bitte weniger als %s Zeichen eingeben',
                more: 'Bitte mehr als %s Zeichen eingeben',
                between: 'Bitte Wert zwischen %s und %s Zeichen eingeben'
            },
            uri: {
                'default': 'Bitte gültige URI eingeben'
            },
            uuid: {
                'default': 'Bitte gültige UUID Nummer eingeben',
                version: 'Bitte gültige UUID Version %s eingeben'
            },
            vat: {
                'default': 'Bitte gültige VAT Nummer eingeben',
                country: 'Bitte gültige VAT Nummer für %s eingeben',
                countries: {
                    AT: 'Österreich',
                    BE: 'Belgien',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CY: 'Zypern',
                    CZ: 'Tschechische',
                    DE: 'Deutschland',
                    DK: 'Dänemark',
                    EE: 'Estland',
                    ES: 'Spanisch',
                    FI: 'Finnland',
                    FR: 'Frankreich',
                    GB: 'Vereinigtes Königreich',
                    GR: 'Griechenland',
                    EL: 'Griechenland',
                    HU: 'Ungarn',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    IT: 'Italien',
                    LT: 'Litauen',
                    LU: 'Luxemburg',
                    LV: 'Lettland',
                    MT: 'Malta',
                    NL: 'Niederlande',
                    NO: 'Norwegen',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumänien',
                    RU: 'Russland',
                    RS: 'Serbien',
                    SE: 'Schweden',
                    SI: 'Slowenien',
                    SK: 'Slowakei',
                    VE: 'Venezuela',
                    ZA: 'Südafrika'
                }
            },
            vin: {
                'default': 'Bitte gültige VIN Nummer eingeben'
            },
            zipCode: {
                'default': 'Bitte gültige PLZ eingeben',
                country: 'Bitte gültige Postleitzahl für %s eingeben',
                countries: {
                    AT: 'Österreich',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CA: 'Kanada',
                    CH: 'Schweiz',
                    CZ: 'Tschechische',
                    DE: 'Deutschland',
                    DK: 'Dänemark',
                    ES: 'Spanien',
                    FR: 'Frankreich',
                    GB: 'Vereinigtes Königreich',
                    IE: 'Irland',
                    IN: 'Indien',
                    IT: 'Italien',
                    MA: 'Marokko',
                    NL: 'Niederlande',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumänien',
                    RU: 'Russland',
                    SE: 'Schweden',
                    SG: 'Singapur',
                    SK: 'Slowakei',
                    US: 'Vereinigte Staaten von Amerika'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Greek language package
     * Translated by @pRieStaKos
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'el_GR': {
            base64: {
                'default': 'Παρακαλώ εισάγετε μια έγκυρη κωδικοποίηση base 64'
            },
            between: {
                'default': 'Παρακαλώ εισάγετε μια τιμή μεταξύ %s και %s',
                notInclusive: 'Παρακαλώ εισάγετε μια τιμή μεταξύ %s και %s αυστηρά'
            },
            bic: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό BIC'
            },
            callback: {
                'default': 'Παρακαλώ εισάγετε μια έγκυρη τιμή'
            },
            choice: {
                'default': 'Παρακαλώ εισάγετε μια έγκυρη τιμή',
                less: 'Παρακαλώ επιλέξτε %s επιλογές στο ελάχιστο',
                more: 'Παρακαλώ επιλέξτε %s επιλογές στο μέγιστο',
                between: 'Παρακαλώ επιλέξτε %s - %s επιλογές'
            },
            color: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο χρώμα'
            },
            creditCard: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό πιστωτικής κάρτας'
            },
            cusip: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό CUSIP'
            },
            cvv: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό CVV'
            },
            date: {
                'default': 'Παρακαλώ εισάγετε μια έγκυρη ημερομηνία',
                min: 'Παρακαλώ εισάγετε ημερομηνία μετά από %s',
                max: 'Παρακαλώ εισάγετε ημερομηνία πριν από %s',
                range: 'Παρακαλώ εισάγετε ημερομηνία μεταξύ %s - %s'
            },
            different: {
                'default': 'Παρακαλώ εισάγετε μια διαφορετική τιμή'
            },
            digits: {
                'default': 'Παρακαλώ εισάγετε μόνο ψηφία'
            },
            ean: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό EAN'
            },
            ein: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό EIN'
            },
            emailAddress: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο email'
            },
            file: {
                'default': 'Παρακαλώ επιλέξτε ένα έγκυρο αρχείο'
            },
            greaterThan: {
                'default': 'Παρακαλώ εισάγετε μια τιμή μεγαλύτερη ή ίση με %s',
                notInclusive: 'Παρακαλώ εισάγετε μια τιμή μεγαλύτερη από %s'
            },
            grid: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό GRId'
            },
            hex: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο δεκαεξαδικό αριθμό'
            },
            iban: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό IBAN',
                country: 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό IBAN στην %s',
                countries: {
                    AD: 'Ανδόρα',
                    AE: 'Ηνωμένα Αραβικά Εμιράτα',
                    AL: 'Αλβανία',
                    AO: 'Αγκόλα',
                    AT: 'Αυστρία',
                    AZ: 'Αζερμπαϊτζάν',
                    BA: 'Βοσνία και Ερζεγοβίνη',
                    BE: 'Βέλγιο',
                    BF: 'Μπουρκίνα Φάσο',
                    BG: 'Βουλγαρία',
                    BH: 'Μπαχρέιν',
                    BI: 'Μπουρούντι',
                    BJ: 'Μπενίν',
                    BR: 'Βραζιλία',
                    CH: 'Ελβετία',
                    CI: 'Ακτή Ελεφαντοστού',
                    CM: 'Καμερούν',
                    CR: 'Κόστα Ρίκα',
                    CV: 'Cape Verde',
                    CY: 'Κύπρος',
                    CZ: 'Δημοκρατία της Τσεχίας',
                    DE: 'Γερμανία',
                    DK: 'Δανία',
                    DO: 'Δομινικανή Δημοκρατία',
                    DZ: 'Αλγερία',
                    EE: 'Εσθονία',
                    ES: 'Ισπανία',
                    FI: 'Φινλανδία',
                    FO: 'Νησιά Φερόε',
                    FR: 'Γαλλία',
                    GB: 'Ηνωμένο Βασίλειο',
                    GE: 'Γεωργία',
                    GI: 'Γιβραλτάρ',
                    GL: 'Γροιλανδία',
                    GR: 'Ελλάδα',
                    GT: 'Γουατεμάλα',
                    HR: 'Κροατία',
                    HU: 'Ουγγαρία',
                    IE: 'Ιρλανδία',
                    IL: 'Ισραήλ',
                    IR: 'Ιράν',
                    IS: 'Ισλανδία',
                    IT: 'Ιταλία',
                    JO: 'Ιορδανία',
                    KW: 'Κουβέιτ',
                    KZ: 'Καζακστάν',
                    LB: 'Λίβανος',
                    LI: 'Λιχτενστάιν',
                    LT: 'Λιθουανία',
                    LU: 'Λουξεμβούργο',
                    LV: 'Λετονία',
                    MC: 'Μονακό',
                    MD: 'Μολδαβία',
                    ME: 'Μαυροβούνιο',
                    MG: 'Μαδαγασκάρη',
                    MK: 'πΓΔΜ',
                    ML: 'Μάλι',
                    MR: 'Μαυριτανία',
                    MT: 'Μάλτα',
                    MU: 'Μαυρίκιος',
                    MZ: 'Μοζαμβίκη',
                    NL: 'Ολλανδία',
                    NO: 'Νορβηγία',
                    PK: 'Πακιστάν',
                    PL: 'Πολωνία',
                    PS: 'Παλαιστίνη',
                    PT: 'Πορτογαλία',
                    QA: 'Κατάρ',
                    RO: 'Ρουμανία',
                    RS: 'Σερβία',
                    SA: 'Σαουδική Αραβία',
                    SE: 'Σουηδία',
                    SI: 'Σλοβενία',
                    SK: 'Σλοβακία',
                    SM: 'Σαν Μαρίνο',
                    SN: 'Σενεγάλη',
                    TL: 'Ανατολικό Τιμόρ',
                    TN: 'Τυνησία',
                    TR: 'Τουρκία',
                    VG: 'Βρετανικές Παρθένοι Νήσοι',
                    XK: 'Δημοκρατία του Κοσσυφοπεδίου'
                }
            },
            id: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ταυτότητας',
                country: 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ταυτότητας στην %s',
                countries: {
                    BA: 'Βοσνία και Ερζεγοβίνη',
                    BG: 'Βουλγαρία',
                    BR: 'Βραζιλία',
                    CH: 'Ελβετία',
                    CL: 'Χιλή',
                    CN: 'Κίνα',
                    CZ: 'Δημοκρατία της Τσεχίας',
                    DK: 'Δανία',
                    EE: 'Εσθονία',
                    ES: 'Ισπανία',
                    FI: 'Φινλανδία',
                    HR: 'Κροατία',
                    IE: 'Ιρλανδία',
                    IS: 'Ισλανδία',
                    LT: 'Λιθουανία',
                    LV: 'Λετονία',
                    ME: 'Μαυροβούνιο',
                    MK: 'Μακεδονία',
                    NL: 'Ολλανδία',
                    PL: 'Πολωνία',
                    RO: 'Ρουμανία',
                    RS: 'Σερβία',
                    SE: 'Σουηδία',
                    SI: 'Σλοβενία',
                    SK: 'Σλοβακία',
                    SM: 'Σαν Μαρίνο',
                    TH: 'Ταϊλάνδη',
                    TR: 'Τουρκία',
                    ZA: 'Νότια Αφρική'
                }
            },
            identical: {
                'default': 'Παρακαλώ εισάγετε την ίδια τιμή'
            },
            imei: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό IMEI'
            },
            imo: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό IMO'
            },
            integer: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό'
            },
            ip: {
                'default': 'Παρακαλώ εισάγετε μία έγκυρη IP διεύθυνση',
                ipv4: 'Παρακαλώ εισάγετε μία έγκυρη διεύθυνση IPv4',
                ipv6: 'Παρακαλώ εισάγετε μία έγκυρη διεύθυνση IPv6'
            },
            isbn: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ISBN'
            },
            isin: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ISIN'
            },
            ismn: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ISMN'
            },
            issn: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ISSN'
            },
            lessThan: {
                'default': 'Παρακαλώ εισάγετε μια τιμή μικρότερη ή ίση με %s',
                notInclusive: 'Παρακαλώ εισάγετε μια τιμή μικρότερη από %s'
            },
            mac: {
                'default': 'Παρακαλώ εισάγετε μία έγκυρη MAC διεύθυνση'
            },
            meid: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό MEID'
            },
            notEmpty: {
                'default': 'Παρακαλώ εισάγετε μια τιμή'
            },
            numeric: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο δεκαδικό αριθμό'
            },
            phone: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό τηλεφώνου',
                country: 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό τηλεφώνου στην %s',
                countries: {
                    AE: 'Ηνωμένα Αραβικά Εμιράτα',
                    BG: 'Βουλγαρία',
                    BR: 'Βραζιλία',
                    CN: 'Κίνα',
                    CZ: 'Δημοκρατία της Τσεχίας',
                    DE: 'Γερμανία',
                    DK: 'Δανία',
                    ES: 'Ισπανία',
                    FR: 'Γαλλία',
                    GB: 'Ηνωμένο Βασίλειο',
                    IN: 'Ινδία',
                    MA: 'Μαρόκο',
                    NL: 'Ολλανδία',
                    PK: 'Πακιστάν',
                    RO: 'Ρουμανία',
                    RU: 'Ρωσία',
                    SK: 'Σλοβακία',
                    TH: 'Ταϊλάνδη',
                    US: 'ΗΠΑ',
                    VE: 'Βενεζουέλα'
                }
            },
            promise: {
                'default': 'Παρακαλώ εισάγετε μια έγκυρη τιμή'
            },
            regexp: {
                'default': 'Παρακαλώ εισάγετε μια τιμή όπου ταιριάζει στο υπόδειγμα'
            },
            remote: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό'
            },
            rtn: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό RTN'
            },
            sedol: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό SEDOL'
            },
            siren: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό SIREN'
            },
            siret: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό SIRET'
            },
            step: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο βήμα από %s'
            },
            stringCase: {
                'default': 'Παρακαλώ εισάγετε μόνο πεζούς χαρακτήρες',
                upper: 'Παρακαλώ εισάγετε μόνο κεφαλαία γράμματα'
            },
            stringLength: {
                'default': 'Παρακαλώ εισάγετε μια τιμή με έγκυρο μήκος',
                less: 'Παρακαλούμε εισάγετε λιγότερο από %s χαρακτήρες',
                more: 'Παρακαλούμε εισάγετε περισσότερο από %s χαρακτήρες',
                between: 'Παρακαλούμε, εισάγετε τιμή μεταξύ %s και %s μήκος χαρακτήρων'
            },
            uri: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο URI'
            },
            uuid: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό UUID',
                version: 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό έκδοσης %s'
            },
            vat: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ΦΠΑ',
                country: 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ΦΠΑ στην %s',
                countries: {
                    AT: 'Αυστρία',
                    BE: 'Βέλγιο',
                    BG: 'Βουλγαρία',
                    BR: 'Βραζιλία',
                    CH: 'Ελβετία',
                    CY: 'Κύπρος',
                    CZ: 'Δημοκρατία της Τσεχίας',
                    DE: 'Γερμανία',
                    DK: 'Δανία',
                    EE: 'Εσθονία',
                    ES: 'Ισπανία',
                    FI: 'Φινλανδία',
                    FR: 'Γαλλία',
                    GB: 'Ηνωμένο Βασίλειο',
                    GR: 'Ελλάδα',
                    EL: 'Ελλάδα',
                    HU: 'Ουγγαρία',
                    HR: 'Κροατία',
                    IE: 'Ιρλανδία',
                    IS: 'Ισλανδία',
                    IT: 'Ιταλία',
                    LT: 'Λιθουανία',
                    LU: 'Λουξεμβούργο',
                    LV: 'Λετονία',
                    MT: 'Μάλτα',
                    NL: 'Ολλανδία',
                    NO: 'Νορβηγία',
                    PL: 'Πολωνία',
                    PT: 'Πορτογαλία',
                    RO: 'Ρουμανία',
                    RU: 'Ρωσία',
                    RS: 'Σερβία',
                    SE: 'Σουηδία',
                    SI: 'Σλοβενία',
                    SK: 'Σλοβακία',
                    VE: 'Βενεζουέλα',
                    ZA: 'Νότια Αφρική'
                }
            },
            vin: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό VIN'
            },
            zipCode: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο ταχυδρομικό κώδικα',
                country: 'Παρακαλώ εισάγετε ένα έγκυρο ταχυδρομικό κώδικα στην %s',
                countries: {
                    AT: 'Αυστρία',
                    BG: 'Βουλγαρία',
                    BR: 'Βραζιλία',
                    CA: 'Καναδάς',
                    CH: 'Ελβετία',
                    CZ: 'Δημοκρατία της Τσεχίας',
                    DE: 'Γερμανία',
                    DK: 'Δανία',
                    ES: 'Ισπανία',
                    FR: 'Γαλλία',
                    GB: 'Ηνωμένο Βασίλειο',
                    IE: 'Ιρλανδία',
                    IN: 'Ινδία',
                    IT: 'Ιταλία',
                    MA: 'Μαρόκο',
                    NL: 'Ολλανδία',
                    PL: 'Πολωνία',
                    PT: 'Πορτογαλία',
                    RO: 'Ρουμανία',
                    RU: 'Ρωσία',
                    SE: 'Σουηδία',
                    SG: 'Σιγκαπούρη',
                    SK: 'Σλοβακία',
                    US: 'ΗΠΑ'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Default English package. It's included in the dist, so you do NOT need to include it to your head tag
     * The only reason I put it here is that you can clone it, and translate it into your language
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'en_US': {
            base64: {
                'default': 'Please enter a valid base 64 encoded'
            },
            between: {
                'default': 'Please enter a value between %s and %s',
                notInclusive: 'Please enter a value between %s and %s strictly'
            },
            bic: {
                'default': 'Please enter a valid BIC number'
            },
            callback: {
                'default': 'Please enter a valid value'
            },
            choice: {
                'default': 'Please enter a valid value',
                less: 'Please choose %s options at minimum',
                more: 'Please choose %s options at maximum',
                between: 'Please choose %s - %s options'
            },
            color: {
                'default': 'Please enter a valid color'
            },
            creditCard: {
                'default': 'Please enter a valid credit card number'
            },
            cusip: {
                'default': 'Please enter a valid CUSIP number'
            },
            cvv: {
                'default': 'Please enter a valid CVV number'
            },
            date: {
                'default': 'Please enter a valid date',
                min: 'Please enter a date after %s',
                max: 'Please enter a date before %s',
                range: 'Please enter a date in the range %s - %s'
            },
            different: {
                'default': 'Please enter a different value'
            },
            digits: {
                'default': 'Please enter only digits'
            },
            ean: {
                'default': 'Please enter a valid EAN number'
            },
            ein: {
                'default': 'Please enter a valid EIN number'
            },
            emailAddress: {
                'default': 'Please enter a valid email address'
            },
            file: {
                'default': 'Please choose a valid file'
            },
            greaterThan: {
                'default': 'Please enter a value greater than or equal to %s',
                notInclusive: 'Please enter a value greater than %s'
            },
            grid: {
                'default': 'Please enter a valid GRId number'
            },
            hex: {
                'default': 'Please enter a valid hexadecimal number'
            },
            iban: {
                'default': 'Please enter a valid IBAN number',
                country: 'Please enter a valid IBAN number in %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'United Arab Emirates',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia and Herzegovina',
                    BE: 'Belgium',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CI: 'Ivory Coast',
                    CM: 'Cameroon',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    DO: 'Dominican Republic',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Spain',
                    FI: 'Finland',
                    FO: 'Faroe Islands',
                    FR: 'France',
                    GB: 'United Kingdom',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Greenland',
                    GR: 'Greece',
                    GT: 'Guatemala',
                    HR: 'Croatia',
                    HU: 'Hungary',
                    IE: 'Ireland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Iceland',
                    IT: 'Italy',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Lebanon',
                    LI: 'Liechtenstein',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Netherlands',
                    NO: 'Norway',
                    PK: 'Pakistan',
                    PL: 'Poland',
                    PS: 'Palestine',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Saudi Arabia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'East Timor',
                    TN: 'Tunisia',
                    TR: 'Turkey',
                    VG: 'Virgin Islands, British',
                    XK: 'Republic of Kosovo'
                }
            },
            id: {
                'default': 'Please enter a valid identification number',
                country: 'Please enter a valid identification number in %s',
                countries: {
                    BA: 'Bosnia and Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'Czech Republic',
                    DK: 'Denmark',
                    EE: 'Estonia',
                    ES: 'Spain',
                    FI: 'Finland',
                    HR: 'Croatia',
                    IE: 'Ireland',
                    IS: 'Iceland',
                    LT: 'Lithuania',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Netherlands',
                    PL: 'Poland',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    TR: 'Turkey',
                    ZA: 'South Africa'
                }
            },
            identical: {
                'default': 'Please enter the same value'
            },
            imei: {
                'default': 'Please enter a valid IMEI number'
            },
            imo: {
                'default': 'Please enter a valid IMO number'
            },
            integer: {
                'default': 'Please enter a valid number'
            },
            ip: {
                'default': 'Please enter a valid IP address',
                ipv4: 'Please enter a valid IPv4 address',
                ipv6: 'Please enter a valid IPv6 address'
            },
            isbn: {
                'default': 'Please enter a valid ISBN number'
            },
            isin: {
                'default': 'Please enter a valid ISIN number'
            },
            ismn: {
                'default': 'Please enter a valid ISMN number'
            },
            issn: {
                'default': 'Please enter a valid ISSN number'
            },
            lessThan: {
                'default': 'Please enter a value less than or equal to %s',
                notInclusive: 'Please enter a value less than %s'
            },
            mac: {
                'default': 'Please enter a valid MAC address'
            },
            meid: {
                'default': 'Please enter a valid MEID number'
            },
            notEmpty: {
                'default': 'Please enter a value'
            },
            numeric: {
                'default': 'Please enter a valid float number'
            },
            phone: {
                'default': 'Please enter a valid phone number',
                country: 'Please enter a valid phone number in %s',
                countries: {
                    AE: 'United Arab Emirates',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CN: 'China',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    ES: 'Spain',
                    FR: 'France',
                    GB: 'United Kingdom',
                    IN: 'India',
                    MA: 'Morocco',
                    NL: 'Netherlands',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Russia',
                    SK: 'Slovakia',
                    TH: 'Thailand',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Please enter a valid value'
            },
            regexp: {
                'default': 'Please enter a value matching the pattern'
            },
            remote: {
                'default': 'Please enter a valid value'
            },
            rtn: {
                'default': 'Please enter a valid RTN number'
            },
            sedol: {
                'default': 'Please enter a valid SEDOL number'
            },
            siren: {
                'default': 'Please enter a valid SIREN number'
            },
            siret: {
                'default': 'Please enter a valid SIRET number'
            },
            step: {
                'default': 'Please enter a valid step of %s'
            },
            stringCase: {
                'default': 'Please enter only lowercase characters',
                upper: 'Please enter only uppercase characters'
            },
            stringLength: {
                'default': 'Please enter a value with valid length',
                less: 'Please enter less than %s characters',
                more: 'Please enter more than %s characters',
                between: 'Please enter value between %s and %s characters long'
            },
            uri: {
                'default': 'Please enter a valid URI'
            },
            uuid: {
                'default': 'Please enter a valid UUID number',
                version: 'Please enter a valid UUID version %s number'
            },
            vat: {
                'default': 'Please enter a valid VAT number',
                country: 'Please enter a valid VAT number in %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgium',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CY: 'Cyprus',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    EE: 'Estonia',
                    ES: 'Spain',
                    FI: 'Finland',
                    FR: 'France',
                    GB: 'United Kingdom',
                    GR: 'Greece',
                    EL: 'Greece',
                    HU: 'Hungary',
                    HR: 'Croatia',
                    IE: 'Ireland',
                    IS: 'Iceland',
                    IT: 'Italy',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Netherlands',
                    NO: 'Norway',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russia',
                    RS: 'Serbia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'South Africa'
                }
            },
            vin: {
                'default': 'Please enter a valid VIN number'
            },
            zipCode: {
                'default': 'Please enter a valid postal code',
                country: 'Please enter a valid postal code in %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CA: 'Canada',
                    CH: 'Switzerland',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    ES: 'Spain',
                    FR: 'France',
                    GB: 'United Kingdom',
                    IE: 'Ireland',
                    IN: 'India',
                    IT: 'Italy',
                    MA: 'Morocco',
                    NL: 'Netherlands',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russia',
                    SE: 'Sweden',
                    SG: 'Singapore',
                    SK: 'Slovakia',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Chilean Spanish language package
     * Translated by @marceloampuerop6
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'es_CL': {
            base64: {
                'default': 'Por favor ingrese un valor válido en base 64'
            },
            between: {
                'default': 'Por favor ingrese un valor entre %s y %s',
                notInclusive: 'Por favor ingrese un valor sólo entre %s and %s'
            },
            bic: {
                'default': 'Por favor ingrese un número BIC válido'
            },
            callback: {
                'default': 'Por favor ingrese un valor válido'
            },
            choice: {
                'default': 'Por favor ingrese un valor válido',
                less: 'Por favor elija %s opciones como mínimo',
                more: 'Por favor elija %s optiones como máximo',
                between: 'Por favor elija de %s a %s opciones'
            },
            color: {
                'default': 'Por favor ingrese un color válido'
            },
            creditCard: {
                'default': 'Por favor ingrese un número válido de tarjeta de crédito'
            },
            cusip: {
                'default': 'Por favor ingrese un número CUSIP válido'
            },
            cvv: {
                'default': 'Por favor ingrese un número CVV válido'
            },
            date: {
                'default': 'Por favor ingrese una fecha válida',
                min: 'Por favor ingrese una fecha posterior a %s',
                max: 'Por favor ingrese una fecha anterior a %s',
                range: 'Por favor ingrese una fecha en el rango %s - %s'
            },
            different: {
                'default': 'Por favor ingrese un valor distinto'
            },
            digits: {
                'default': 'Por favor ingrese sólo dígitos'
            },
            ean: {
                'default': 'Por favor ingrese un número EAN válido'
            },
            ein: {
                'default': 'Por favor ingrese un número EIN válido'
            },
            emailAddress: {
                'default': 'Por favor ingrese un email válido'
            },
            file: {
                'default': 'Por favor elija un archivo válido'
            },
            greaterThan: {
                'default': 'Por favor ingrese un valor mayor o igual a %s',
                notInclusive: 'Por favor ingrese un valor mayor que %s'
            },
            grid: {
                'default': 'Por favor ingrese un número GRId válido'
            },
            hex: {
                'default': 'Por favor ingrese un valor hexadecimal válido'
            },
            iban: {
                'default': 'Por favor ingrese un número IBAN válido',
                country: 'Por favor ingrese un número IBAN válido en %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emiratos Árabes Unidos',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaiyán',
                    BA: 'Bosnia-Herzegovina',
                    BE: 'Bélgica',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Baréin',
                    BI: 'Burundi',
                    BJ: 'Benín',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CI: 'Costa de Marfil',
                    CM: 'Camerún',
                    CR: 'Costa Rica',
                    CV: 'Cabo Verde',
                    CY: 'Cyprus',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    DO: 'República Dominicana',
                    DZ: 'Argelia',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    FO: 'Islas Feroe',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlandia',
                    GR: 'Grecia',
                    GT: 'Guatemala',
                    HR: 'Croacia',
                    HU: 'Hungría',
                    IE: 'Irlanda',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islandia',
                    IT: 'Italia',
                    JO: 'Jordania',
                    KW: 'Kuwait',
                    KZ: 'Kazajistán',
                    LB: 'Líbano',
                    LI: 'Liechtenstein',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MC: 'Mónaco',
                    MD: 'Moldavia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Malí',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauricio',
                    MZ: 'Mozambique',
                    NL: 'Países Bajos',
                    NO: 'Noruega',
                    PK: 'Pakistán',
                    PL: 'Poland',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Catar',
                    RO: 'Rumania',
                    RS: 'Serbia',
                    SA: 'Arabia Saudita',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Timor Oriental',
                    TN: 'Túnez',
                    TR: 'Turquía',
                    VG: 'Islas Vírgenes Británicas',
                    XK: 'República de Kosovo'
                }
            },
            id: {
                'default': 'Por favor ingrese un número de identificación válido',
                country: 'Por favor ingrese un número de identificación válido en %s',
                countries: {
                    BA: 'Bosnia Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'República Checa',
                    DK: 'Dinamarca',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    HR: 'Croacia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    LT: 'Lituania',
                    LV: 'Letonia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Países Bajos',
                    PL: 'Poland',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    SM: 'San Marino',
                    TH: 'Tailandia',
                    TR: 'Turquía',
                    ZA: 'Sudáfrica'
                }
            },
            identical: {
                'default': 'Por favor ingrese el mismo valor'
            },
            imei: {
                'default': 'Por favor ingrese un número IMEI válido'
            },
            imo: {
                'default': 'Por favor ingrese un número IMO válido'
            },
            integer: {
                'default': 'Por favor ingrese un número válido'
            },
            ip: {
                'default': 'Por favor ingrese una dirección IP válida',
                ipv4: 'Por favor ingrese una dirección IPv4 válida',
                ipv6: 'Por favor ingrese una dirección IPv6 válida'
            },
            isbn: {
                'default': 'Por favor ingrese un número ISBN válido'
            },
            isin: {
                'default': 'Por favor ingrese un número ISIN válido'
            },
            ismn: {
                'default': 'Por favor ingrese un número ISMN válido'
            },
            issn: {
                'default': 'Por favor ingrese un número ISSN válido'
            },
            lessThan: {
                'default': 'Por favor ingrese un valor menor o igual a %s',
                notInclusive: 'Por favor ingrese un valor menor que %s'
            },
            mac: {
                'default': 'Por favor ingrese una dirección MAC válida'
            },
            meid: {
                'default': 'Por favor ingrese un número MEID válido'
            },
            notEmpty: {
                'default': 'Por favor ingrese un valor'
            },
            numeric: {
                'default': 'Por favor ingrese un número decimal válido'
            },
            phone: {
                'default': 'Por favor ingrese un número válido de teléfono',
                country: 'Por favor ingrese un número válido de teléfono en %s',
                countries: {
                    AE: 'Emiratos Árabes Unidos',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CN: 'China',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    ES: 'España',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    IN: 'India',
                    MA: 'Marruecos',
                    NL: 'Países Bajos',
                    PK: 'Pakistán',
                    RO: 'Rumania',
                    RU: 'Rusa',
                    SK: 'Eslovaquia',
                    TH: 'Tailandia',
                    US: 'Estados Unidos',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Por favor ingrese un valor válido'
            },
            regexp: {
                'default': 'Por favor ingrese un valor que coincida con el patrón'
            },
            remote: {
                'default': 'Por favor ingrese un valor válido'
            },
            rtn: {
                'default': 'Por favor ingrese un número RTN válido'
            },
            sedol: {
                'default': 'Por favor ingrese un número SEDOL válido'
            },
            siren: {
                'default': 'Por favor ingrese un número SIREN válido'
            },
            siret: {
                'default': 'Por favor ingrese un número SIRET válido'
            },
            step: {
                'default': 'Por favor ingrese un paso válido de %s'
            },
            stringCase: {
                'default': 'Por favor ingrese sólo caracteres en minúscula',
                upper: 'Por favor ingrese sólo caracteres en mayúscula'
            },
            stringLength: {
                'default': 'Por favor ingrese un valor con una longitud válida',
                less: 'Por favor ingrese menos de %s caracteres',
                more: 'Por favor ingrese más de %s caracteres',
                between: 'Por favor ingrese un valor con una longitud entre %s y %s caracteres'
            },
            uri: {
                'default': 'Por favor ingresese una URI válida'
            },
            uuid: {
                'default': 'Por favor ingrese un número UUID válido',
                version: 'Por favor ingrese una versión UUID válida para %s'
            },
            vat: {
                'default': 'Por favor ingrese un número VAT válido',
                country: 'Por favor ingrese un número VAT válido en %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Bélgica',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    GR: 'Grecia',
                    EL: 'Grecia',
                    HU: 'Hungría',
                    HR: 'Croacia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    IT: 'Italia',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MT: 'Malta',
                    NL: 'Países Bajos',
                    NO: 'Noruega',
                    PL: 'Polonia',
                    PT: 'Portugal',
                    RO: 'Rumanía',
                    RU: 'Rusa',
                    RS: 'Serbia',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    VE: 'Venezuela',
                    ZA: 'Sudáfrica'
                }
            },
            vin: {
                'default': 'Por favor ingrese un número VIN válido'
            },
            zipCode: {
                'default': 'Por favor ingrese un código postal válido',
                country: 'Por favor ingrese un código postal válido en %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CA: 'Canadá',
                    CH: 'Suiza',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    ES: 'España',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    IE: 'Irlanda',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Marruecos',
                    NL: 'Países Bajos',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Rumanía',
                    RU: 'Rusia',
                    SE: 'Suecia',
                    SG: 'Singapur',
                    SK: 'Eslovaquia',
                    US: 'Estados Unidos'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Spanish language package
     * Translated by @vadail
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'es_ES': {
            base64: {
                'default': 'Por favor introduce un valor válido en base 64'
            },
            between: {
                'default': 'Por favor introduce un valor entre %s y %s',
                notInclusive: 'Por favor introduce un valor sólo entre %s and %s'
            },
            bic: {
                'default': 'Por favor introduce un número BIC válido'
            },
            callback: {
                'default': 'Por favor introduce un valor válido'
            },
            choice: {
                'default': 'Por favor introduce un valor válido',
                less: 'Por favor elija %s opciones como mínimo',
                more: 'Por favor elija %s optiones como máximo',
                between: 'Por favor elija de %s a %s opciones'
            },
            color: {
                'default': 'Por favor introduce un color válido'
            },
            creditCard: {
                'default': 'Por favor introduce un número válido de tarjeta de crédito'
            },
            cusip: {
                'default': 'Por favor introduce un número CUSIP válido'
            },
            cvv: {
                'default': 'Por favor introduce un número CVV válido'
            },
            date: {
                'default': 'Por favor introduce una fecha válida',
                min: 'Por favor introduce una fecha posterior al %s',
                max: 'Por favor introduce una fecha previa al %s',
                range: 'Por favor introduce una fecha entre el %s y el %s'
            },
            different: {
                'default': 'Por favor introduce un valor distinto'
            },
            digits: {
                'default': 'Por favor introduce sólo dígitos'
            },
            ean: {
                'default': 'Por favor introduce un número EAN válido'
            },
            ein: {
                'default': 'Por favor introduce un número EIN válido'
            },
            emailAddress: {
                'default': 'Por favor introduce un email válido'
            },
            file: {
                'default': 'Por favor elija un archivo válido'
            },
            greaterThan: {
                'default': 'Por favor introduce un valor mayor o igual a %s',
                notInclusive: 'Por favor introduce un valor mayor que %s'
            },
            grid: {
                'default': 'Por favor introduce un número GRId válido'
            },
            hex: {
                'default': 'Por favor introduce un valor hexadecimal válido'
            },
            iban: {
                'default': 'Por favor introduce un número IBAN válido',
                country: 'Por favor introduce un número IBAN válido en %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emiratos Árabes Unidos',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaiyán',
                    BA: 'Bosnia-Herzegovina',
                    BE: 'Bélgica',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Baréin',
                    BI: 'Burundi',
                    BJ: 'Benín',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CI: 'Costa de Marfil',
                    CM: 'Camerún',
                    CR: 'Costa Rica',
                    CV: 'Cabo Verde',
                    CY: 'Cyprus',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    DO: 'República Dominicana',
                    DZ: 'Argelia',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    FO: 'Islas Feroe',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlandia',
                    GR: 'Grecia',
                    GT: 'Guatemala',
                    HR: 'Croacia',
                    HU: 'Hungría',
                    IE: 'Irlanda',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islandia',
                    IT: 'Italia',
                    JO: 'Jordania',
                    KW: 'Kuwait',
                    KZ: 'Kazajistán',
                    LB: 'Líbano',
                    LI: 'Liechtenstein',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MC: 'Mónaco',
                    MD: 'Moldavia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Malí',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauricio',
                    MZ: 'Mozambique',
                    NL: 'Países Bajos',
                    NO: 'Noruega',
                    PK: 'Pakistán',
                    PL: 'Poland',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Catar',
                    RO: 'Rumania',
                    RS: 'Serbia',
                    SA: 'Arabia Saudita',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Timor Oriental',
                    TN: 'Túnez',
                    TR: 'Turquía',
                    VG: 'Islas Vírgenes Británicas',
                    XK: 'República de Kosovo'
                }
            },
            id: {
                'default': 'Por favor introduce un número de identificación válido',
                country: 'Por favor introduce un número válido de identificación en %s',
                countries: {
                    BA: 'Bosnia Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'República Checa',
                    DK: 'Dinamarca',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    HR: 'Croacia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    LT: 'Lituania',
                    LV: 'Letonia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Países Bajos',
                    PL: 'Poland',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    SM: 'San Marino',
                    TH: 'Tailandia',
                    TR: 'Turquía',
                    ZA: 'Sudáfrica'
                }
            },
            identical: {
                'default': 'Por favor introduce el mismo valor'
            },
            imei: {
                'default': 'Por favor introduce un número IMEI válido'
            },
            imo: {
                'default': 'Por favor introduce un número IMO válido'
            },
            integer: {
                'default': 'Por favor introduce un número válido'
            },
            ip: {
                'default': 'Por favor introduce una dirección IP válida',
                ipv4: 'Por favor introduce una dirección IPv4 válida',
                ipv6: 'Por favor introduce una dirección IPv6 válida'
            },
            isbn: {
                'default': 'Por favor introduce un número ISBN válido'
            },
            isin: {
                'default': 'Por favor introduce un número ISIN válido'
            },
            ismn: {
                'default': 'Por favor introduce un número ISMN válido'
            },
            issn: {
                'default': 'Por favor introduce un número ISSN válido'
            },
            lessThan: {
                'default': 'Por favor introduce un valor menor o igual a %s',
                notInclusive: 'Por favor introduce un valor menor que %s'
            },
            mac: {
                'default': 'Por favor introduce una dirección MAC válida'
            },
            meid: {
                'default': 'Por favor introduce un número MEID válido'
            },
            notEmpty: {
                'default': 'Por favor introduce un valor'
            },
            numeric: {
                'default': 'Por favor introduce un número decimal válido'
            },
            phone: {
                'default': 'Por favor introduce un número válido de teléfono',
                country: 'Por favor introduce un número válido de teléfono en %s',
                countries: {
                    AE: 'Emiratos Árabes Unidos',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CN: 'China',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    ES: 'España',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    IN: 'India',
                    MA: 'Marruecos',
                    NL: 'Países Bajos',
                    PK: 'Pakistán',
                    RO: 'Rumania',
                    RU: 'Rusa',
                    SK: 'Eslovaquia',
                    TH: 'Tailandia',
                    US: 'Estados Unidos',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Por favor introduce un valor válido'
            },
            regexp: {
                'default': 'Por favor introduce un valor que coincida con el patrón'
            },
            remote: {
                'default': 'Por favor introduce un valor válido'
            },
            rtn: {
                'default': 'Por favor introduce un número RTN válido'
            },
            sedol: {
                'default': 'Por favor introduce un número SEDOL válido'
            },
            siren: {
                'default': 'Por favor introduce un número SIREN válido'
            },
            siret: {
                'default': 'Por favor introduce un número SIRET válido'
            },
            step: {
                'default': 'Por favor introduce un paso válido de %s'
            },
            stringCase: {
                'default': 'Por favor introduce sólo caracteres en minúscula',
                upper: 'Por favor introduce sólo caracteres en mayúscula'
            },
            stringLength: {
                'default': 'Por favor introduce un valor con una longitud válida',
                less: 'Por favor introduce menos de %s caracteres',
                more: 'Por favor introduce más de %s caracteres',
                between: 'Por favor introduce un valor con una longitud entre %s y %s caracteres'
            },
            uri: {
                'default': 'Por favor introduce una URI válida'
            },
            uuid: {
                'default': 'Por favor introduce un número UUID válido',
                version: 'Por favor introduce una versión UUID válida para %s'
            },
            vat: {
                'default': 'Por favor introduce un número IVA válido',
                country: 'Por favor introduce un número IVA válido en %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Bélgica',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    GR: 'Grecia',
                    EL: 'Grecia',
                    HU: 'Hungría',
                    HR: 'Croacia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    IT: 'Italia',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MT: 'Malta',
                    NL: 'Países Bajos',
                    NO: 'Noruega',
                    PL: 'Polonia',
                    PT: 'Portugal',
                    RO: 'Rumanía',
                    RU: 'Rusa',
                    RS: 'Serbia',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    VE: 'Venezuela',
                    ZA: 'Sudáfrica'
                }
            },
            vin: {
                'default': 'Por favor introduce un número VIN válido'
            },
            zipCode: {
                'default': 'Por favor introduce un código postal válido',
                country: 'Por favor introduce un código postal válido en %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CA: 'Canadá',
                    CH: 'Suiza',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    ES: 'España',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    IE: 'Irlanda',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Marruecos',
                    NL: 'Países Bajos',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Rumanía',
                    RU: 'Rusa',
                    SE: 'Suecia',
                    SG: 'Singapur',
                    SK: 'Eslovaquia',
                    US: 'Estados Unidos'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Basque language package
     * Translated by @xabikip
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'eu_ES': {
            base64: {
                'default': 'Mesedez sartu base 64an balore egoki bat'
            },
            between: {
                'default': 'Mesedez sartu %s eta %s artean balore bat',
                notInclusive: 'Mesedez sartu %s eta %s arteko balore bat soilik'
            },
            bic: {
                'default': 'Mesedez sartu BIC zenbaki egoki bat'
            },
            callback: {
                'default': 'Mesedez sartu balore egoki bat'
            },
            choice: {
                'default': 'Mesedez sartu balore egoki bat',
                less: 'Mesedez aukeraru %s aukera gutxienez',
                more: 'Mesedez aukeraru %s aukera gehienez',
                between: 'Mesedez aukeratu %s eta %s arteko aukerak'
            },
            color: {
                'default': 'Mesedezn sartu kolore egoki bat'
            },
            creditCard: {
                'default': 'Mesedez sartu kerditu-txartelaren zenbaki egoki bat'
            },
            cusip: {
                'default': 'Mesedez sartu CUSIP zenbaki egoki bat'
            },
            cvv: {
                'default': 'Mesedez sartu CVV zenbaki egoki bat'
            },
            date: {
                'default': 'Mesedez sartu data egoki bat',
                min: 'Mesedez sartu %s baino geroagoko data bat',
                max: 'Mesedez sartu %s baino lehenagoko data bat',
                range: 'Mesedez sartu %s eta %s arteko data bat'
            },
            different: {
                'default': 'Mesedez sartu balore ezberdin bat'
            },
            digits: {
                'default': 'Mesedez sigituak soilik sartu'
            },
            ean: {
                'default': 'Mesedez EAN zenbaki egoki bat sartu'
            },
            ein: {
                'default': 'Mesedez EIN zenbaki egoki bat sartu'
            },
            emailAddress: {
                'default': 'Mesedez e-posta egoki bat sartu'
            },
            file: {
                'default': 'Mesedez artxibo egoki bat aukeratu'
            },
            greaterThan: {
                'default': 'Mesedez %s baino handiagoa edo berdina den zenbaki bat sartu',
                notInclusive: 'Mesedez %s baino handiagoa den zenbaki bat sartu'
            },
            grid: {
                'default': 'Mesedez GRID zenbaki egoki bat sartu'
            },
            hex: {
                'default': 'Mesedez sartu balore hamaseitar egoki bat'
            },
            iban: {
                'default': 'Mesedez, sartu IBAN zenbaki egoki bat',
                country: 'Mesedez, sartu IBAN zenbaki egoki bat honako: %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Arabiar Emirerri Batuak',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia-Herzegovina',
                    BE: 'Belgika',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Baréin',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasil',
                    CH: 'Suitza',
                    CI: 'Boli Kosta',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Cabo Verde',
                    CY: 'Cyprus',
                    CZ: 'Txekiar Errepublika',
                    DE: 'Alemania',
                    DK: 'Danimarka',
                    DO: 'Dominikar Errepublika',
                    DZ: 'Aljeria',
                    EE: 'Estonia',
                    ES: 'Espainia',
                    FI: 'Finlandia',
                    FO: 'Feroe Irlak',
                    FR: 'Frantzia',
                    GB: 'Erresuma Batua',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlandia',
                    GR: 'Grezia',
                    GT: 'Guatemala',
                    HR: 'Kroazia',
                    HU: 'Hungaria',
                    IE: 'Irlanda',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islandia',
                    IT: 'Italia',
                    JO: 'Jordania',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Libano',
                    LI: 'Liechtenstein',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MC: 'Monako',
                    MD: 'Moldavia',
                    ME: 'Montenegro',
                    MG: 'Madagaskar',
                    MK: 'Mazedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Maurizio',
                    MZ: 'Mozambike',
                    NL: 'Herbeherak',
                    NO: 'Norvegia',
                    PK: 'Pakistán',
                    PL: 'Poland',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Catar',
                    RO: 'Errumania',
                    RS: 'Serbia',
                    SA: 'Arabia Saudi',
                    SE: 'Suedia',
                    SI: 'Eslovenia',
                    SK: 'Eslovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Ekialdeko Timor',
                    TN: 'Tunisia',
                    TR: 'Turkia',
                    VG: 'Birjina Uharte Britainiar',
                    XK: 'Kosovoko Errepublika'
                }
            },
            id: {
                'default': 'Mesedez baliozko identifikazio-zenbakia sartu',
                country: 'Mesedez baliozko identifikazio-zenbakia sartu honako: %s',
                countries: {
                    BA: 'Bosnia Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suitza',
                    CL: 'Txile',
                    CN: 'Txina',
                    CZ: 'Txekiar Errepublika',
                    DK: 'Danimarka',
                    EE: 'Estonia',
                    ES: 'Espainia',
                    FI: 'Finlandia',
                    HR: 'Kroazia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    LT: 'Lituania',
                    LV: 'Letonia',
                    ME: 'Montenegro',
                    MK: 'Mazedonia',
                    NL: 'Herbeherak',
                    PL: 'Poland',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovakia',
                    SM: 'San Marino',
                    TH: 'Tailandia',
                    TR: 'Turkia',
                    ZA: 'Hegoafrika'
                }
            },
            identical: {
                'default': 'Mesedez, balio bera sartu'
            },
            imei: {
                'default': 'Mesedez, IMEI baliozko zenbaki bat sartu'
            },
            imo: {
                'default': 'Mesedez, IMO baliozko zenbaki bat sartu'
            },
            integer: {
                'default': 'Mesedez, baliozko zenbaki bat sartu'
            },
            ip: {
                'default': 'Mesedez, baliozko IP helbide bat sartu',
                ipv4: 'Mesedez, baliozko IPv4 helbide bat sartu',
                ipv6: 'Mesedez, baliozko IPv6 helbide bat sartu'
            },
            isbn: {
                'default': 'Mesedez, ISBN baliozko zenbaki bat sartu'
            },
            isin: {
                'default': 'Mesedez, ISIN baliozko zenbaki bat sartu'
            },
            ismn: {
                'default': 'Mesedez, ISMM baliozko zenbaki bat sartu'
            },
            issn: {
                'default': 'Mesedez, ISSN baliozko zenbaki bat sartu'
            },
            lessThan: {
                'default': 'Mesedez, %s en balio txikiagoa edo berdina sartu',
                notInclusive: 'Mesedez, %s baino balio txikiago sartu'
            },
            mac: {
                'default': 'Mesedez, baliozko MAC helbide bat sartu'
            },
            meid: {
                'default': 'Mesedez, MEID baliozko zenbaki bat sartu'
            },
            notEmpty: {
                'default': 'Mesedez balore bat sartu'
            },
            numeric: {
                'default': 'Mesedez, baliozko zenbaki hamartar bat sartu'
            },
            phone: {
                'default': 'Mesedez baliozko telefono zenbaki bat sartu',
                country: 'Mesedez baliozko telefono zenbaki bat sartu honako: %s',
                countries: {
                    AE: 'Arabiar Emirerri Batua',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CN: 'Txina',
                    CZ: 'Txekiar Errepublika',
                    DE: 'Alemania',
                    DK: 'Danimarka',
                    ES: 'Espainia',
                    FR: 'Frantzia',
                    GB: 'Erresuma Batuak',
                    IN: 'India',
                    MA: 'Maroko',
                    NL: 'Herbeherak',
                    PK: 'Pakistan',
                    RO: 'Errumania',
                    RU: 'Errusiarra',
                    SK: 'Eslovakia',
                    TH: 'Tailandia',
                    US: 'Estatu Batuak',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Mesedez sartu balore egoki bat'
            },
            regexp: {
                'default': 'Mesedez, patroiarekin bat datorren balio bat sartu'
            },
            remote: {
                'default': 'Mesedez balore egoki bat sartu'
            },
            rtn: {
                'default': 'Mesedez, RTN baliozko zenbaki bat sartu'
            },
            sedol: {
                'default': 'Mesedez, SEDOL baliozko zenbaki bat sartu'
            },
            siren: {
                'default': 'Mesedez, SIREN baliozko zenbaki bat sartu'
            },
            siret: {
                'default': 'Mesedez, SIRET baliozko zenbaki bat sartu'
            },
            step: {
                'default': 'Mesedez %s -ko pausu egoki bat sartu'
            },
            stringCase: {
                'default': 'Mesedez, minuskulazko karaktereak bakarrik sartu',
                upper: 'Mesedez, maiuzkulazko karaktereak bakarrik sartu'
            },
            stringLength: {
                'default': 'Mesedez, luzeera egoki bateko baloreak bakarrik sartu',
                less: 'Mesedez, %s baino karaktere gutxiago sartu',
                more: 'Mesedez, %s baino karaktere gehiago sartu',
                between: 'Mesedez, %s eta %s arteko luzeera duen balore bat sartu'
            },
            uri: {
                'default': 'Mesedez, URI egoki bat sartu.'
            },
            uuid: {
                'default': 'Mesedez, UUID baliozko zenbaki bat sartu',
                version: 'Mesedez, UUID bertsio egoki bat sartu honendako: %s'
            },
            vat: {
                'default': 'Mesedez, BEZ zenbaki egoki bat sartu',
                country: 'Mesedez, BEZ zenbaki egoki bat sartu herrialde hontarako: %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgika',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suitza',
                    CY: 'Txipre',
                    CZ: 'Txekiar Errepublika',
                    DE: 'Alemania',
                    DK: 'Danimarka',
                    EE: 'Estonia',
                    ES: 'Espainia',
                    FI: 'Finlandia',
                    FR: 'Frantzia',
                    GB: 'Erresuma Batuak',
                    GR: 'Grezia',
                    EL: 'Grezia',
                    HU: 'Hungaria',
                    HR: 'Kroazia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    IT: 'Italia',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MT: 'Malta',
                    NL: 'Herbeherak',
                    NO: 'Noruega',
                    PL: 'Polonia',
                    PT: 'Portugal',
                    RO: 'Errumania',
                    RU: 'Errusia',
                    RS: 'Serbia',
                    SE: 'Suedia',
                    SI: 'Eslovenia',
                    SK: 'Eslovakia',
                    VE: 'Venezuela',
                    ZA: 'Hegoafrika'
                }
            },
            vin: {
                'default': 'Mesedez, baliozko VIN zenbaki bat sartu'
            },
            zipCode: {
                'default': 'Mesedez, baliozko posta kode bat sartu',
                country: 'Mesedez, baliozko posta kode bat sartu herrialde honetarako: %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CA: 'Kanada',
                    CH: 'Suitza',
                    CZ: 'Txekiar Errepublika',
                    DE: 'Alemania',
                    DK: 'Danimarka',
                    ES: 'Espainia',
                    FR: 'Frantzia',
                    GB: 'Erresuma Batuak',
                    IE: 'Irlanda',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Maroko',
                    NL: 'Herbeherak',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Errumania',
                    RU: 'Errusia',
                    SE: 'Suedia',
                    SG: 'Singapur',
                    SK: 'Eslovakia',
                    US: 'Estatu Batuak'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Persian (Farsi) Language package.
     * Translated by @i0
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'fa_IR': {
            base64: {
                'default': 'لطفا متن کد گذاری شده base 64 صحیح وارد فرمایید'
            },
            between: {
                'default': 'لطفا یک مقدار بین %s و %s وارد فرمایید',
                notInclusive: 'لطفا یک مقدار بین فقط %s و %s وارد فرمایید'
            },
            bic: {
                'default': 'لطفا یک شماره BIC معتبر وارد فرمایید'
            },
            callback: {
                'default': 'لطفا یک مقدار صحیح وارد فرمایید'
            },
            choice: {
                'default': 'لطفا یک مقدار صحیح وارد فرمایید',
                less: 'لطفا حداقل %s گزینه را انتخاب فرمایید',
                more: 'لطفا حداکثر %s گزینه را انتخاب فرمایید',
                between: 'لطفا %s - %s گزینه انتخاب فرمایید'
            },
            color: {
                'default': 'لطفا رنگ صحیح وارد فرمایید'
            },
            creditCard: {
                'default': 'لطفا یک شماره کارت اعتباری معتبر وارد فرمایید'
            },
            cusip: {
                'default': 'لطفا یک شماره CUSIP معتبر وارد فرمایید'
            },
            cvv: {
                'default': 'لطفا یک شماره CVV معتبر وارد فرمایید'
            },
            date: {
                'default': 'لطفا یک تاریخ معتبر وارد فرمایید',
                min: 'لطفا یک تاریخ بعد از %s وارد فرمایید',
                max: 'لطفا یک تاریخ قبل از %s وارد فرمایید',
                range: 'لطفا یک تاریخ در بازه %s - %s وارد فرمایید'
            },
            different: {
                'default': 'لطفا یک مقدار متفاوت وارد فرمایید'
            },
            digits: {
                'default': 'لطفا فقط عدد وارد فرمایید'
            },
            ean: {
                'default': 'لطفا یک شماره EAN معتبر وارد فرمایید'
            },
            ein: {
                'default': 'لطفا یک شماره EIN معتبر وارد فرمایید'
            },
            emailAddress: {
                'default': 'لطفا آدرس ایمیل معتبر وارد فرمایید'
            },
            file: {
                'default': 'لطفا فایل معتبر انتخاب فرمایید'
            },
            greaterThan: {
                'default': 'لطفا مقدار بزرگتر یا مساوی با %s وارد فرمایید',
                notInclusive: 'لطفا مقدار بزرگتر از %s وارد فرمایید'
            },
            grid: {
                'default': 'لطفا شماره GRId معتبر وارد فرمایید'
            },
            hex: {
                'default': 'لطفا عدد هگزادسیمال صحیح وارد فرمایید'
            },
            iban: {
                'default': 'لطفا شماره IBAN معتبر وارد فرمایید',
                country: 'لطفا یک شماره IBAN صحیح در %s وارد فرمایید',
                countries: {
                    AD: 'آندورا',
                    AE: 'امارات متحده عربی',
                    AL: 'آلبانی',
                    AO: 'آنگولا',
                    AT: 'اتریش',
                    AZ: 'آذربایجان',
                    BA: 'بوسنی و هرزگوین',
                    BE: 'بلژیک',
                    BF: 'بورکینا فاسو',
                    BG: 'بلغارستان',
                    BH: 'بحرین',
                    BI: 'بروندی',
                    BJ: 'بنین',
                    BR: 'برزیل',
                    CH: 'سوئیس',
                    CI: 'ساحل عاج',
                    CM: 'کامرون',
                    CR: 'کاستاریکا',
                    CV: 'کیپ ورد',
                    CY: 'قبرس',
                    CZ: 'جمهوری چک',
                    DE: 'آلمان',
                    DK: 'دانمارک',
                    DO: 'جمهوری دومینیکن',
                    DZ: 'الجزایر',
                    EE: 'استونی',
                    ES: 'اسپانیا',
                    FI: 'فنلاند',
                    FO: 'جزایر فارو',
                    FR: 'فرانسه',
                    GB: 'بریتانیا',
                    GE: 'گرجستان',
                    GI: 'جبل الطارق',
                    GL: 'گرینلند',
                    GR: 'یونان',
                    GT: 'گواتمالا',
                    HR: 'کرواسی',
                    HU: 'مجارستان',
                    IE: 'ایرلند',
                    IL: 'اسرائیل',
                    IR: 'ایران',
                    IS: 'ایسلند',
                    IT: 'ایتالیا',
                    JO: 'اردن',
                    KW: 'کویت',
                    KZ: 'قزاقستان',
                    LB: 'لبنان',
                    LI: 'لیختن اشتاین',
                    LT: 'لیتوانی',
                    LU: 'لوکزامبورگ',
                    LV: 'لتونی',
                    MC: 'موناکو',
                    MD: 'مولدووا',
                    ME: 'مونته نگرو',
                    MG: 'ماداگاسکار',
                    MK: 'مقدونیه',
                    ML: 'مالی',
                    MR: 'موریتانی',
                    MT: 'مالت',
                    MU: 'موریس',
                    MZ: 'موزامبیک',
                    NL: 'هلند',
                    NO: 'نروژ',
                    PK: 'پاکستان',
                    PL: 'لهستان',
                    PS: 'فلسطین',
                    PT: 'پرتغال',
                    QA: 'قطر',
                    RO: 'رومانی',
                    RS: 'صربستان',
                    SA: 'عربستان سعودی',
                    SE: 'سوئد',
                    SI: 'اسلوونی',
                    SK: 'اسلواکی',
                    SM: 'سان مارینو',
                    SN: 'سنگال',
                    TL: 'تیمور شرق',
                    TN: 'تونس',
                    TR: 'ترکیه',
                    VG: 'جزایر ویرجین، بریتانیا',
                    XK: 'جمهوری کوزوو'
                }
            },
            id: {
                'default': 'لطفا شماره شناسایی صحیح وارد فرمایید',
                country: 'لطفا یک شماره شناسایی معتبر در %s وارد کنید',
                countries: {
                    BA: 'بوسنی و هرزگوین',
                    BG: 'بلغارستان',
                    BR: 'برزیل',
                    CH: 'سوئیس',
                    CL: 'شیلی',
                    CN: 'چین',
                    CZ: 'چک',
                    DK: 'دانمارک',
                    EE: 'استونی',
                    ES: 'اسپانیا',
                    FI: 'فنلاند',
                    HR: 'کرواسی',
                    IE: 'ایرلند',
                    IS: 'ایسلند',
                    LT: 'لیتوانی',
                    LV: 'لتونی',
                    ME: 'مونته نگرو',
                    MK: 'مقدونیه',
                    NL: 'هلند',
                    PL: 'لهستان',
                    RO: 'رومانی',
                    RS: 'صربی',
                    SE: 'سوئد',
                    SI: 'اسلوونی',
                    SK: 'اسلواکی',
                    SM: 'سان مارینو',
                    TH: 'تایلند',
                    TR: 'ترکیه',
                    ZA: 'آفریقای جنوبی'
                }
            },
            identical: {
                'default': 'لطفا مقدار یکسان وارد فرمایید'
            },
            imei: {
                'default': 'لطفا شماره IMEI معتبر وارد فرمایید'
            },
            imo: {
                'default': 'لطفا شماره IMO معتبر وارد فرمایید'
            },
            integer: {
                'default': 'لطفا یک عدد صحیح وارد فرمایید'
            },
            ip: {
                'default': 'لطفا یک آدرس IP معتبر وارد فرمایید',
                ipv4: 'لطفا یک آدرس IPv4 معتبر وارد فرمایید',
                ipv6: 'لطفا یک آدرس IPv6 معتبر وارد فرمایید'
            },
            isbn: {
                'default': 'لطفا شماره ISBN معتبر وارد فرمایید'
            },
            isin: {
                'default': 'لطفا شماره ISIN معتبر وارد فرمایید'
            },
            ismn: {
                'default': 'لطفا شماره ISMN معتبر وارد فرمایید'
            },
            issn: {
                'default': 'لطفا شماره ISSN معتبر وارد فرمایید'
            },
            lessThan: {
                'default': 'لطفا مقدار کمتر یا مساوی با %s وارد فرمایید',
                notInclusive: 'لطفا مقدار کمتر از %s وارد فرمایید'
            },
            mac: {
                'default': 'لطفا یک MAC address معتبر وارد فرمایید'
            },
            meid: {
                'default': 'لطفا یک شماره MEID معتبر وارد فرمایید'
            },
            notEmpty: {
                'default': 'لطفا یک مقدار وارد فرمایید'
            },
            numeric: {
                'default': 'لطفا یک عدد اعشاری صحیح وارد فرمایید'
            },
            phone: {
                'default': 'لطفا یک شماره تلفن صحیح وارد فرمایید',
                country: 'لطفا یک شماره تلفن معتبر وارد کنید در %s',
                countries: {
                    AE: 'امارات متحده عربی',
                    BG: 'بلغارستان',
                    BR: 'برزیل',
                    CN: 'کشور چین',
                    CZ: 'چک',
                    DE: 'آلمان',
                    DK: 'دانمارک',
                    ES: 'اسپانیا',
                    FR: 'فرانسه',
                    GB: 'بریتانیا',
                    IN: 'هندوستان',
                    MA: 'مراکش',
                    NL: 'هلند',
                    PK: 'پاکستان',
                    RO: 'رومانی',
                    RU: 'روسیه',
                    SK: 'اسلواکی',
                    TH: 'تایلند',
                    US: 'ایالات متحده آمریکا',
                    VE: 'ونزوئلا'
                }
            },
            promise: {
                'default': 'لطفا یک مقدار صحیح وارد فرمایید'
            },
            regexp: {
                'default': 'لطفا یک مقدار مطابق با الگو وارد فرمایید'
            },
            remote: {
                'default': 'لطفا یک مقدار معتبر وارد فرمایید'
            },
            rtn: {
                'default': 'لطفا یک شماره RTN صحیح وارد فرمایید'
            },
            sedol: {
                'default': 'لطفا یک شماره SEDOL صحیح وارد فرمایید'
            },
            siren: {
                'default': 'لطفا یک شماره SIREN صحیح وارد فرمایید'
            },
            siret: {
                'default': 'لطفا یک شماره SIRET صحیح وارد فرمایید'
            },
            step: {
                'default': 'لطفا یک گام صحیح از %s وارد فرمایید'
            },
            stringCase: {
                'default': 'لطفا فقط حروف کوچک وارد فرمایید',
                upper: 'لطفا فقط حروف بزرگ وارد فرمایید'
            },
            stringLength: {
                'default': 'لطفا یک مقدار با طول صحیح وارد فرمایید',
                less: 'لطفا کمتر از %s حرف وارد فرمایید',
                more: 'لطفا بیش از %s حرف وارد فرمایید',
                between: 'لطفا مقداری بین %s و %s حرف وارد فرمایید'
            },
            uri: {
                'default': 'لطفا یک آدرس URI صحیح وارد فرمایید'
            },
            uuid: {
                'default': 'لطفا یک شماره UUID معتبر وارد فرمایید',
                version: 'لطفا یک نسخه UUID صحیح %s شماره وارد فرمایید'
            },
            vat: {
                'default': 'لطفا یک شماره VAT صحیح وارد فرمایید',
                country: 'لطفا یک شماره VAT معتبر در %s وارد کنید',
                countries: {
                    AT: 'اتریش',
                    BE: 'بلژیک',
                    BG: 'بلغارستان',
                    BR: 'برزیل',
                    CH: 'سوئیس',
                    CY: 'قبرس',
                    CZ: 'چک',
                    DE: 'آلمان',
                    DK: 'دانمارک',
                    EE: 'استونی',
                    ES: 'اسپانیا',
                    FI: 'فنلاند',
                    FR: 'فرانسه',
                    GB: 'بریتانیا',
                    GR: 'یونان',
                    EL: 'یونان',
                    HU: 'مجارستان',
                    HR: 'کرواسی',
                    IE: 'ایرلند',
                    IS: 'ایسلند',
                    IT: 'ایتالیا',
                    LT: 'لیتوانی',
                    LU: 'لوکزامبورگ',
                    LV: 'لتونی',
                    MT: 'مالت',
                    NL: 'هلند',
                    NO: 'نروژ',
                    PL: 'لهستانی',
                    PT: 'پرتغال',
                    RO: 'رومانی',
                    RU: 'روسیه',
                    RS: 'صربستان',
                    SE: 'سوئد',
                    SI: 'اسلوونی',
                    SK: 'اسلواکی',
                    VE: 'ونزوئلا',
                    ZA: 'آفریقای جنوبی'
                }
            },
            vin: {
                'default': 'لطفا یک شماره VIN صحیح وارد فرمایید'
            },
            zipCode: {
                'default': 'لطفا یک کدپستی صحیح وارد فرمایید',
                country: 'لطفا یک کد پستی معتبر در %s وارد کنید',
                countries: {
                    AT: 'اتریش',
                    BG: 'بلغارستان',
                    BR: 'برزیل',
                    CA: 'کانادا',
                    CH: 'سوئیس',
                    CZ: 'چک',
                    DE: 'آلمان',
                    DK: 'دانمارک',
                    ES: 'اسپانیا',
                    FR: 'فرانسه',
                    GB: 'بریتانیا',
                    IE: 'ایرلند',
                    IN: 'هندوستان',
                    IT: 'ایتالیا',
                    MA: 'مراکش',
                    NL: 'هلند',
                    PL: 'لهستان',
                    PT: 'پرتغال',
                    RO: 'رومانی',
                    RU: 'روسیه',
                    SE: 'سوئد',
                    SG: 'سنگاپور',
                    SK: 'اسلواکی',
                    US: 'ایالات متحده'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Finnish language package
     * Translated by @traone
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'fi_FI': {
            base64: {
                'default': 'Ole hyvä anna kelvollinen base64 koodattu merkkijono'
            },
            between: {
                'default': 'Ole hyvä anna arvo %s ja %s väliltä',
                notInclusive: 'Ole hyvä anna arvo %s ja %s väliltä'
            },
            bic: {
                'default': 'Ole hyvä anna kelvollinen BIC numero'
            },
            callback: {
                'default': 'Ole hyvä anna kelvollinen arvo'
            },
            choice: {
                'default': 'Ole hyvä anna kelvollinen arvo',
                less: 'Ole hyvä valitse vähintään %s valintaa',
                more: 'Ole hyvä valitse enintään %s valintaa',
                between: 'Ole hyvä valitse %s - %s valintaa'
            },
            color: {
                'default': 'Ole hyvä anna kelvollinen väriarvo'
            },
            creditCard: {
                'default': 'Ole hyvä anna kelvollinen luottokortin numero'
            },
            cusip: {
                'default': 'Ole hyvä anna kelvollinen CUSIP numero'
            },
            cvv: {
                'default': 'Ole hyvä anna kelvollinen CVV numero'
            },
            date: {
                'default': 'Ole hyvä anna kelvollinen päiväys',
                min: 'Ole hyvä anna %s jälkeinen päiväys',
                max: 'Ole hyvä anna %s edeltävä päiväys',
                range: 'Ole hyvä anna päiväys %s - %s väliltä'
            },
            different: {
                'default': 'Ole hyvä anna jokin toinen arvo'
            },
            digits: {
                'default': 'Vain numerot sallittuja'
            },
            ean: {
                'default': 'Ole hyvä anna kelvollinen EAN numero'
            },
            ein: {
                'default': 'Ole hyvä anna kelvollinen EIN numero'
            },
            emailAddress: {
                'default': 'Ole hyvä anna kelvollinen sähköpostiosoite'
            },
            file: {
                'default': 'Ole hyvä valitse kelvollinen tiedosto'
            },
            greaterThan: {
                'default': 'Ole hyvä anna arvoksi yhtä suuri kuin, tai suurempi kuin %s',
                notInclusive: 'Ole hyvä anna arvoksi suurempi kuin %s'
            },
            grid: {
                'default': 'Ole hyvä anna kelvollinen GRId numero'
            },
            hex: {
                'default': 'Ole hyvä anna kelvollinen heksadesimaali luku'
            },
            iban: {
                'default': 'Ole hyvä anna kelvollinen IBAN numero',
                country: 'Ole hyvä anna kelvollinen IBAN numero maassa %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Yhdistyneet arabiemiirikunnat',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Itävalta',
                    AZ: 'Azerbaidžan',
                    BA: 'Bosnia ja Hertsegovina',
                    BE: 'Belgia',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasilia',
                    CH: 'Sveitsi',
                    CI: 'Norsunluurannikko',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Kypros',
                    CZ: 'Tsekin tasavalta',
                    DE: 'Saksa',
                    DK: 'Tanska',
                    DO: 'Dominikaaninen tasavalta',
                    DZ: 'Algeria',
                    EE: 'Viro',
                    ES: 'Espanja',
                    FI: 'Suomi',
                    FO: 'Färsaaret',
                    FR: 'Ranska',
                    GB: 'Yhdistynyt kuningaskunta',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Grönlanti',
                    GR: 'Kreikka',
                    GT: 'Guatemala',
                    HR: 'Kroatia',
                    HU: 'Unkari',
                    IE: 'Irlanti',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islanti',
                    IT: 'Italia',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Liettua',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Makedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambik',
                    NL: 'Hollanti',
                    NO: 'Norja',
                    PK: 'Pakistan',
                    PL: 'Puola',
                    PS: 'Palestiina',
                    PT: 'Portugali',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Saudi Arabia',
                    SE: 'Ruotsi',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Itä-Timor',
                    TN: 'Tunisia',
                    TR: 'Turkki',
                    VG: 'Neitsytsaaret, Brittien',
                    XK: 'Kosovon tasavallan'
                }
            },
            id: {
                'default': 'Ole hyvä anna kelvollinen henkilötunnus',
                country: 'Ole hyvä anna kelvollinen henkilötunnus maassa %s',
                countries: {
                    BA: 'Bosnia ja Hertsegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasilia',
                    CH: 'Sveitsi',
                    CL: 'Chile',
                    CN: 'Kiina',
                    CZ: 'Tsekin tasavalta',
                    DK: 'Tanska',
                    EE: 'Viro',
                    ES: 'Espanja',
                    FI: 'Suomi',
                    HR: 'Kroatia',
                    IE: 'Irlanti',
                    IS: 'Islanti',
                    LT: 'Liettua',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Makedonia',
                    NL: 'Hollanti',
                    PL: 'Puola',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Ruotsi',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thaimaa',
                    TR: 'Turkki',
                    ZA: 'Etelä Afrikka'
                }
            },
            identical: {
                'default': 'Ole hyvä anna sama arvo'
            },
            imei: {
                'default': 'Ole hyvä anna kelvollinen IMEI numero'
            },
            imo: {
                'default': 'Ole hyvä anna kelvollinen IMO numero'
            },
            integer: {
                'default': 'Ole hyvä anna kelvollinen kokonaisluku'
            },
            ip: {
                'default': 'Ole hyvä anna kelvollinen IP osoite',
                ipv4: 'Ole hyvä anna kelvollinen IPv4 osoite',
                ipv6: 'Ole hyvä anna kelvollinen IPv6 osoite'
            },
            isbn: {
                'default': 'Ole hyvä anna kelvollinen ISBN numero'
            },
            isin: {
                'default': 'Ole hyvä anna kelvollinen ISIN numero'
            },
            ismn: {
                'default': 'Ole hyvä anna kelvollinen ISMN numero'
            },
            issn: {
                'default': 'Ole hyvä anna kelvollinen ISSN numero'
            },
            lessThan: {
                'default': 'Ole hyvä anna arvo joka on vähemmän kuin tai yhtä suuri kuin %s',
                notInclusive: 'Ole hyvä anna arvo joka on vähemmän kuin %s'
            },
            mac: {
                'default': 'Ole hyvä anna kelvollinen MAC osoite'
            },
            meid: {
                'default': 'Ole hyvä anna kelvollinen MEID numero'
            },
            notEmpty: {
                'default': 'Pakollinen kenttä, anna jokin arvo'
            },
            numeric: {
                'default': 'Ole hyvä anna kelvollinen liukuluku'
            },
            phone: {
                'default': 'Ole hyvä anna kelvollinen puhelinnumero',
                country: 'Ole hyvä anna kelvollinen puhelinnumero maassa %s',
                countries: {
                    AE: 'Yhdistyneet arabiemiirikunnat',
                    BG: 'Bulgaria',
                    BR: 'Brasilia',
                    CN: 'Kiina',
                    CZ: 'Tsekin tasavalta',
                    DE: 'Saksa',
                    DK: 'Tanska',
                    ES: 'Espanja',
                    FR: 'Ranska',
                    GB: 'Yhdistynyt kuningaskunta',
                    IN: 'Intia',
                    MA: 'Marokko',
                    NL: 'Hollanti',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Venäjä',
                    SK: 'Slovakia',
                    TH: 'Thaimaa',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Ole hyvä anna kelvollinen arvo'
            },
            regexp: {
                'default': 'Ole hyvä anna kaavan mukainen arvo'
            },
            remote: {
                'default': 'Ole hyvä anna kelvollinen arvo'
            },
            rtn: {
                'default': 'Ole hyvä anna kelvollinen RTN numero'
            },
            sedol: {
                'default': 'Ole hyvä anna kelvollinen SEDOL numero'
            },
            siren: {
                'default': 'Ole hyvä anna kelvollinen SIREN numero'
            },
            siret: {
                'default': 'Ole hyvä anna kelvollinen SIRET numero'
            },
            step: {
                'default': 'Ole hyvä anna kelvollinen arvo %s porrastettuna'
            },
            stringCase: {
                'default': 'Ole hyvä anna pelkästään pieniä kirjaimia',
                upper: 'Ole hyvä anna pelkästään isoja kirjaimia'
            },
            stringLength: {
                'default': 'Ole hyvä anna kelvollisen mittainen merkkijono',
                less: 'Ole hyvä anna vähemmän kuin %s merkkiä',
                more: 'Ole hyvä anna vähintään %s merkkiä',
                between: 'Ole hyvä anna arvo joka on vähintään %s ja enintään %s merkkiä pitkä'
            },
            uri: {
                'default': 'Ole hyvä anna kelvollinen URI'
            },
            uuid: {
                'default': 'Ole hyvä anna kelvollinen UUID numero',
                version: 'Ole hyvä anna kelvollinen UUID versio %s numero'
            },
            vat: {
                'default': 'Ole hyvä anna kelvollinen VAT numero',
                country: 'Ole hyvä anna kelvollinen VAT numero maahan: %s',
                countries: {
                    AT: 'Itävalta',
                    BE: 'Belgia',
                    BG: 'Bulgaria',
                    BR: 'Brasilia',
                    CH: 'Sveitsi',
                    CY: 'Kypros',
                    CZ: 'Tsekin tasavalta',
                    DE: 'Saksa',
                    DK: 'Tanska',
                    EE: 'Viro',
                    ES: 'Espanja',
                    FI: 'Suomi',
                    FR: 'Ranska',
                    GB: 'Yhdistyneet kuningaskunnat',
                    GR: 'Kreikka',
                    EL: 'Kreikka',
                    HU: 'Unkari',
                    HR: 'Kroatia',
                    IE: 'Irlanti',
                    IS: 'Islanti',
                    IT: 'Italia',
                    LT: 'Liettua',
                    LU: 'Luxemburg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Hollanti',
                    NO: 'Norja',
                    PL: 'Puola',
                    PT: 'Portugali',
                    RO: 'Romania',
                    RU: 'Venäjä',
                    RS: 'Serbia',
                    SE: 'Ruotsi',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'Etelä Afrikka'
                }
            },
            vin: {
                'default': 'Ole hyvä anna kelvollinen VIN numero'
            },
            zipCode: {
                'default': 'Ole hyvä anna kelvollinen postinumero',
                country: 'Ole hyvä anna kelvollinen postinumero maassa: %s',
                countries: {
                    AT: 'Itävalta',
                    BG: 'Bulgaria',
                    BR: 'Brasilia',
                    CA: 'Kanada',
                    CH: 'Sveitsi',
                    CZ: 'Tsekin tasavalta',
                    DE: 'Saksa',
                    DK: 'Tanska',
                    ES: 'Espanja',
                    FR: 'Ranska',
                    GB: 'Yhdistyneet kuningaskunnat',
                    IE: 'Irlanti',
                    IN: 'Intia',
                    IT: 'Italia',
                    MA: 'Marokko',
                    NL: 'Hollanti',
                    PL: 'Puola',
                    PT: 'Portugali',
                    RO: 'Romania',
                    RU: 'Venäjä',
                    SE: 'Ruotsi',
                    SG: 'Singapore',
                    SK: 'Slovakia',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Belgium (French) language package
     * Translated by @neilime
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'fr_BE': {
            base64: {
                'default': 'Veuillez fournir une donnée correctement encodée en Base64'
            },
            between: {
                'default': 'Veuillez fournir une valeur comprise entre %s et %s',
                notInclusive: 'Veuillez fournir une valeur strictement comprise entre %s et %s'
            },
            bic: {
                'default': 'Veuillez fournir un code-barre BIC valide'
            },
            callback: {
                'default': 'Veuillez fournir une valeur valide'
            },
            choice: {
                'default': 'Veuillez fournir une valeur valide',
                less: 'Veuillez choisir au minimum %s options',
                more: 'Veuillez choisir au maximum %s options',
                between: 'Veuillez choisir de %s à %s options'
            },
            color: {
                'default': 'Veuillez fournir une couleur valide'
            },
            creditCard: {
                'default': 'Veuillez fournir un numéro de carte de crédit valide'
            },
            cusip: {
                'default': 'Veuillez fournir un code CUSIP valide'
            },
            cvv: {
                'default': 'Veuillez fournir un code CVV valide'
            },
            date: {
                'default': 'Veuillez fournir une date valide',
                'min': 'Veuillez fournir une date supérieure à %s',
                'max': 'Veuillez fournir une date inférieure à %s',
                'range': 'Veuillez fournir une date comprise entre %s et %s'
            },
            different: {
                'default': 'Veuillez fournir une valeur différente'
            },
            digits: {
                'default': 'Veuillez ne fournir que des chiffres'
            },
            ean: {
                'default': 'Veuillez fournir un code-barre EAN valide'
            },
            ein: {
                'default': 'Veuillez fournir un code-barre EIN valide'
            },
            emailAddress: {
                'default': 'Veuillez fournir une adresse e-mail valide'
            },
            file: {
                'default': 'Veuillez choisir un fichier valide'
            },
            greaterThan: {
                'default': 'Veuillez fournir une valeur supérieure ou égale à %s',
                notInclusive: 'Veuillez fournir une valeur supérieure à %s'
            },
            grid: {
                'default': 'Veuillez fournir un code GRId valide'
            },
            hex: {
                'default': 'Veuillez fournir un nombre hexadécimal valide'
            },
            iban: {
                'default': 'Veuillez fournir un code IBAN valide',
                country: 'Veuillez fournir un code IBAN valide pour %s',
                countries: {
                    AD: 'Andorre',
                    AE: 'Émirats Arabes Unis',
                    AL: 'Albanie',
                    AO: 'Angola',
                    AT: 'Autriche',
                    AZ: 'Azerbaïdjan',
                    BA: 'Bosnie-Herzégovine',
                    BE: 'Belgique',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarie',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Bénin',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CI: 'Côte d\'ivoire',
                    CM: 'Cameroun',
                    CR: 'Costa Rica',
                    CV: 'Cap Vert',
                    CY: 'Chypre',
                    CZ: 'Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    DO: 'République Dominicaine',
                    DZ: 'Algérie',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    FO: 'Îles Féroé',
                    FR: 'France',
                    GB: 'Royaume Uni',
                    GE: 'Géorgie',
                    GI: 'Gibraltar',
                    GL: 'Groënland',
                    GR: 'Gréce',
                    GT: 'Guatemala',
                    HR: 'Croatie',
                    HU: 'Hongrie',
                    IE: 'Irlande',
                    IL: 'Israël',
                    IR: 'Iran',
                    IS: 'Islande',
                    IT: 'Italie',
                    JO: 'Jordanie',
                    KW: 'Koweït',
                    KZ: 'Kazakhstan',
                    LB: 'Liban',
                    LI: 'Liechtenstein',
                    LT: 'Lithuanie',
                    LU: 'Luxembourg',
                    LV: 'Lettonie',
                    MC: 'Monaco',
                    MD: 'Moldavie',
                    ME: 'Monténégro',
                    MG: 'Madagascar',
                    MK: 'Macédoine',
                    ML: 'Mali',
                    MR: 'Mauritanie',
                    MT: 'Malte',
                    MU: 'Maurice',
                    MZ: 'Mozambique',
                    NL: 'Pays-Bas',
                    NO: 'Norvège',
                    PK: 'Pakistan',
                    PL: 'Pologne',
                    PS: 'Palestine',
                    PT: 'Portugal',
                    QA: 'Quatar',
                    RO: 'Roumanie',
                    RS: 'Serbie',
                    SA: 'Arabie Saoudite',
                    SE: 'Suède',
                    SI: 'Slovènie',
                    SK: 'Slovaquie',
                    SM: 'Saint-Marin',
                    SN: 'Sénégal',
                    TL: 'Timor oriental',
                    TN: 'Tunisie',
                    TR: 'Turquie',
                    VG: 'Îles Vierges britanniques',
                    XK: 'République du Kosovo'
                }
            },
            id: {
                'default': 'Veuillez fournir un numéro d\'identification valide',
                country: 'Veuillez fournir un numéro d\'identification valide pour %s',
                countries: {
                    BA: 'Bosnie-Herzégovine',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CL: 'Chili',
                    CN: 'Chine',
                    CZ: 'Tchèque',
                    DK: 'Danemark',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    HR: 'Croatie',
                    IE: 'Irlande',
                    IS: 'Islande',
                    LT: 'Lituanie',
                    LV: 'Lettonie',
                    ME: 'Monténégro',
                    MK: 'Macédoine',
                    NL: 'Pays-Bas',
                    PL: 'Pologne',
                    RO: 'Roumanie',
                    RS: 'Serbie',
                    SE: 'Suède',
                    SI: 'Slovénie',
                    SK: 'Slovaquie',
                    SM: 'Saint-Marin',
                    TH: 'Thaïlande',
                    TR: 'Turquie',
                    ZA: 'Afrique du Sud'
                }
            },
            identical: {
                'default': 'Veuillez fournir la même valeur'
            },
            imei: {
                'default': 'Veuillez fournir un code IMEI valide'
            },
            imo: {
                'default': 'Veuillez fournir un code IMO valide'
            },
            integer: {
                'default': 'Veuillez fournir un nombre valide'
            },
            ip: {
                'default': 'Veuillez fournir une adresse IP valide',
                ipv4: 'Veuillez fournir une adresse IPv4 valide',
                ipv6: 'Veuillez fournir une adresse IPv6 valide'
            },
            isbn: {
                'default': 'Veuillez fournir un code ISBN valide'
            },
            isin: {
                'default': 'Veuillez fournir un code ISIN valide'
            },
            ismn: {
                'default': 'Veuillez fournir un code ISMN valide'
            },
            issn: {
                'default': 'Veuillez fournir un code ISSN valide'
            },
            lessThan: {
                'default': 'Veuillez fournir une valeur inférieure ou égale à %s',
                notInclusive: 'Veuillez fournir une valeur inférieure à %s'
            },
            mac: {
                'default': 'Veuillez fournir une adresse MAC valide'
            },
            meid: {
                'default': 'Veuillez fournir un code MEID valide'
            },
            notEmpty: {
                'default': 'Veuillez fournir une valeur'
            },
            numeric: {
                'default': 'Veuillez fournir une valeur décimale valide'
            },
            phone: {
                'default': 'Veuillez fournir un numéro de téléphone valide',
                country: 'Veuillez fournir un numéro de téléphone valide pour %s',
                countries: {
                    AE: 'Émirats Arabes Unis',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CN: 'Chine',
                    CZ: 'Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    ES: 'Espagne',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    IN: 'Inde',
                    MA: 'Maroc',
                    NL: 'Pays-Bas',
                    PK: 'Pakistan',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    SK: 'Slovaquie',
                    TH: 'Thaïlande',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Veuillez fournir une valeur valide'
            },
            regexp: {
                'default': 'Veuillez fournir une valeur correspondant au modèle'
            },
            remote: {
                'default': 'Veuillez fournir une valeur valide'
            },
            rtn: {
                'default': 'Veuillez fournir un code RTN valide'
            },
            sedol: {
                'default': 'Veuillez fournir a valid SEDOL number'
            },
            siren: {
                'default': 'Veuillez fournir un numéro SIREN valide'
            },
            siret: {
                'default': 'Veuillez fournir un numéro SIRET valide'
            },
            step: {
                'default': 'Veuillez fournir un écart valide de %s'
            },
            stringCase: {
                'default': 'Veuillez ne fournir que des caractères minuscules',
                upper: 'Veuillez ne fournir que des caractères majuscules'
            },
            stringLength: {
                'default': 'Veuillez fournir une valeur de longueur valide',
                less: 'Veuillez fournir moins de %s caractères',
                more: 'Veuillez fournir plus de %s caractères',
                between: 'Veuillez fournir entre %s et %s caractères'
            },
            uri: {
                'default': 'Veuillez fournir un URI valide'
            },
            uuid: {
                'default': 'Veuillez fournir un UUID valide',
                version: 'Veuillez fournir un UUID version %s number'
            },
            vat: {
                'default': 'Veuillez fournir un code VAT valide',
                country: 'Veuillez fournir un code VAT valide pour %s',
                countries: {
                    AT: 'Autriche',
                    BE: 'Belgique',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CY: 'Chypre',
                    CZ: 'Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    GR: 'Grèce',
                    EL: 'Grèce',
                    HU: 'Hongrie',
                    HR: 'Croatie',
                    IE: 'Irlande',
                    IS: 'Islande',
                    IT: 'Italie',
                    LT: 'Lituanie',
                    LU: 'Luxembourg',
                    LV: 'Lettonie',
                    MT: 'Malte',
                    NL: 'Pays-Bas',
                    NO: 'Norvège',
                    PL: 'Pologne',
                    PT: 'Portugal',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    RS: 'Serbie',
                    SE: 'Suède',
                    SI: 'Slovénie',
                    SK: 'Slovaquie',
                    VE: 'Venezuela',
                    ZA: 'Afrique du Sud'
                }
            },
            vin: {
                'default': 'Veuillez fournir un code VIN valide'
            },
            zipCode: {
                'default': 'Veuillez fournir un code postal valide',
                country: 'Veuillez fournir un code postal valide pour %s',
                countries: {
                    AT: 'Autriche',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CA: 'Canada',
                    CH: 'Suisse',
                    CZ: 'Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    ES: 'Espagne',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    IE: 'Irlande',
                    IN: 'Inde',
                    IT: 'Italie',
                    MA: 'Maroc',
                    NL: 'Pays-Bas',
                    PL: 'Pologne',
                    PT: 'Portugal',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    SE: 'Suède',
                    SG: 'Singapour',
                    SK: 'Slovaquie',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * French language package
     * Translated by @dlucazeau. Updated by @neilime, @jazzzz
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'fr_FR': {
            base64: {
                'default': 'Veuillez fournir une donnée correctement encodée en Base64'
            },
            between: {
                'default': 'Veuillez fournir une valeur comprise entre %s et %s',
                notInclusive: 'Veuillez fournir une valeur strictement comprise entre %s et %s'
            },
            bic: {
                'default': 'Veuillez fournir un code-barre BIC valide'
            },
            callback: {
                'default': 'Veuillez fournir une valeur valide'
            },
            choice: {
                'default': 'Veuillez fournir une valeur valide',
                less: 'Veuillez choisir au minimum %s options',
                more: 'Veuillez choisir au maximum %s options',
                between: 'Veuillez choisir de %s à %s options'
            },
            color: {
                'default': 'Veuillez fournir une couleur valide'
            },
            creditCard: {
                'default': 'Veuillez fournir un numéro de carte de crédit valide'
            },
            cusip: {
                'default': 'Veuillez fournir un code CUSIP valide'
            },
            cvv: {
                'default': 'Veuillez fournir un code CVV valide'
            },
            date: {
                'default': 'Veuillez fournir une date valide',
                'min': 'Veuillez fournir une date supérieure à %s',
                'max': 'Veuillez fournir une date inférieure à %s',
                'range': 'Veuillez fournir une date comprise entre %s et %s'
            },
            different: {
                'default': 'Veuillez fournir une valeur différente'
            },
            digits: {
                'default': 'Veuillez ne fournir que des chiffres'
            },
            ean: {
                'default': 'Veuillez fournir un code-barre EAN valide'
            },
            ein: {
                'default': 'Veuillez fournir un code-barre EIN valide'
            },
            emailAddress: {
                'default': 'Veuillez fournir une adresse e-mail valide'
            },
            file: {
                'default': 'Veuillez choisir un fichier valide'
            },
            greaterThan: {
                'default': 'Veuillez fournir une valeur supérieure ou égale à %s',
                notInclusive: 'Veuillez fournir une valeur supérieure à %s'
            },
            grid: {
                'default': 'Veuillez fournir un code GRId valide'
            },
            hex: {
                'default': 'Veuillez fournir un nombre hexadécimal valide'
            },
            iban: {
                'default': 'Veuillez fournir un code IBAN valide',
                country: 'Veuillez fournir un code IBAN valide pour %s',
                countries: {
                    AD: 'Andorre',
                    AE: 'Émirats Arabes Unis',
                    AL: 'Albanie',
                    AO: 'Angola',
                    AT: 'Autriche',
                    AZ: 'Azerbaïdjan',
                    BA: 'Bosnie-Herzégovine',
                    BE: 'Belgique',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarie',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Bénin',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CI: 'Côte d\'ivoire',
                    CM: 'Cameroun',
                    CR: 'Costa Rica',
                    CV: 'Cap Vert',
                    CY: 'Chypre',
                    CZ: 'République Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    DO: 'République Dominicaine',
                    DZ: 'Algérie',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    FO: 'Îles Féroé',
                    FR: 'France',
                    GB: 'Royaume Uni',
                    GE: 'Géorgie',
                    GI: 'Gibraltar',
                    GL: 'Groënland',
                    GR: 'Gréce',
                    GT: 'Guatemala',
                    HR: 'Croatie',
                    HU: 'Hongrie',
                    IE: 'Irlande',
                    IL: 'Israël',
                    IR: 'Iran',
                    IS: 'Islande',
                    IT: 'Italie',
                    JO: 'Jordanie',
                    KW: 'Koweït',
                    KZ: 'Kazakhstan',
                    LB: 'Liban',
                    LI: 'Liechtenstein',
                    LT: 'Lithuanie',
                    LU: 'Luxembourg',
                    LV: 'Lettonie',
                    MC: 'Monaco',
                    MD: 'Moldavie',
                    ME: 'Monténégro',
                    MG: 'Madagascar',
                    MK: 'Macédoine',
                    ML: 'Mali',
                    MR: 'Mauritanie',
                    MT: 'Malte',
                    MU: 'Maurice',
                    MZ: 'Mozambique',
                    NL: 'Pays-Bas',
                    NO: 'Norvège',
                    PK: 'Pakistan',
                    PL: 'Pologne',
                    PS: 'Palestine',
                    PT: 'Portugal',
                    QA: 'Quatar',
                    RO: 'Roumanie',
                    RS: 'Serbie',
                    SA: 'Arabie Saoudite',
                    SE: 'Suède',
                    SI: 'Slovènie',
                    SK: 'Slovaquie',
                    SM: 'Saint-Marin',
                    SN: 'Sénégal',
                    TL: 'Timor oriental',
                    TN: 'Tunisie',
                    TR: 'Turquie',
                    VG: 'Îles Vierges britanniques',
                    XK: 'République du Kosovo'
                }
            },
            id: {
                'default': 'Veuillez fournir un numéro d\'identification valide',
                country: 'Veuillez fournir un numéro d\'identification valide pour %s',
                countries: {
                    BA: 'Bosnie-Herzégovine',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CL: 'Chili',
                    CN: 'Chine',
                    CZ: 'République Tchèque',
                    DK: 'Danemark',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    HR: 'Croatie',
                    IE: 'Irlande',
                    IS: 'Islande',
                    LT: 'Lituanie',
                    LV: 'Lettonie',
                    ME: 'Monténégro',
                    MK: 'Macédoine',
                    NL: 'Pays-Bas',
                    PL: 'Pologne',
                    RO: 'Roumanie',
                    RS: 'Serbie',
                    SE: 'Suède',
                    SI: 'Slovénie',
                    SK: 'Slovaquie',
                    SM: 'Saint-Marin',
                    TH: 'Thaïlande',
                    TR: 'Turquie',
                    ZA: 'Afrique du Sud'
                }
            },
            identical: {
                'default': 'Veuillez fournir la même valeur'
            },
            imei: {
                'default': 'Veuillez fournir un code IMEI valide'
            },
            imo: {
                'default': 'Veuillez fournir un code IMO valide'
            },
            integer: {
                'default': 'Veuillez fournir un nombre valide'
            },
            ip: {
                'default': 'Veuillez fournir une adresse IP valide',
                ipv4: 'Veuillez fournir une adresse IPv4 valide',
                ipv6: 'Veuillez fournir une adresse IPv6 valide'
            },
            isbn: {
                'default': 'Veuillez fournir un code ISBN valide'
            },
            isin: {
                'default': 'Veuillez fournir un code ISIN valide'
            },
            ismn: {
                'default': 'Veuillez fournir un code ISMN valide'
            },
            issn: {
                'default': 'Veuillez fournir un code ISSN valide'
            },
            lessThan: {
                'default': 'Veuillez fournir une valeur inférieure ou égale à %s',
                notInclusive: 'Veuillez fournir une valeur inférieure à %s'
            },
            mac: {
                'default': 'Veuillez fournir une adresse MAC valide'
            },
            meid: {
                'default': 'Veuillez fournir un code MEID valide'
            },
            notEmpty: {
                'default': 'Veuillez fournir une valeur'
            },
            numeric: {
                'default': 'Veuillez fournir une valeur décimale valide'
            },
            phone: {
                'default': 'Veuillez fournir un numéro de téléphone valide',
                country: 'Veuillez fournir un numéro de téléphone valide pour %s',
                countries: {
                    AE: 'Émirats Arabes Unis',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CN: 'Chine',
                    CZ: 'République Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    ES: 'Espagne',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    IN: 'Inde',
                    MA: 'Maroc',
                    NL: 'Pays-Bas',
                    PK: 'Pakistan',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    SK: 'Slovaquie',
                    TH: 'Thaïlande',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Veuillez fournir une valeur valide'
            },
            regexp: {
                'default': 'Veuillez fournir une valeur correspondant au modèle'
            },
            remote: {
                'default': 'Veuillez fournir une valeur valide'
            },
            rtn: {
                'default': 'Veuillez fournir un code RTN valide'
            },
            sedol: {
                'default': 'Veuillez fournir a valid SEDOL number'
            },
            siren: {
                'default': 'Veuillez fournir un numéro SIREN valide'
            },
            siret: {
                'default': 'Veuillez fournir un numéro SIRET valide'
            },
            step: {
                'default': 'Veuillez fournir un écart valide de %s'
            },
            stringCase: {
                'default': 'Veuillez ne fournir que des caractères minuscules',
                upper: 'Veuillez ne fournir que des caractères majuscules'
            },
            stringLength: {
                'default': 'Veuillez fournir une valeur de longueur valide',
                less: 'Veuillez fournir moins de %s caractères',
                more: 'Veuillez fournir plus de %s caractères',
                between: 'Veuillez fournir entre %s et %s caractères'
            },
            uri: {
                'default': 'Veuillez fournir un URI valide'
            },
            uuid: {
                'default': 'Veuillez fournir un UUID valide',
                version: 'Veuillez fournir un UUID version %s number'
            },
            vat: {
                'default': 'Veuillez fournir un code VAT valide',
                country: 'Veuillez fournir un code VAT valide pour %s',
                countries: {
                    AT: 'Autriche',
                    BE: 'Belgique',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CY: 'Chypre',
                    CZ: 'République Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    GR: 'Grèce',
                    EL: 'Grèce',
                    HU: 'Hongrie',
                    HR: 'Croatie',
                    IE: 'Irlande',
                    IS: 'Islande',
                    IT: 'Italie',
                    LT: 'Lituanie',
                    LU: 'Luxembourg',
                    LV: 'Lettonie',
                    MT: 'Malte',
                    NL: 'Pays-Bas',
                    NO: 'Norvège',
                    PL: 'Pologne',
                    PT: 'Portugal',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    RS: 'Serbie',
                    SE: 'Suède',
                    SI: 'Slovénie',
                    SK: 'Slovaquie',
                    VE: 'Venezuela',
                    ZA: 'Afrique du Sud'
                }
            },
            vin: {
                'default': 'Veuillez fournir un code VIN valide'
            },
            zipCode: {
                'default': 'Veuillez fournir un code postal valide',
                country: 'Veuillez fournir un code postal valide pour %s',
                countries: {
                    AT: 'Autriche',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CA: 'Canada',
                    CH: 'Suisse',
                    CZ: 'République Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    ES: 'Espagne',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    IE: 'Irlande',
                    IN: 'Inde',
                    IT: 'Italie',
                    MA: 'Maroc',
                    NL: 'Pays-Bas',
                    PL: 'Pologne',
                    PT: 'Portugal',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    SE: 'Suède',
                    SG: 'Singapour',
                    SK: 'Slovaquie',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Hebrew language package
     * Translated by @yakidahan
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'he_IL': {
            base64: {
                'default': 'נא להזין ערך המקודד בבסיס 64'
            },
            between: {
                'default': 'נא להזין ערך בין %s ל-%s',
                notInclusive: 'נא להזין ערך בין %s ל-%s בדיוק'
            },
            bic: {
                'default': 'נא להזין מספר BIC תקין'
            },
            callback: {
                'default': 'נא להזין ערך תקין'
            },
            choice: {
                'default': 'נא להזין ערך תקין',
                less: 'נא לבחור מינימום %s אפשרויות',
                more: 'נא לבחור מקסימום %s אפשרויות',
                between: 'נא לבחור  %s-%s אפשרויות'
            },
            color: {
                'default': 'נא להזין קוד צבע תקין'
            },
            creditCard: {
                'default': 'נא להזין מספר כרטיס אשראי תקין'
            },
            cusip: {
                'default': 'נא להזין מספר CUSIP תקין'
            },
            cvv: {
                'default': 'נא להזין מספר CVV תקין'
            },
            date: {
                'default': 'נא להזין תאריך תקין',
                min: 'נא להזין תאריך אחרי %s',
                max: 'נא להזין תאריך לפני %s',
                range: 'נא להזין תאריך בטווח %s - %s'
            },
            different: {
                'default': 'נא להזין ערך שונה'
            },
            digits: {
                'default': 'נא להזין ספרות בלבד'
            },
            ean: {
                'default': 'נא להזין מספר EAN תקין'
            },
            ein: {
                'default': 'נא להזין מספר EIN תקין'
            },
            emailAddress: {
                'default': 'נא להזין כתובת דוא"ל תקינה'
            },
            file: {
                'default': 'נא לבחור קובץ חוקי'
            },
            greaterThan: {
                'default': 'נא להזין ערך גדול או שווה ל-%s',
                notInclusive: 'נא להזין ערך גדול מ-%s'
            },
            grid: {
                'default': 'נא להזין מספר GRId תקין'
            },
            hex: {
                'default': 'נא להזין מספר הקסדצימלי תקין'
            },
            iban: {
                'default': 'נא להזין מספר IBAN תקין',
                country: 'נא להזין מספר IBAN תקני ב%s',
                countries: {
                    AD: 'אנדורה',
                    AE: 'איחוד האמירויות הערבי',
                    AL: 'אלבניה',
                    AO: 'אנגולה',
                    AT: 'אוסטריה',
                    AZ: 'אזרבייגאן',
                    BA: 'בוסניה והרצגובינה',
                    BE: 'בלגיה',
                    BF: 'בורקינה פאסו',
                    BG: 'בולגריה',
                    BH: 'בחריין',
                    BI: 'בורונדי',
                    BJ: 'בנין',
                    BR: 'ברזיל',
                    CH: 'שווייץ',
                    CI: 'חוף השנהב',
                    CM: 'קמרון',
                    CR: 'קוסטה ריקה',
                    CV: 'קייפ ורדה',
                    CY: 'קפריסין',
                    CZ: 'צכיה',
                    DE: 'גרמניה',
                    DK: 'דנמרק',
                    DO: 'דומיניקה',
                    DZ: 'אלגיריה',
                    EE: 'אסטוניה',
                    ES: 'ספרד',
                    FI: 'פינלנד',
                    FO: 'איי פארו',
                    FR: 'צרפת',
                    GB: 'בריטניה',
                    GE: 'גאורגיה',
                    GI: 'גיברלטר',
                    GL: 'גרינלנד',
                    GR: 'יוון',
                    GT: 'גואטמלה',
                    HR: 'קרואטיה',
                    HU: 'הונגריה',
                    IE: 'אירלנד',
                    IL: 'ישראל',
                    IR: 'איראן',
                    IS: 'איסלנד',
                    IT: 'איטליה',
                    JO: 'ירדן',
                    KW: 'כווית',
                    KZ: 'קזחסטן',
                    LB: 'לבנון',
                    LI: 'ליכטנשטיין',
                    LT: 'ליטא',
                    LU: 'לוקסמבורג',
                    LV: 'לטביה',
                    MC: 'מונקו',
                    MD: 'מולדובה',
                    ME: 'מונטנגרו',
                    MG: 'מדגסקר',
                    MK: 'מקדוניה',
                    ML: 'מאלי',
                    MR: 'מאוריטניה',
                    MT: 'מלטה',
                    MU: 'מאוריציוס',
                    MZ: 'מוזמביק',
                    NL: 'הולנד',
                    NO: 'נורווגיה',
                    PK: 'פקיסטן',
                    PL: 'פולין',
                    PS: 'פלסטין',
                    PT: 'פורטוגל',
                    QA: 'קטאר',
                    RO: 'רומניה',
                    RS: 'סרביה',
                    SA: 'ערב הסעודית',
                    SE: 'שוודיה',
                    SI: 'סלובניה',
                    SK: 'סלובקיה',
                    SM: 'סן מרינו',
                    SN: 'סנגל',
                    TL: 'מזרח טימור',
                    TN: 'תוניסיה',
                    TR: 'טורקיה',
                    VG: 'איי הבתולה, בריטניה',
                    XK: 'רפובליקה של קוסובו'
                }
            },
            id: {
                'default': 'נא להזין מספר זהות תקין',
                country: 'נא להזין מספר זהות תקני ב%s',
                countries: {
                    BA: 'בוסניה והרצגובינה',
                    BG: 'בולגריה',
                    BR: 'ברזיל',
                    CH: 'שווייץ',
                    CL: 'צילה',
                    CN: 'סין',
                    CZ: 'צכיה',
                    DK: 'דנמרק',
                    EE: 'אסטוניה',
                    ES: 'ספרד',
                    FI: 'פינלנד',
                    HR: 'קרואטיה',
                    IE: 'אירלנד',
                    IS: 'איסלנד',
                    LT: 'ליטא',
                    LV: 'לטביה',
                    ME: 'מונטנגרו',
                    MK: 'מקדוניה',
                    NL: 'הולנד',
                    PL: 'פולין',
                    RO: 'רומניה',
                    RS: 'סרביה',
                    SE: 'שוודיה',
                    SI: 'סלובניה',
                    SK: 'סלובקיה',
                    SM: 'סן מרינו',
                    TH: 'תאילנד',
                    TR: 'טורקיה',
                    ZA: 'דרום אפריקה'
                }
            },
            identical: {
                'default': 'נא להזין את הערך שנית'
            },
            imei: {
                'default': 'נא להזין מספר IMEI תקין'
            },
            imo: {
                'default': 'נא להזין מספר IMO תקין'
            },
            integer: {
                'default': 'נא להזין מספר תקין'
            },
            ip: {
                'default': 'נא להזין כתובת IP תקינה',
                ipv4: 'נא להזין כתובת IPv4 תקינה',
                ipv6: 'נא להזין כתובת IPv6 תקינה'
            },
            isbn: {
                'default': 'נא להזין מספר ISBN תקין'
            },
            isin: {
                'default': 'נא להזין מספר ISIN תקין'
            },
            ismn: {
                'default': 'נא להזין מספר ISMN תקין'
            },
            issn: {
                'default': 'נא להזין מספר ISSN תקין'
            },
            lessThan: {
                'default': 'נא להזין ערך קטן או שווה ל-%s',
                notInclusive: 'נא להזין ערך קטן מ-%s'
            },
            mac: {
                'default': 'נא להזין מספר MAC תקין'
            },
            meid: {
                'default': 'נא להזין מספר MEID תקין'
            },
            notEmpty: {
                'default': 'נא להזין ערך'
            },
            numeric: {
                'default': 'נא להזין מספר עשרוני חוקי'
            },
            phone: {
                'default': 'נא להין מספר טלפון תקין',
                country: 'נא להזין מספר טלפון תקין ב%s',
                countries: {
                    AE: 'איחוד האמירויות הערבי',
                    BG: 'בולגריה',
                    BR: 'ברזיל',
                    CN: 'סין',
                    CZ: 'צכיה',
                    DE: 'גרמניה',
                    DK: 'דנמרק',
                    ES: 'ספרד',
                    FR: 'צרפת',
                    GB: 'בריטניה',
                    IN: 'הודו',
                    MA: 'מרוקו',
                    NL: 'הולנד',
                    PK: 'פקיסטן',
                    RO: 'רומניה',
                    RU: 'רוסיה',
                    SK: 'סלובקיה',
                    TH: 'תאילנד',
                    US: 'ארצות הברית',
                    VE: 'ונצואלה'
                }
            },
            promise: {
                'default': 'נא להזין ערך תקין'
            },
            regexp: {
                'default': 'נא להזין ערך תואם לתבנית'
            },
            remote: {
                'default': 'נא להזין ערך תקין'
            },
            rtn: {
                'default': 'נא להזין מספר RTN תקין'
            },
            sedol: {
                'default': 'נא להזין מספר SEDOL תקין'
            },
            siren: {
                'default': 'נא להזין מספר SIREN תקין'
            },
            siret: {
                'default': 'נא להזין מספר SIRET תקין'
            },
            step: {
                'default': 'נא להזין שלב תקין מתוך %s'
            },
            stringCase: {
                'default': 'נא להזין אותיות קטנות בלבד',
                upper: 'נא להזין אותיות גדולות בלבד'
            },
            stringLength: {
                'default': 'נא להזין ערך באורך חוקי',
                less: 'נא להזין ערך קטן מ-%s תווים',
                more: 'נא להזין ערך גדול מ- %s תווים',
                between: 'נא להזין ערך בין %s עד %s תווים'
            },
            uri: {
                'default': 'נא להזין URI תקין'
            },
            uuid: {
                'default': 'נא להזין מספר UUID תקין',
                version: 'נא להזין מספר UUID גרסה %s תקין'
            },
            vat: {
                'default': 'נא להזין מספר VAT תקין',
                country: 'נא להזין מספר VAT תקין ב%s',
                countries: {
                    AT: 'אוסטריה',
                    BE: 'בלגיה',
                    BG: 'בולגריה',
                    BR: 'ברזיל',
                    CH: 'שווייץ',
                    CY: 'קפריסין',
                    CZ: 'צכיה',
                    DE: 'גרמניה',
                    DK: 'דנמרק',
                    EE: 'אסטוניה',
                    ES: 'ספרד',
                    FI: 'פינלנד',
                    FR: 'צרפת',
                    GB: 'בריטניה',
                    GR: 'יוון',
                    EL: 'יוון',
                    HU: 'הונגריה',
                    HR: 'קרואטיה',
                    IE: 'אירלנד',
                    IS: 'איסלנד',
                    IT: 'איטליה',
                    LT: 'ליטא',
                    LU: 'לוקסמבורג',
                    LV: 'לטביה',
                    MT: 'מלטה',
                    NL: 'הולנד',
                    NO: 'נורווגיה',
                    PL: 'פולין',
                    PT: 'פורטוגל',
                    RO: 'רומניה',
                    RU: 'רוסיה',
                    RS: 'סרביה',
                    SE: 'שוודיה',
                    SI: 'סלובניה',
                    SK: 'סלובקיה',
                    VE: 'ונצואלה',
                    ZA: 'דרום אפריקה'
                }
            },
            vin: {
                'default': 'נא להזין מספר VIN תקין'
            },
            zipCode: {
                'default': 'נא להזין מיקוד תקין',
                country: 'נא להזין מיקוד תקין ב%s',
                countries: {
                    AT: 'אוסטריה',
                    BG: 'בולגריה',
                    BR: 'ברזיל',
                    CA: 'קנדה',
                    CH: 'שווייץ',
                    CZ: 'צכיה',
                    DE: 'גרמניה',
                    DK: 'דנמרק',
                    ES: 'ספרד',
                    FR: 'צרפת',
                    GB: 'בריטניה',
                    IE: 'אירלנד',
                    IN: 'הודו',
                    IT: 'איטליה',
                    MA: 'מרוקו',
                    NL: 'הולנד',
                    PL: 'פולין',
                    PT: 'פורטוגל',
                    RO: 'רומניה',
                    RU: 'רוסיה',
                    SE: 'שוודיה',
                    SG: 'סינגפור',
                    SK: 'סלובקיה',
                    US: 'ארצות הברית'
                }
            }
        }
    });
}(jQuery));
(function ($) {
    /**
     * Hindi (India) language package
     * Translated by @gladiatorAsh
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'hi_IN': {
            base64: {
                'default': 'कृपया एक वैध 64 इनकोडिंग मूल्यांक प्रविष्ट करें'
            },
            between: {
                'default': 'कृपया %s और %s के बीच एक मूल्यांक प्रविष्ट करें',
                notInclusive: 'कृपया सिर्फ़ %s और %s के बीच मूल्यांक प्रविष्ट करें'
            },
            bic: {
                'default': 'कृपया एक वैध BIC संख्या प्रविष्ट करें'
            },
            callback: {
                'default': 'कृपया एक वैध मूल्यांक प्रविष्ट करें'
            },
            choice: {
                'default': 'कृपया एक वैध मूल्यांक प्रविष्ट करें',
                less: 'कृपया कम से कम %s विकल्पों का चयन करें',
                more: 'कृपया अधिकतम %s विकल्पों का चयन करें',
                between: 'कृपया %s और %s के बीच विकल्पों का चयन करें'
            },
            color: {
                'default': 'कृपया एक वैध रंग प्रविष्ट करें'
            },
            creditCard: {
                'default': 'कृपया एक वैध क्रेडिट कार्ड संख्या प्रविष्ट करें'
            },
            cusip: {
                'default': 'कृपया एक वैध CUSIP संख्या प्रविष्ट करें'
            },
            cvv: {
                'default': 'कृपया एक वैध CVV संख्या प्रविष्ट करें'
            },
            date: {
                'default': 'कृपया एक वैध दिनांक प्रविष्ट करें',
                min: 'कृपया %s के बाद एक वैध दिनांक प्रविष्ट करें',
                max: 'कृपया %s के पहले एक वैध दिनांक प्रविष्ट करें',
                range: 'कृपया %s से %s के बीच एक वैध दिनांक प्रविष्ट करें'
            },
            different: {
                'default': 'कृपया एक अलग मूल्यांक प्रविष्ट करें'
            },
            digits: {
                'default': 'कृपया केवल अंक प्रविष्ट करें'
            },
            ean: {
                'default': 'कृपया एक वैध EAN संख्या प्रविष्ट करें'
            },
            ein: {
                'default': 'कृपया एक वैध EIN संख्या प्रविष्ट करें'
            },
            emailAddress: {
                'default': 'कृपया एक वैध ईमेल पता प्रविष्ट करें'
            },
            file: {
                'default': 'कृपया एक वैध फ़ाइल का चयन करें'
            },
            greaterThan: {
                'default': 'कृपया %s से अधिक या बराबर एक मूल्यांक प्रविष्ट करें',
                notInclusive: 'कृपया %s से अधिक एक मूल्यांक प्रविष्ट करें'
            },
            grid: {
                'default': 'कृपया एक वैध GRID संख्या प्रविष्ट करें'
            },
            hex: {
                'default': 'कृपया एक वैध हेक्साडेसिमल संख्या प्रविष्ट करें'
            },
            iban: {
                'default': 'कृपया एक वैध IBAN संख्या प्रविष्ट करें',
                country: 'कृपया %s में एक वैध IBAN संख्या प्रविष्ट करें',
                countries: {
                    AD: 'अंडोरा',
                    AE: 'संयुक्त अरब अमीरात',
                    AL: 'अल्बानिया',
                    AO: 'अंगोला',
                    AT: 'ऑस्ट्रिया',
                    AZ: 'अज़रबैजान',
                    BA: 'बोस्निया और हर्जेगोविना',
                    BE: 'बेल्जियम',
                    BF: 'बुर्किना फासो',
                    BG: 'बुल्गारिया',
                    BH: 'बहरीन',
                    BI: 'बुस्र्न्दी',
                    BJ: 'बेनिन',
                    BR: 'ब्राज़िल',
                    CH: 'स्विट्जरलैंड',
                    CI: 'आइवरी कोस्ट',
                    CM: 'कैमरून',
                    CR: 'कोस्टा रिका',
                    CV: 'केप वर्डे',
                    CY: 'साइप्रस',
                    CZ: 'चेक रिपब्लिक',
                    DE: 'जर्मनी',
                    DK: 'डेनमार्क',
                    DO: 'डोमिनिकन गणराज्य',
                    DZ: 'एलजीरिया',
                    EE: 'एस्तोनिया',
                    ES: 'स्पेन',
                    FI: 'फिनलैंड',
                    FO: 'फरो आइलैंड्स',
                    FR: 'फ्रांस',
                    GB: 'यूनाइटेड किंगडम',
                    GE: 'जॉर्जिया',
                    GI: 'जिब्राल्टर',
                    GL: 'ग्रीनलैंड',
                    GR: 'ग्रीस',
                    GT: 'ग्वाटेमाला',
                    HR: 'क्रोएशिया',
                    HU: 'हंगरी',
                    IE: 'आयरलैंड',
                    IL: 'इज़राइल',
                    IR: 'ईरान',
                    IS: 'आइसलैंड',
                    IT: 'इटली',
                    JO: 'जॉर्डन',
                    KW: 'कुवैत',
                    KZ: 'कजाखस्तान',
                    LB: 'लेबनान',
                    LI: 'लिकटेंस्टीन',
                    LT: 'लिथुआनिया',
                    LU: 'लक्समबर्ग',
                    LV: 'लाटविया',
                    MC: 'मोनाको',
                    MD: 'माल्डोवा',
                    ME: 'मॉन्टेंगरो',
                    MG: 'मेडागास्कर',
                    MK: 'मैसेडोनिया',
                    ML: 'माली',
                    MR: 'मॉरिटानिया',
                    MT: 'माल्टा',
                    MU: 'मॉरीशस',
                    MZ: 'मोज़ाम्बिक',
                    NL: 'नीदरलैंड',
                    NO: 'नॉर्वे',
                    PK: 'पाकिस्तान',
                    PL: 'पोलैंड',
                    PS: 'फिलिस्तीन',
                    PT: 'पुर्तगाल',
                    QA: 'क़तर',
                    RO: 'रोमानिया',
                    RS: 'सर्बिया',
                    SA: 'सऊदी अरब',
                    SE: 'स्वीडन',
                    SI: 'स्लोवेनिया',
                    SK: 'स्लोवाकिया',
                    SM: 'सैन मैरिनो',
                    SN: 'सेनेगल',
                    TL: 'पूर्वी तिमोर',
                    TN: 'ट्यूनीशिया',
                    TR: 'तुर्की',
                    VG: 'वर्जिन आइलैंड्स, ब्रिटिश',
                    XK: 'कोसोवो गणराज्य'
                }
            },
            id: {
                'default': 'कृपया एक वैध पहचान संख्या प्रविष्ट करें',
                country: 'कृपया %s में एक वैध पहचान संख्या प्रविष्ट करें',
                countries: {
                    BA: 'बोस्निया और हर्जेगोविना',
                    BG: 'बुल्गारिया',
                    BR: 'ब्राज़िल',
                    CH: 'स्विट्जरलैंड',
                    CL: 'चिली',
                    CN: 'चीन',
                    CZ: 'चेक रिपब्लिक',
                    DK: 'डेनमार्क',
                    EE: 'एस्तोनिया',
                    ES: 'स्पेन',
                    FI: 'फिनलैंड',
                    HR: 'क्रोएशिया',
                    IE: 'आयरलैंड',
                    IS: 'आइसलैंड',
                    LT: 'लिथुआनिया',
                    LV: 'लाटविया',
                    ME: 'मोंटेनेग्रो',
                    MK: 'मैसेडोनिया',
                    NL: 'नीदरलैंड',
                    PL: 'पोलैंड',
                    RO: 'रोमानिया',
                    RS: 'सर्बिया',
                    SE: 'स्वीडन',
                    SI: 'स्लोवेनिया',
                    SK: 'स्लोवाकिया',
                    SM: 'सैन मैरिनो',
                    TH: 'थाईलैंड',
                    TR: 'तुर्की',
                    ZA: 'दक्षिण अफ्रीका'
                }
            },
            identical: {
                'default': 'कृपया वही मूल्यांक दोबारा प्रविष्ट करें'
            },
            imei: {
                'default': 'कृपया एक वैध IMEI संख्या प्रविष्ट करें'
            },
            imo: {
                'default': 'कृपया एक वैध IMO संख्या प्रविष्ट करें'
            },
            integer: {
                'default': 'कृपया एक वैध संख्या प्रविष्ट करें'
            },
            ip: {
                'default': 'कृपया एक वैध IP पता प्रविष्ट करें',
                ipv4: 'कृपया एक वैध IPv4 पता प्रविष्ट करें',
                ipv6: 'कृपया एक वैध IPv6 पता प्रविष्ट करें'
            },
            isbn: {
                'default': 'कृपया एक वैध ISBN संख्या दर्ज करें'
            },
            isin: {
                'default': 'कृपया एक वैध ISIN संख्या दर्ज करें'
            },
            ismn: {
                'default': 'कृपया एक वैध ISMN संख्या दर्ज करें'
            },
            issn: {
                'default': 'कृपया एक वैध ISSN संख्या दर्ज करें'
            },
            lessThan: {
                'default': 'कृपया %s से कम या बराबर एक मूल्यांक प्रविष्ट करें',
                notInclusive: 'कृपया %s से कम एक मूल्यांक प्रविष्ट करें'
            },
            mac: {
                'default': 'कृपया एक वैध MAC पता प्रविष्ट करें'
            },
            meid: {
                'default': 'कृपया एक वैध MEID संख्या प्रविष्ट करें'
            },
            notEmpty: {
                'default': 'कृपया एक मूल्यांक प्रविष्ट करें'
            },
            numeric: {
                'default': 'कृपया एक वैध दशमलव संख्या प्रविष्ट करें'
            },
            phone: {
                'default': 'कृपया एक वैध फ़ोन नंबर प्रविष्ट करें',
                country: 'कृपया %s में एक वैध फ़ोन नंबर प्रविष्ट करें',
                countries: {
                    AE: 'संयुक्त अरब अमीरात',
                    BG: 'बुल्गारिया',
                    BR: 'ब्राज़िल',
                    CN: 'चीन',
                    CZ: 'चेक रिपब्लिक',
                    DE: 'जर्मनी',
                    DK: 'डेनमार्क',
                    ES: 'स्पेन',
                    FR: 'फ्रांस',
                    GB: 'यूनाइटेड किंगडम',
                    IN: 'भारत',
                    MA: 'मोरक्को',
                    NL: 'नीदरलैंड',
                    PK: 'पाकिस्तान',
                    RO: 'रोमानिया',
                    RU: 'रुस',
                    SK: 'स्लोवाकिया',
                    TH: 'थाईलैंड',
                    US: 'अमेरीका',
                    VE: 'वेनेजुएला'
                }
            },
            promise: {
                'default': 'कृपया एक वैध मूल्यांक प्रविष्ट करें'
            },
            regexp: {
                'default': 'कृपया पैटर्न से मेल खाते एक मूल्यांक प्रविष्ट करें'
            },
            remote: {
                'default': 'कृपया एक वैध मूल्यांक प्रविष्ट करें'
            },
            rtn: {
                'default': 'कृपया एक वैध RTN संख्या प्रविष्ट करें'
            },
            sedol: {
                'default': 'कृपया एक वैध SEDOL संख्या प्रविष्ट करें'
            },
            siren: {
                'default': 'कृपया एक वैध SIREN संख्या प्रविष्ट करें'
            },
            siret: {
                'default': 'कृपया एक वैध SIRET संख्या प्रविष्ट करें'
            },
            step: {
                'default': '%s के एक गुणज मूल्यांक प्रविष्ट करें'
            },
            stringCase: {
                'default': 'कृपया केवल छोटे पात्रों का प्रविष्ट करें',
                upper: 'कृपया केवल बड़े पात्रों का प्रविष्ट करें'
            },
            stringLength: {
                'default': 'कृपया वैध लंबाई का एक मूल्यांक प्रविष्ट करें',
                less: 'कृपया %s से कम पात्रों को प्रविष्ट करें',
                more: 'कृपया %s से अधिक पात्रों को प्रविष्ट करें',
                between: 'कृपया %s से %s के बीच लंबाई का एक मूल्यांक प्रविष्ट करें'
            },
            uri: {
                'default': 'कृपया एक वैध URI प्रविष्ट करें'
            },
            uuid: {
                'default': 'कृपया एक वैध UUID संख्या प्रविष्ट करें',
                version: 'कृपया एक वैध UUID संस्करण %s संख्या प्रविष्ट करें'
            },
            vat: {
                'default': 'कृपया एक वैध VAT संख्या प्रविष्ट करें',
                country: 'कृपया एक वैध VAT संख्या %s मे प्रविष्ट करें',
                countries: {
                    AT: 'ऑस्ट्रिया',
                    BE: 'बेल्जियम',
                    BG: 'बुल्गारिया',
                    BR: 'ब्राज़िल',
                    CH: 'स्विट्जरलैंड',
                    CY: 'साइप्रस',
                    CZ: 'चेक रिपब्लिक',
                    DE: 'जर्मनी',
                    DK: 'डेनमार्क',
                    EE: 'एस्तोनिया',
                    ES: 'स्पेन',
                    FI: 'फिनलैंड',
                    FR: 'फ्रांस',
                    GB: 'यूनाइटेड किंगडम',
                    GR: 'ग्रीस',
                    EL: 'ग्रीस',
                    HU: 'हंगरी',
                    HR: 'क्रोएशिया',
                    IE: 'आयरलैंड',
                    IS: 'आइसलैंड',
                    IT: 'इटली',
                    LT: 'लिथुआनिया',
                    LU: 'लक्समबर्ग',
                    LV: 'लाटविया',
                    MT: 'माल्टा',
                    NL: 'नीदरलैंड',
                    NO: 'नॉर्वे',
                    PL: 'पोलैंड',
                    PT: 'पुर्तगाल',
                    RO: 'रोमानिया',
                    RU: 'रुस',
                    RS: 'सर्बिया',
                    SE: 'स्वीडन',
                    SI: 'स्लोवेनिया',
                    SK: 'स्लोवाकिया',
                    VE: 'वेनेजुएला',
                    ZA: 'दक्षिण अफ्रीका'
                }
            },
            vin: {
                'default': 'कृपया एक वैध VIN संख्या प्रविष्ट करें'
            },
            zipCode: {
                'default': 'कृपया एक वैध डाक कोड प्रविष्ट करें',
                country: 'कृपया एक वैध डाक कोड %s मे प्रविष्ट करें',
                countries: {
                    AT: 'ऑस्ट्रिया',
                    BG: 'बुल्गारिया',
                    BR: 'ब्राज़िल',
                    CA: 'कनाडा',
                    CH: 'स्विट्जरलैंड',
                    CZ: 'चेक रिपब्लिक',
                    DE: 'जर्मनी',
                    DK: 'डेनमार्क',
                    ES: 'स्पेन',
                    FR: 'फ्रांस',
                    GB: 'यूनाइटेड किंगडम',
                    IE: 'आयरलैंड',
                    IN: 'भारत',
                    IT: 'इटली',
                    MA: 'मोरक्को',
                    NL: 'नीदरलैंड',
                    PL: 'पोलैंड',
                    PT: 'पुर्तगाल',
                    RO: 'रोमानिया',
                    RU: 'रुस',
                    SE: 'स्वीडन',
                    SG: 'सिंगापुर',
                    SK: 'स्लोवाकिया',
                    US: 'अमेरीका'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Hungarian language package
     * Translated by @blackfyre
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'hu_HU': {
            base64: {
                'default': 'Kérlek, hogy érvényes base 64 karakter láncot adj meg'
            },
            between: {
                'default': 'Kérlek, hogy %s és %s között adj meg értéket',
                notInclusive: 'Kérlek, hogy %s és %s között adj meg értéket'
            },
            bic: {
                'default': 'Kérlek, hogy érvényes BIC számot adj meg'
            },
            callback: {
                'default': 'Kérlek, hogy érvényes értéket adj meg'
            },
            choice: {
                'default': 'Kérlek, hogy érvényes értéket adj meg',
                less: 'Kérlek, hogy legalább %s lehetőséget válassz ki',
                more: 'Kérlek, hogy maximum %s lehetőséget válassz ki',
                between: 'Kérlek, hogy válassz %s - %s lehetőséget'
            },
            color: {
                'default': 'Kérlek, hogy érvényes színt adj meg'
            },
            creditCard: {
                'default': 'Kérlek, hogy érvényes bankkártya számot adj meg'
            },
            cusip: {
                'default': 'Kérlek, hogy érvényes CUSIP számot adj meg'
            },
            cvv: {
                'default': 'Kérlek, hogy érvényes CVV számot adj meg'
            },
            date: {
                'default': 'Kérlek, hogy érvényes dátumot adj meg',
                min: 'Kérlek, hogy %s -nál későbbi dátumot adj meg',
                max: 'Kérlek, hogy %s -nál korábbi dátumot adj meg',
                range: 'Kérlek, hogy %s - %s között adj meg dátumot'
            },
            different: {
                'default': 'Kérlek, hogy egy másik értéket adj meg'
            },
            digits: {
                'default': 'Kérlek, hogy csak számot adj meg'
            },
            ean: {
                'default': 'Kérlek, hogy érvényes EAN számot adj meg'
            },
            ein: {
                'default': 'Kérlek, hogy érvényes EIN számot adj meg'
            },
            emailAddress: {
                'default': 'Kérlek, hogy érvényes email címet adj meg'
            },
            file: {
                'default': 'Kérlek, hogy érvényes fájlt válassz'
            },
            greaterThan: {
                'default': 'Kérlek, hogy ezzel (%s) egyenlő vagy nagyobb számot adj meg',
                notInclusive: 'Kérlek, hogy ennél (%s) nagyobb számot adj meg'
            },
            grid: {
                'default': 'Kérlek, hogy érvényes GRId számot adj meg'
            },
            hex: {
                'default': 'Kérlek, hogy érvényes hexadecimális számot adj meg'
            },
            iban: {
                'default': 'Kérlek, hogy érvényes IBAN számot adj meg',
                country: 'Kérlek, hogy %s érvényes  IBAN számot adj meg',
                countries: {
                    AD: 'az Andorrai Fejedelemségben', /* Special case */
                    AE: 'az Egyesült Arab Emírségekben', /* Special case */
                    AL: 'Albániában',
                    AO: 'Angolában',
                    AT: 'Ausztriában',
                    AZ: 'Azerbadjzsánban',
                    BA: 'Bosznia-Hercegovinában', /* Special case */
                    BE: 'Belgiumban',
                    BF: 'Burkina Fasoban',
                    BG: 'Bulgáriában',
                    BH: 'Bahreinben',
                    BI: 'Burundiban',
                    BJ: 'Beninben',
                    BR: 'Brazíliában',
                    CH: 'Svájcban',
                    CI: 'az Elefántcsontparton', /* Special case */
                    CM: 'Kamerunban',
                    CR: 'Costa Ricán', /* Special case */
                    CV: 'Zöld-foki Köztársaságban',
                    CY: 'Cypruson',
                    CZ: 'Csehországban',
                    DE: 'Németországban',
                    DK: 'Dániában',
                    DO: 'Dominikán', /* Special case */
                    DZ: 'Algériában',
                    EE: 'Észtországban',
                    ES: 'Spanyolországban',
                    FI: 'Finnországban',
                    FO: 'a Feröer-szigeteken', /* Special case */
                    FR: 'Franciaországban',
                    GB: 'az Egyesült Királyságban', /* Special case */
                    GE: 'Grúziában',
                    GI: 'Gibraltáron', /* Special case */
                    GL: 'Grönlandon', /* Special case */
                    GR: 'Görögországban',
                    GT: 'Guatemalában',
                    HR: 'Horvátországban',
                    HU: 'Magyarországon',
                    IE: 'Írországban', /* Special case */
                    IL: 'Izraelben',
                    IR: 'Iránban', /* Special case */
                    IS: 'Izlandon',
                    IT: 'Olaszországban',
                    JO: 'Jordániában',
                    KW: 'Kuvaitban', /* Special case */
                    KZ: 'Kazahsztánban',
                    LB: 'Libanonban',
                    LI: 'Liechtensteinben',
                    LT: 'Litvániában',
                    LU: 'Luxemburgban',
                    LV: 'Lettországban',
                    MC: 'Monacóban', /* Special case */
                    MD: 'Moldovában', /* Special case */
                    ME: 'Montenegróban',
                    MG: 'Madagaszkáron',
                    MK: 'Macedóniában',
                    ML: 'Malin',
                    MR: 'Mauritániában',
                    MT: 'Máltán',
                    MU: 'Mauritiuson',
                    MZ: 'Mozambikban',
                    NL: 'Hollandiában',
                    NO: 'Norvégiában',
                    PK: 'Pakisztánban',
                    PL: 'Lengyelországban',
                    PS: 'Palesztinában',
                    PT: 'Portugáliában',
                    QA: 'Katarban', /* Special case */
                    RO: 'Romániában',
                    RS: 'Szerbiában',
                    SA: 'Szaúd-Arábiában',
                    SE: 'Svédországban',
                    SI: 'Szlovéniában',
                    SK: 'Szlovákiában',
                    SM: 'San Marinoban',
                    SN: 'Szenegálban', /* Special case */
                    TL: 'Kelet-Timor',
                    TN: 'Tunéziában', /* Special case */
                    TR: 'Törökországban',
                    VG: 'Britt Virgin szigeteken', /* Special case */
                    XK: 'Koszovói Köztársaság'
                }
            },
            id: {
                'default': 'Kérlek, hogy érvényes személy azonosító számot adj meg',
                country: 'Kérlek, hogy %s érvényes személy azonosító számot adj meg',
                countries: {
                    BA: 'Bosznia-Hercegovinában',
                    BG: 'Bulgáriában',
                    BR: 'Brazíliában',
                    CH: 'Svájcban',
                    CL: 'Chilében',
                    CN: 'Kínában',
                    CZ: 'Csehországban',
                    DK: 'Dániában',
                    EE: 'Észtországban',
                    ES: 'Spanyolországban',
                    FI: 'Finnországban',
                    HR: 'Horvátországban',
                    IE: 'Írországban',
                    IS: 'Izlandon',
                    LT: 'Litvániában',
                    LV: 'Lettországban',
                    ME: 'Montenegróban',
                    MK: 'Macedóniában',
                    NL: 'Hollandiában',
                    PL: 'Lengyelországban',
                    RO: 'Romániában',
                    RS: 'Szerbiában',
                    SE: 'Svédországban',
                    SI: 'Szlovéniában',
                    SK: 'Szlovákiában',
                    SM: 'San Marinoban',
                    TH: 'Thaiföldön',
                    TR: 'Törökországban',
                    ZA: 'Dél-Afrikában'
                }
            },
            identical: {
                'default': 'Kérlek, hogy ugyan azt az értéket add meg'
            },
            imei: {
                'default': 'Kérlek, hogy érvényes IMEI számot adj meg'
            },
            imo: {
                'default': 'Kérlek, hogy érvényes IMO számot adj meg'
            },
            integer: {
                'default': 'Kérlek, hogy számot adj meg'
            },
            ip: {
                'default': 'Kérlek, hogy IP címet adj meg',
                ipv4: 'Kérlek, hogy érvényes IPv4 címet adj meg',
                ipv6: 'Kérlek, hogy érvényes IPv6 címet adj meg'
            },
            isbn: {
                'default': 'Kérlek, hogy érvényes ISBN számot adj meg'
            },
            isin: {
                'default': 'Kérlek, hogy érvényes ISIN számot adj meg'
            },
            ismn: {
                'default': 'Kérlek, hogy érvényes ISMN számot adj meg'
            },
            issn: {
                'default': 'Kérlek, hogy érvényes ISSN számot adj meg'
            },
            lessThan: {
                'default': 'Kérlek, hogy adj meg egy számot ami kisebb vagy egyenlő mint %s',
                notInclusive: 'Kérlek, hogy adj meg egy számot ami kisebb mint %s'
            },
            mac: {
                'default': 'Kérlek, hogy érvényes MAC címet adj meg'
            },
            meid: {
                'default': 'Kérlek, hogy érvényes MEID számot adj meg'
            },
            notEmpty: {
                'default': 'Kérlek, hogy adj értéket a mezőnek'
            },
            numeric: {
                'default': 'Please enter a valid float number'
            },
            phone: {
                'default': 'Kérlek, hogy érvényes telefonszámot adj meg',
                country: 'Kérlek, hogy %s érvényes telefonszámot adj meg',
                countries: {
                    AE: 'az Egyesült Arab Emírségekben', /* Special case */
                    BG: 'Bulgáriában',
                    BR: 'Brazíliában',
                    CN: 'Kínában',
                    CZ: 'Csehországban',
                    DE: 'Németországban',
                    DK: 'Dániában',
                    ES: 'Spanyolországban',
                    FR: 'Franciaországban',
                    GB: 'az Egyesült Királyságban',
                    IN: 'India',
                    MA: 'Marokkóban',
                    NL: 'Hollandiában',
                    PK: 'Pakisztánban',
                    RO: 'Romániában',
                    RU: 'Oroszországban',
                    SK: 'Szlovákiában',
                    TH: 'Thaiföldön',
                    US: 'az Egyesült Államokban',
                    VE: 'Venezuelában' /* Sepcial case */
                }
            },
            promise: {
                'default': 'Kérlek, hogy érvényes értéket adj meg'
            },
            regexp: {
                'default': 'Kérlek, hogy a mintának megfelelő értéket adj meg'
            },
            remote: {
                'default': 'Kérlek, hogy érvényes értéket adj meg'
            },
            rtn: {
                'default': 'Kérlek, hogy érvényes RTN számot adj meg'
            },
            sedol: {
                'default': 'Kérlek, hogy érvényes SEDOL számot adj meg'
            },
            siren: {
                'default': 'Kérlek, hogy érvényes SIREN számot adj meg'
            },
            siret: {
                'default': 'Kérlek, hogy érvényes SIRET számot adj meg'
            },
            step: {
                'default': 'Kérlek, hogy érvényes lépteket adj meg (%s)'
            },
            stringCase: {
                'default': 'Kérlek, hogy csak kisbetüket adj meg',
                upper: 'Kérlek, hogy csak nagy betüket adj meg'
            },
            stringLength: {
                'default': 'Kérlek, hogy érvényes karakter hosszúsággal adj meg értéket',
                less: 'Kérlek, hogy kevesebb mint %s karaktert adj meg',
                more: 'Kérlek, hogy több mint %s karaktert adj meg',
                between: 'Kérlek, hogy legalább %s, de maximum %s karaktert adj meg'
            },
            uri: {
                'default': 'Kérlek, hogy helyes URI -t adj meg'
            },
            uuid: {
                'default': 'Kérlek, hogy érvényes UUID számot adj meg',
                version: 'Kérlek, hogy érvényes UUID verzió %s számot adj meg'
            },
            vat: {
                'default': 'Kérlek, hogy helyes adó számot adj meg',
                country: 'Kérlek, hogy %s helyes  adószámot adj meg',
                countries: {
                    AT: 'Ausztriában',
                    BE: 'Belgiumban',
                    BG: 'Bulgáriában',
                    BR: 'Brazíliában',
                    CH: 'Svájcban',
                    CY: 'Cipruson',
                    CZ: 'Csehországban',
                    DE: 'Németországban',
                    DK: 'Dániában',
                    EE: 'Észtországban',
                    ES: 'Spanyolországban',
                    FI: 'Finnországban',
                    FR: 'Franciaországban',
                    GB: 'az Egyesült Királyságban',
                    GR: 'Görögországban',
                    EL: 'Görögországban',
                    HU: 'Magyarországon',
                    HR: 'Horvátországban',
                    IE: 'Írországban',
                    IS: 'Izlandon',
                    IT: 'Olaszországban',
                    LT: 'Litvániában',
                    LU: 'Luxemburgban',
                    LV: 'Lettországban',
                    MT: 'Máltán',
                    NL: 'Hollandiában',
                    NO: 'Norvégiában',
                    PL: 'Lengyelországban',
                    PT: 'Portugáliában',
                    RO: 'Romániában',
                    RU: 'Oroszországban',
                    RS: 'Szerbiában',
                    SE: 'Svédországban',
                    SI: 'Szlovéniában',
                    SK: 'Szlovákiában',
                    VE: 'Venezuelában',
                    ZA: 'Dél-Afrikában'
                }
            },
            vin: {
                'default': 'Kérlek, hogy érvényes VIN számot adj meg'
            },
            zipCode: {
                'default': 'Kérlek, hogy érvényes irányítószámot adj meg',
                country: 'Kérlek, hogy %s érvényes irányítószámot adj meg',
                countries: {
                    AT: 'Ausztriában',
                    BG: 'Bulgáriában',
                    BR: 'Brazíliában',
                    CA: 'Kanadában',
                    CH: 'Svájcban',
                    CZ: 'Csehországban',
                    DE: 'Németországban',
                    DK: 'Dániában',
                    ES: 'Spanyolországban',
                    FR: 'Franciaországban',
                    GB: 'az Egyesült Királyságban',
                    IE: 'Írországban',
                    IN: 'India',
                    IT: 'Olaszországban',
                    MA: 'Marokkóban',
                    NL: 'Hollandiában',
                    PL: 'Lengyelországban',
                    PT: 'Portugáliában',
                    RO: 'Romániában',
                    RU: 'Oroszországban',
                    SE: 'Svájcban',
                    SG: 'Szingapúrban',
                    SK: 'Szlovákiában',
                    US: 'Egyesült Államok beli'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Indonesian language package
     * Translated by @egig
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'id_ID': {
            base64: {
                'default': 'Silahkan isi karakter base 64 tersandi yang valid'
            },
            between: {
                'default': 'Silahkan isi nilai antara %s dan %s',
                notInclusive: 'Silahkan isi nilai antara %s dan %s, strictly'
            },
            bic: {
                'default': 'Silahkan isi nomor BIC yang valid'
            },
            callback: {
                'default': 'Silahkan isi nilai yang valid'
            },
            choice: {
                'default': 'Silahkan isi nilai yang valid',
                less: 'Silahkan pilih pilihan %s pada minimum',
                more: 'Silahkan pilih pilihan %s pada maksimum',
                between: 'Silahkan pilih pilihan %s - %s'
            },
            color: {
                'default': 'Silahkan isi karakter warna yang valid'
            },
            creditCard: {
                'default': 'Silahkan isi nomor kartu kredit yang valid'
            },
            cusip: {
                'default': 'Silahkan isi nomor CUSIP yang valid'
            },
            cvv: {
                'default': 'Silahkan isi nomor CVV yang valid'
            },
            date: {
                'default': 'Silahkan isi tanggal yang benar',
                min: 'Silahkan isi tanggal setelah tanggal %s',
                max: 'Silahkan isi tanggal sebelum tanggal %s',
                range: 'Silahkan isi tanggal antara %s - %s'
            },
            different: {
                'default': 'Silahkan isi nilai yang berbeda'
            },
            digits: {
                'default': 'Silahkan isi dengan hanya digit'
            },
            ean: {
                'default': 'Silahkan isi nomor EAN yang valid'
            },
            ein: {
                'default': 'Silahkan isi nomor EIN yang valid'
            },
            emailAddress: {
                'default': 'Silahkan isi alamat email yang valid'
            },
            file: {
                'default': 'Silahkan pilih file yang valid'
            },
            greaterThan: {
                'default': 'Silahkan isi nilai yang lebih besar atau sama dengan %s',
                notInclusive: 'Silahkan is nilai yang lebih besar dari %s'
            },
            grid: {
                'default': 'Silahkan nomor GRId yang valid'
            },
            hex: {
                'default': 'Silahkan isi karakter hexadecimal yang valid'
            },
            iban: {
                'default': 'silahkan isi nomor IBAN yang valid',
                country: 'Silahkan isi nomor IBAN yang valid dalam %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Uni Emirat Arab',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia and Herzegovina',
                    BE: 'Belgia',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CI: 'Pantai Gading',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Czech',
                    DE: 'Jerman',
                    DK: 'Denmark',
                    DO: 'Republik Dominika',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Spanyol',
                    FI: 'Finlandia',
                    FO: 'Faroe Islands',
                    FR: 'Francis',
                    GB: 'Inggris',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Greenland',
                    GR: 'Yunani',
                    GT: 'Guatemala',
                    HR: 'Kroasia',
                    HU: 'Hungary',
                    IE: 'Irlandia',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Iceland',
                    IT: 'Italia',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Netherlands',
                    NO: 'Norway',
                    PK: 'Pakistan',
                    PL: 'Polandia',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Saudi Arabia',
                    SE: 'Swedia',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Timor Leste',
                    TN: 'Tunisia',
                    TR: 'Turki',
                    VG: 'Virgin Islands, British',
                    XK: 'Kosovo'
                }
            },
            id: {
                'default': 'Silahkan isi nomor identitas yang valid',
                country: 'Silahkan isi nomor identitas yang valid dalam %s',
                countries: {
                    BA: 'Bosnia and Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CL: 'Chile',
                    CN: 'Cina',
                    CZ: 'Czech',
                    DK: 'Denmark',
                    EE: 'Estonia',
                    ES: 'Spanyol',
                    FI: 'Finlandia',
                    HR: 'Kroasia',
                    IE: 'Irlandia',
                    IS: 'Iceland',
                    LT: 'Lithuania',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Netherlands',
                    PL: 'Polandia',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    TR: 'Turki',
                    ZA: 'Africa Selatan'
                }
            },
            identical: {
                'default': 'Silahkan isi nilai yang sama'
            },
            imei: {
                'default': 'Silahkan isi nomor IMEI yang valid'
            },
            imo: {
                'default': 'Silahkan isi nomor IMO yang valid'
            },
            integer: {
                'default': 'Silahkan isi angka yang valid'
            },
            ip: {
                'default': 'Silahkan isi alamat IP yang valid',
                ipv4: 'Silahkan isi alamat IPv4 yang valid',
                ipv6: 'Silahkan isi alamat IPv6 yang valid'
            },
            isbn: {
                'default': 'Slilahkan isi nomor ISBN yang valid'
            },
            isin: {
                'default': 'Silahkan isi ISIN yang valid'
            },
            ismn: {
                'default': 'Silahkan isi nomor ISMN yang valid'
            },
            issn: {
                'default': 'Silahkan isi nomor ISSN yang valid'
            },
            lessThan: {
                'default': 'Silahkan isi nilai kurang dari atau sama dengan %s',
                notInclusive: 'Silahkan isi nilai kurang dari %s'
            },
            mac: {
                'default': 'Silahkan isi MAC address yang valid'
            },
            meid: {
                'default': 'Silahkan isi nomor MEID yang valid'
            },
            notEmpty: {
                'default': 'Silahkan isi'
            },
            numeric: {
                'default': 'Silahkan isi nomor yang valid'
            },
            phone: {
                'default': 'Silahkan isi nomor telepon yang valid',
                country: 'Silahkan isi nomor telepon yang valid dalam %s',
                countries: {
                    AE: 'Uni Emirat Arab',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CN: 'Cina',
                    CZ: 'Czech',
                    DE: 'Jerman',
                    DK: 'Denmark',
                    ES: 'Spanyol',
                    FR: 'Francis',
                    GB: 'Inggris',
                    IN: 'India',
                    MA: 'Maroko',
                    NL: 'Netherlands',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Russia',
                    SK: 'Slovakia',
                    TH: 'Thailand',
                    US: 'Amerika Serikat',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Silahkan isi nilai yang valid'
            },
            regexp: {
                'default': 'Silahkan isi nilai yang cocok dengan pola'
            },
            remote: {
                'default': 'Silahkan isi nilai yang valid'
            },
            rtn: {
                'default': 'Silahkan isi nomor RTN yang valid'
            },
            sedol: {
                'default': 'Silahkan isi nomor SEDOL yang valid'
            },
            siren: {
                'default': 'Silahkan isi nomor SIREN yang valid'
            },
            siret: {
                'default': 'Silahkan isi nomor SIRET yang valid'
            },
            step: {
                'default': 'Silahkan isi langkah yang benar pada %s'
            },
            stringCase: {
                'default': 'Silahkan isi hanya huruf kecil',
                upper: 'Silahkan isi hanya huruf besar'
            },
            stringLength: {
                'default': 'Silahkan isi nilai dengan panjang karakter yang benar',
                less: 'Silahkan isi kurang dari %s karakter',
                more: 'Silahkan isi lebih dari %s karakter',
                between: 'Silahkan isi antara %s dan %s panjang karakter'
            },
            uri: {
                'default': 'Silahkan isi URI yang valid'
            },
            uuid: {
                'default': 'Silahkan isi nomor UUID yang valid',
                version: 'Silahkan si nomor versi %s UUID yang valid'
            },
            vat: {
                'default': 'Silahkan isi nomor VAT yang valid',
                country: 'Silahkan nomor VAT yang valid dalam %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgium',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CY: 'Cyprus',
                    CZ: 'Czech',
                    DE: 'Jerman',
                    DK: 'Denmark',
                    EE: 'Estonia',
                    ES: 'Spanyol',
                    FI: 'Finlandia',
                    FR: 'Francis',
                    GB: 'Inggris',
                    GR: 'Yunani',
                    EL: 'Yunani',
                    HU: 'Hungaria',
                    HR: 'Kroasia',
                    IE: 'Irlandia',
                    IS: 'Iceland',
                    IT: 'Italy',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Belanda',
                    NO: 'Norway',
                    PL: 'Polandia',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russia',
                    RS: 'Serbia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'Afrika Selatan'
                }
            },
            vin: {
                'default': 'Silahkan isi nomor VIN yang valid'
            },
            zipCode: {
                'default': 'Silahkan isi kode pos yang valid',
                country: 'Silahkan isi kode pos yang valid di %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CA: 'Kanada',
                    CH: 'Switzerland',
                    CZ: 'Czech',
                    DE: 'Jerman',
                    DK: 'Denmark',
                    ES: 'Spanyol',
                    FR: 'Francis',
                    GB: 'Inggris',
                    IE: 'Irlandia',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Maroko',
                    NL: 'Belanda',
                    PL: 'Polandia',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russia',
                    SE: 'Sweden',
                    SG: 'Singapura',
                    SK: 'Slovakia',
                    US: 'Amerika Serikat'
                }
            }
        }
    });
}(jQuery));
(function ($) {
    /**
     * Italian language package
     * Translated by @maramazza
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'it_IT': {
            base64: {
                'default': 'Si prega di inserire un valore codificato in Base 64'
            },
            between: {
                'default': 'Si prega di inserire un valore tra %s e %s',
                notInclusive: 'Si prega di scegliere rigorosamente un valore tra %s e %s'
            },
            bic: {
                'default': 'Si prega di inserire un numero BIC valido'
            },
            callback: {
                'default': 'Si prega di inserire un valore valido'
            },
            choice: {
                'default': 'Si prega di inserire un valore valido',
                less: 'Si prega di scegliere come minimo l\'opzione %s',
                more: 'Si prega di scegliere al massimo l\'opzione %s',
                between: 'Si prega di scegliere l\'opzione tra %s e %s'
            },
            color: {
                'default': 'Si prega di inserire un colore valido'
            },
            creditCard: {
                'default': 'Si prega di inserire un numero di carta di credito valido'
            },
            cusip: {
                'default': 'Si prega di inserire un numero CUSIP valido'
            },
            cvv: {
                'default': 'Si prega di inserire un numero CVV valido'
            },
            date: {
                'default': 'Si prega di inserire una data valida',
                min: 'Si prega di inserire una data successiva al %s',
                max: 'Si prega di inserire una data antecedente il %s',
                range: 'Si prega di inserire una data compresa tra %s - %s'
            },
            different: {
                'default': 'Si prega di inserire un valore differente'
            },
            digits: {
                'default': 'Si prega di inserire solo numeri'
            },
            ean: {
                'default': 'Si prega di inserire un numero EAN valido'
            },
            ein: {
                'default': 'Si prega di inserire un numero EIN valido'
            },
            emailAddress: {
                'default': 'Si prega di inserire un indirizzo email valido'
            },
            file: {
                'default': 'Si prega di scegliere un file valido'
            },
            greaterThan: {
                'default': 'Si prega di inserire un numero maggiore o uguale a %s',
                notInclusive: 'Si prega di inserire un numero maggiore di %s'
            },
            grid: {
                'default': 'Si prega di inserire un numero GRId valido'
            },
            hex: {
                'default': 'Si prega di inserire un numero esadecimale valido'
            },
            iban: {
                'default': 'Si prega di inserire un numero IBAN valido',
                country: 'Si prega di inserire un numero IBAN valido per %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emirati Arabi Uniti',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia-Erzegovina',
                    BE: 'Belgio',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasile',
                    CH: 'Svizzera',
                    CI: 'Costa d\'Avorio',
                    CM: 'Cameron',
                    CR: 'Costa Rica',
                    CV: 'Capo Verde',
                    CY: 'Cipro',
                    CZ: 'Republica Ceca',
                    DE: 'Germania',
                    DK: 'Danimarca',
                    DO: 'Repubblica Domenicana',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Spagna',
                    FI: 'Finlandia',
                    FO: 'Isole Faroe',
                    FR: 'Francia',
                    GB: 'Regno Unito',
                    GE: 'Georgia',
                    GI: 'Gibilterra',
                    GL: 'Groenlandia',
                    GR: 'Grecia',
                    GT: 'Guatemala',
                    HR: 'Croazia',
                    HU: 'Ungheria',
                    IE: 'Irlanda',
                    IL: 'Israele',
                    IR: 'Iran',
                    IS: 'Islanda',
                    IT: 'Italia',
                    JO: 'Giordania',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Libano',
                    LI: 'Liechtenstein',
                    LT: 'Lituania',
                    LU: 'Lussemburgo',
                    LV: 'Lettonia',
                    MC: 'Monaco',
                    MD: 'Moldavia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambico',
                    NL: 'Olanda',
                    NO: 'Norvegia',
                    PK: 'Pachistan',
                    PL: 'Polonia',
                    PS: 'Palestina',
                    PT: 'Portogallo',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Arabia Saudita',
                    SE: 'Svezia',
                    SI: 'Slovenia',
                    SK: 'Slovacchia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Timor Est',
                    TN: 'Tunisia',
                    TR: 'Turchia',
                    VG: 'Isole Vergini, Inghilterra',
                    XK: 'Repubblica del Kosovo'
                }
            },
            id: {
                'default': 'Si prega di inserire un numero di identificazione valido',
                country: 'Si prega di inserire un numero di identificazione valido per %s',
                countries: {
                    BA: 'Bosnia-Erzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasile',
                    CH: 'Svizzera',
                    CL: 'Chile',
                    CN: 'Cina',
                    CZ: 'Republica Ceca',
                    DK: 'Danimarca',
                    EE: 'Estonia',
                    ES: 'Spagna',
                    FI: 'Finlandia',
                    HR: 'Croazia',
                    IE: 'Irlanda',
                    IS: 'Islanda',
                    LT: 'Lituania',
                    LV: 'Lettonia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Paesi Bassi',
                    PL: 'Polonia',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Svezia',
                    SI: 'Slovenia',
                    SK: 'Slovacchia',
                    SM: 'San Marino',
                    TH: 'Thailandia',
                    TR: 'Turchia',
                    ZA: 'Sudafrica'
                }
            },
            identical: {
                'default': 'Si prega di inserire un valore identico'
            },
            imei: {
                'default': 'Si prega di inserire un numero IMEI valido'
            },
            imo: {
                'default': 'Si prega di inserire un numero IMO valido'
            },
            integer: {
                'default': 'Si prega di inserire un numero valido'
            },
            ip: {
                'default': 'Please enter a valid IP address',
                ipv4: 'Si prega di inserire un indirizzo IPv4 valido',
                ipv6: 'Si prega di inserire un indirizzo IPv6 valido'
            },
            isbn: {
                'default': 'Si prega di inserire un numero ISBN valido'
            },
            isin: {
                'default': 'Si prega di inserire un numero ISIN valido'
            },
            ismn: {
                'default': 'Si prega di inserire un numero ISMN valido'
            },
            issn: {
                'default': 'Si prega di inserire un numero ISSN valido'
            },
            lessThan: {
                'default': 'Si prega di inserire un valore minore o uguale a %s',
                notInclusive: 'Si prega di inserire un valore minore di %s'
            },
            mac: {
                'default': 'Si prega di inserire un valido MAC address'
            },
            meid: {
                'default': 'Si prega di inserire un numero MEID valido'
            },
            notEmpty: {
                'default': 'Si prega di non lasciare il campo vuoto'
            },
            numeric: {
                'default': 'Si prega di inserire un numero con decimali valido'
            },
            phone: {
                'default': 'Si prega di inserire un numero di telefono valido',
                country: 'Si prega di inserire un numero di telefono valido per %s',
                countries: {
                    AE: 'Emirati Arabi Uniti',
                    BG: 'Bulgaria',
                    BR: 'Brasile',
                    CN: 'Cina',
                    CZ: 'Republica Ceca',
                    DE: 'Germania',
                    DK: 'Danimarca',
                    ES: 'Spagna',
                    FR: 'Francia',
                    GB: 'Regno Unito',
                    IN: 'India',
                    MA: 'Marocco',
                    NL: 'Olanda',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Russia',
                    SK: 'Slovacchia',
                    TH: 'Thailandia',
                    US: 'Stati Uniti d\'America',
                    VE: 'Venezuelano'
                }
            },
            promise: {
                'default': 'Si prega di inserire un valore valido'
            },
            regexp: {
                'default': 'Inserisci un valore che corrisponde al modello'
            },
            remote: {
                'default': 'Si prega di inserire un valore valido'
            },
            rtn: {
                'default': 'Si prega di inserire un numero RTN valido'
            },
            sedol: {
                'default': 'Si prega di inserire un numero SEDOL valido'
            },
            siren: {
                'default': 'Si prega di inserire un numero SIREN valido'
            },
            siret: {
                'default': 'Si prega di inserire un numero SIRET valido'
            },
            step: {
                'default': 'Si prega di inserire uno step valido di %s'
            },
            stringCase: {
                'default': 'Si prega di inserire solo caratteri minuscoli',
                upper: 'Si prega di inserire solo caratteri maiuscoli'
            },
            stringLength: {
                'default': 'Si prega di inserire un valore con lunghezza valida',
                less: 'Si prega di inserire meno di %s caratteri',
                more: 'Si prega di inserire piu di %s caratteri',
                between: 'Si prega di inserire un numero di caratteri compreso tra  %s e %s'
            },
            uri: {
                'default': 'Si prega di inserire un URI valido'
            },
            uuid: {
                'default': 'Si prega di inserire un numero UUID valido',
                version: 'Si prega di inserire un numero di versione UUID %s valido'
            },
            vat: {
                'default': 'Si prega di inserire un valore di IVA valido',
                country: 'Si prega di inserire un valore di IVA valido per %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgio',
                    BG: 'Bulgaria',
                    BR: 'Brasiliano',
                    CH: 'Svizzera',
                    CY: 'Cipro',
                    CZ: 'Republica Ceca',
                    DE: 'Germania',
                    DK: 'Danimarca',
                    EE: 'Estonia',
                    ES: 'Spagna',
                    FI: 'Finlandia',
                    FR: 'Francia',
                    GB: 'Regno Unito',
                    GR: 'Grecia',
                    EL: 'Grecia',
                    HU: 'Ungheria',
                    HR: 'Croazia',
                    IE: 'Irlanda',
                    IS: 'Islanda',
                    IT: 'Italia',
                    LT: 'Lituania',
                    LU: 'Lussemburgo',
                    LV: 'Lettonia',
                    MT: 'Malta',
                    NL: 'Olanda',
                    NO: 'Norvegia',
                    PL: 'Polonia',
                    PT: 'Portogallo',
                    RO: 'Romania',
                    RU: 'Russia',
                    RS: 'Serbia',
                    SE: 'Svezia',
                    SI: 'Slovenia',
                    SK: 'Slovacchia',
                    VE: 'Venezuelano',
                    ZA: 'Sud Africano'
                }
            },
            vin: {
                'default': 'Si prega di inserire un numero VIN valido'
            },
            zipCode: {
                'default': 'Si prega di inserire un codice postale valido',
                country: 'Si prega di inserire un codice postale valido per %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brasile',
                    CA: 'Canada',
                    CH: 'Svizzera',
                    CZ: 'Republica Ceca',
                    DE: 'Germania',
                    DK: 'Danimarca',
                    ES: 'Spagna',
                    FR: 'Francia',
                    GB: 'Regno Unito',
                    IE: 'Irlanda',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Marocco',
                    NL: 'Paesi Bassi',
                    PL: 'Polonia',
                    PT: 'Portogallo',
                    RO: 'Romania',
                    RU: 'Russia',
                    SE: 'Svezia',
                    SG: 'Singapore',
                    SK: 'Slovacchia',
                    US: 'Stati Uniti d\'America'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Japanese language package
     * Translated by @tsuyoshifujii
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ja_JP': {
            base64: {
                'default': '有効なBase64エンコードを入力してください'
            },
            between: {
                'default': '%sから%sの間で入力してください',
                notInclusive: '厳密に%sから%sの間で入力してください'
            },
            bic: {
                'default': '有効なBICコードを入力してください'
            },
            callback: {
                'default': '有効な値を入力してください'
            },
            choice: {
                'default': '有効な値を入力してください',
                less: '最低でも%sを選択してください',
                more: '最大でも%sを選択してください',
                between: '%s - %s で選択してください'
            },
            color: {
                'default': '有効なカラーコードを入力してください'
            },
            creditCard: {
                'default': '有効なクレジットカード番号を入力してください'
            },
            cusip: {
                'default': '有効なCUSIP番号を入力してください'
            },
            cvv: {
                'default': '有効なCVV番号を入力してください'
            },
            date: {
                'default': '有効な日付を入力してください',
                min: '%s 後に有効な日付を入力してください',
                max: '%s の前に有効な日付を入力してください',
                range: '%s - %s の間に有効な日付を入力してください'
            },
            different: {
                'default': '異なる値を入力してください'
            },
            digits: {
                'default': '数字のみで入力してください'
            },
            ean: {
                'default': '有効なEANコードを入力してください'
            },
            ein: {
                'default': '有効なEINコードを入力してください'
            },
            emailAddress: {
                'default': '有効なメールアドレスを入力してください'
            },
            file: {
                'default': '有効なファイルを選択してください'
            },
            greaterThan: {
                'default': '%sより大きい値を入力してください',
                notInclusive: '%sより大きい値を入力してください'
            },
            grid: {
                'default': '有効なGRIdコードを入力してください'
            },
            hex: {
                'default': '有効な16進数を入力してください。'
            },
            iban: {
                'default': '有効なIBANコードを入力してください',
                country: '有効な%sのIBANコードを入力してください',
                countries: {
                    AD: 'アンドラ',
                    AE: 'アラブ首長国連邦',
                    AL: 'アルバニア',
                    AO: 'アンゴラ',
                    AT: 'オーストリア',
                    AZ: 'アゼルバイジャン',
                    BA: 'ボスニア·ヘルツェゴビナ',
                    BE: 'ベルギー',
                    BF: 'ブルキナファソ',
                    BG: 'ブルガリア',
                    BH: 'バーレーン',
                    BI: 'ブルンジ',
                    BJ: 'ベナン',
                    BR: 'ブラジル',
                    CH: 'スイス',
                    CI: '象牙海岸',
                    CM: 'カメルーン',
                    CR: 'コスタリカ',
                    CV: 'カーボベルデ',
                    CY: 'キプロス',
                    CZ: 'チェコ共和国',
                    DE: 'ドイツ',
                    DK: 'デンマーク',
                    DO: 'ドミニカ共和国',
                    DZ: 'アルジェリア',
                    EE: 'エストニア',
                    ES: 'スペイン',
                    FI: 'フィンランド',
                    FO: 'フェロー諸島',
                    FR: 'フランス',
                    GB: 'イギリス',
                    GE: 'グルジア',
                    GI: 'ジブラルタル',
                    GL: 'グリーンランド',
                    GR: 'ギリシャ',
                    GT: 'グアテマラ',
                    HR: 'クロアチア',
                    HU: 'ハンガリー',
                    IE: 'アイルランド',
                    IL: 'イスラエル',
                    IR: 'イラン',
                    IS: 'アイスランド',
                    IT: 'イタリア',
                    JO: 'ヨルダン',
                    KW: 'クウェート',
                    KZ: 'カザフスタン',
                    LB: 'レバノン',
                    LI: 'リヒテンシュタイン',
                    LT: 'リトアニア',
                    LU: 'ルクセンブルグ',
                    LV: 'ラトビア',
                    MC: 'モナコ',
                    MD: 'モルドバ',
                    ME: 'モンテネグロ',
                    MG: 'マダガスカル',
                    MK: 'マケドニア',
                    ML: 'マリ',
                    MR: 'モーリタニア',
                    MT: 'マルタ',
                    MU: 'モーリシャス',
                    MZ: 'モザンビーク',
                    NL: 'オランダ',
                    NO: 'ノルウェー',
                    PK: 'パキスタン',
                    PL: 'ポーランド',
                    PS: 'パレスチナ',
                    PT: 'ポルトガル',
                    QA: 'カタール',
                    RO: 'ルーマニア',
                    RS: 'セルビア',
                    SA: 'サウジアラビア',
                    SE: 'スウェーデン',
                    SI: 'スロベニア',
                    SK: 'スロバキア',
                    SM: 'サン·マリノ',
                    SN: 'セネガル',
                    TL: '東チモール',
                    TN: 'チュニジア',
                    TR: 'トルコ',
                    VG: '英領バージン諸島',
                    XK: 'コソボ共和国'
                }
            },
            id: {
                'default': '有効なIDを入力してください',
                country: '有効な%sのIDを入力してください',
                countries: {
                    BA: 'スニア·ヘルツェゴビナ',
                    BG: 'ブルガリア',
                    BR: 'ブラジル',
                    CH: 'スイス',
                    CL: 'チリ',
                    CN: 'チャイナ',
                    CZ: 'チェコ共和国',
                    DK: 'デンマーク',
                    EE: 'エストニア',
                    ES: 'スペイン',
                    FI: 'フィンランド',
                    HR: 'クロアチア',
                    IE: 'アイルランド',
                    IS: 'アイスランド',
                    LT: 'リトアニア',
                    LV: 'ラトビア',
                    ME: 'モンテネグロ',
                    MK: 'マケドニア',
                    NL: 'オランダ',
                    PL: 'ポーランド',
                    RO: 'ルーマニア',
                    RS: 'セルビア',
                    SE: 'スウェーデン',
                    SI: 'スロベニア',
                    SK: 'スロバキア',
                    SM: 'サン·マリノ',
                    TH: 'タイ国',
                    TR: 'トルコ',
                    ZA: '南アフリカ'
                }
            },
            identical: {
                'default': '同じ値を入力してください'
            },
            imei: {
                'default': '有効なIMEIを入力してください'
            },
            imo: {
                'default': '有効なIMOを入力してください'
            },
            integer: {
                'default': '有効な数値を入力してください'
            },
            ip: {
                'default': '有効なIPアドレスを入力してください',
                ipv4: '有効なIPv4アドレスを入力してください',
                ipv6: '有効なIPv6アドレスを入力してください'
            },
            isbn: {
                'default': '有効なISBN番号を入力してください'
            },
            isin: {
                'default': '有効なISIN番号を入力してください'
            },
            ismn: {
                'default': '有効なISMN番号を入力してください'
            },
            issn: {
                'default': '有効なISSN番号を入力してください'
            },
            lessThan: {
                'default': '%s未満の値を入力してください',
                notInclusive: '%s未満の値を入力してください'
            },
            mac: {
                'default': '有効なMACアドレスを入力してください'
            },
            meid: {
                'default': '有効なMEID番号を入力してください'
            },
            notEmpty: {
                'default': '値を入力してください'
            },
            numeric: {
                'default': '有効な浮動小数点数値を入力してください。'
            },
            phone: {
                'default': '有効な電話番号を入力してください',
                country: '有効な%sの電話番号を入力してください',
                countries: {
                    AE: 'アラブ首長国連邦',
                    BG: 'ブルガリア',
                    BR: 'ブラジル',
                    CN: 'チャイナ',
                    CZ: 'チェコ共和国',
                    DE: 'ドイツ',
                    DK: 'デンマーク',
                    ES: 'スペイン',
                    FR: 'フランス',
                    GB: 'イギリス',
                    IN: 'インド',
                    MA: 'モロッコ',
                    NL: 'オランダ',
                    PK: 'パキスタン',
                    RO: 'ルーマニア',
                    RU: 'ロシア',
                    SK: 'スロバキア',
                    TH: 'タイ国',
                    US: 'アメリカ',
                    VE: 'ベネズエラ'
                }
            },
            promise: {
                'default': '有効な値を入力してください'
            },
            regexp: {
                'default': '正規表現に一致する値を入力してください'
            },
            remote: {
                'default': '有効な値を入力してください。'
            },
            rtn: {
                'default': '有効なRTN番号を入力してください'
            },
            sedol: {
                'default': '有効なSEDOL番号を入力してください'
            },
            siren: {
                'default': '有効なSIREN番号を入力してください'
            },
            siret: {
                'default': '有効なSIRET番号を入力してください'
            },
            step: {
                'default': '%sの有効なステップを入力してください'
            },
            stringCase: {
                'default': '小文字のみで入力してください',
                upper: '大文字のみで入力してください'
            },
            stringLength: {
                'default': '有効な長さの値を入力してください',
                less: '%s文字未満で入力してください',
                more: '%s文字より大きく入力してください',
                between: '%s文字から%s文字の間で入力してください'
            },
            uri: {
                'default': '有効なURIを入力してください。'
            },
            uuid: {
                'default': '有効なUUIDを入力してください',
                version: '有効なバージョン%s UUIDを入力してください'
            },
            vat: {
                'default': '有効なVAT番号を入力してください',
                country: '有効な%sのVAT番号を入力してください',
                countries: {
                    AT: 'オーストリア',
                    BE: 'ベルギー',
                    BG: 'ブルガリア',
                    BR: 'ブラジル',
                    CH: 'スイス',
                    CY: 'キプロス等',
                    CZ: 'チェコ共和国',
                    DE: 'ドイツ',
                    DK: 'デンマーク',
                    EE: 'エストニア',
                    ES: 'スペイン',
                    FI: 'フィンランド',
                    FR: 'フランス',
                    GB: 'イギリス',
                    GR: 'ギリシャ',
                    EL: 'ギリシャ',
                    HU: 'ハンガリー',
                    HR: 'クロアチア',
                    IE: 'アイルランド',
                    IS: 'アイスランド',
                    IT: 'イタリア',
                    LT: 'リトアニア',
                    LU: 'ルクセンブルグ',
                    LV: 'ラトビア',
                    MT: 'マルタ',
                    NL: 'オランダ',
                    NO: 'ノルウェー',
                    PL: 'ポーランド',
                    PT: 'ポルトガル',
                    RO: 'ルーマニア',
                    RU: 'ロシア',
                    RS: 'セルビア',
                    SE: 'スウェーデン',
                    SI: 'スロベニア',
                    SK: 'スロバキア',
                    VE: 'ベネズエラ',
                    ZA: '南アフリカ'
                }
            },
            vin: {
                'default': '有効なVIN番号を入力してください'
            },
            zipCode: {
                'default': '有効な郵便番号を入力してください',
                country: '有効な%sの郵便番号を入力してください',
                countries: {
                    AT: 'オーストリア',
                    BG: 'ブルガリア',
                    BR: 'ブラジル',
                    CA: 'カナダ',
                    CH: 'スイス',
                    CZ: 'チェコ共和国',
                    DE: 'ドイツ',
                    DK: 'デンマーク',
                    ES: 'スペイン',
                    FR: 'フランス',
                    GB: 'イギリス',
                    IE: 'アイルランド',
                    IN: 'インド',
                    IT: 'イタリア',
                    MA: 'モロッコ',
                    NL: 'オランダ',
                    PL: 'ポーランド',
                    PT: 'ポルトガル',
                    RO: 'ルーマニア',
                    RU: 'ロシア',
                    SE: 'スウェーデン',
                    SG: 'シンガポール',
                    SK: 'スロバキア',
                    US: 'アメリカ'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Belgium (Dutch) language package
     * Translated by @dokterpasta. Improved by @jdt
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'nl_BE': {
            base64: {
                'default': 'Geef een geldige base 64 geëncodeerde tekst in'
            },
            between: {
                'default': 'Geef een waarde in van %s tot en met %s',
                notInclusive: 'Geef een waarde in van %s tot %s'
            },
            bic: {
                'default': 'Geef een geldig BIC-nummer in'
            },
            callback: {
                'default': 'Geef een geldige waarde in'
            },
            choice: {
                'default': 'Geef een geldige waarde in',
                less: 'Kies minimaal %s opties',
                more: 'Kies maximaal %s opties',
                between: 'Kies tussen de %s en %s opties'
            },
            color: {
                'default': 'Geef een geldige kleurcode in'
            },
            creditCard: {
                'default': 'Geef een geldig kredietkaartnummer in'
            },
            cusip: {
                'default': 'Geef een geldig CUSIP-nummer in'
            },
            cvv: {
                'default': 'Geef een geldig CVV-nummer in'
            },
            date: {
                'default': 'Geef een geldige datum in',
                min: 'Geef een datum in die na %s ligt',
                max: 'Geef een datum in die voor %s ligt',
                range: 'Geef een datum in die tussen %s en %s ligt'
            },
            different: {
                'default': 'Geef een andere waarde in'
            },
            digits: {
                'default': 'Geef alleen cijfers in'
            },
            ean: {
                'default': 'Geef een geldig EAN-nummer in'
            },
            ein: {
                'default': 'Geef een geldig EIN-nummer in'
            },
            emailAddress: {
                'default': 'Geef een geldig emailadres op'
            },
            file: {
                'default': 'Kies een geldig bestand'
            },
            greaterThan: {
                'default': 'Geef een waarde in die gelijk is aan of groter is dan %s',
                notInclusive: 'Geef een waarde in die groter is dan %s'
            },
            grid: {
                'default': 'Geef een geldig GRID-nummer in'
            },
            hex: {
                'default': 'Geef een geldig hexadecimaal nummer in'
            },
            iban: {
                'default': 'Geef een geldig IBAN-nummer in',
                country: 'Geef een geldig IBAN-nummer in uit %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Verenigde Arabische Emiraten',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Oostenrijk',
                    AZ: 'Azerbeidzjan',
                    BA: 'Bosnië en Herzegovina',
                    BE: 'België',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarije"',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CI: 'Ivoorkust',
                    CM: 'Kameroen',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Tsjechische',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    DO: 'Dominicaanse Republiek',
                    DZ: 'Algerije',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    FO: 'Faeröer',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenland',
                    GR: 'Griekenland',
                    GT: 'Guatemala',
                    HR: 'Kroatië',
                    HU: 'Hongarije',
                    IE: 'Ierland',
                    IL: 'Israël',
                    IR: 'Iran',
                    IS: 'IJsland',
                    IT: 'Italië',
                    JO: 'Jordan',
                    KW: 'Koeweit',
                    KZ: 'Kazachstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Litouwen',
                    LU: 'Luxemburg',
                    LV: 'Letland',
                    MC: 'Monaco',
                    MD: 'Moldavië',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonië',
                    ML: 'Mali',
                    MR: 'Mauretanië',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Nederland',
                    NO: 'Noorwegen',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palestijnse',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Roemenië',
                    RS: 'Servië',
                    SA: 'Saudi-Arabië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Oost-Timor',
                    TN: 'Tunesië',
                    TR: 'Turkije',
                    VG: 'Britse Maagdeneilanden',
                    XK: 'Republiek Kosovo'
                }
            },
            id: {
                'default': 'Geef een geldig identificatienummer in',
                country: 'Geef een geldig identificatienummer in uit %s',
                countries: {
                    BA: 'Bosnië en Herzegovina',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CL: 'Chili',
                    CN: 'China',
                    CZ: 'Tsjechische',
                    DK: 'Denemarken',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    HR: 'Kroatië',
                    IE: 'Ierland',
                    IS: 'IJsland',
                    LT: 'Litouwen',
                    LV: 'Letland',
                    ME: 'Montenegro',
                    MK: 'Macedonië',
                    NL: 'Nederland',
                    PL: 'Polen',
                    RO: 'Roemenië',
                    RS: 'Servië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    TR: 'Turkije',
                    ZA: 'Zuid-Afrika'
                }
            },
            identical: {
                'default': 'Geef dezelfde waarde in'
            },
            imei: {
                'default': 'Geef een geldig IMEI-nummer in'
            },
            imo: {
                'default': 'Geef een geldig IMO-nummer in'
            },
            integer: {
                'default': 'Geef een geldig nummer in'
            },
            ip: {
                'default': 'Geef een geldig IP-adres in',
                ipv4: 'Geef een geldig IPv4-adres in',
                ipv6: 'Geef een geldig IPv6-adres in'
            },
            isbn: {
                'default': 'Geef een geldig ISBN-nummer in'
            },
            isin: {
                'default': 'Geef een geldig ISIN-nummer in'
            },
            ismn: {
                'default': 'Geef een geldig ISMN-nummer in'
            },
            issn: {
                'default': 'Geef een geldig ISSN-nummer in'
            },
            lessThan: {
                'default': 'Geef een waarde in die gelijk is aan of kleiner is dan %s',
                notInclusive: 'Geef een waarde in die kleiner is dan %s'
            },
            mac: {
                'default': 'Geef een geldig MAC-adres in'
            },
            meid: {
                'default': 'Geef een geldig MEID-nummer in'
            },
            notEmpty: {
                'default': 'Geef een waarde in'
            },
            numeric: {
                'default': 'Geef een geldig kommagetal in'
            },
            phone: {
                'default': 'Geef een geldig telefoonnummer in',
                country: 'Geef een geldig telefoonnummer in uit %s',
                countries: {
                    AE: 'Verenigde Arabische Emiraten',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CN: 'China',
                    CZ: 'Tsjechische',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    ES: 'Spanje',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    IN: 'Indië',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PK: 'Pakistan',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    SK: 'Slowakije',
                    TH: 'Thailand',
                    US: 'VS',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Geef een geldige waarde in'
            },
            regexp: {
                'default': 'Geef een waarde in die overeenkomt met het patroon'
            },
            remote: {
                'default': 'Geef een geldige waarde in'
            },
            rtn: {
                'default': 'Geef een geldig RTN-nummer in'
            },
            sedol: {
                'default': 'Geef een geldig SEDOL-nummer in'
            },
            siren: {
                'default': 'Geef een geldig SIREN-nummer in'
            },
            siret: {
                'default': 'Geef een geldig SIRET-nummer in'
            },
            step: {
                'default': 'Geef een geldig meervoud in van %s'
            },
            stringCase: {
                'default': 'Geef enkel kleine letters in',
                upper: 'Geef enkel hoofdletters in'
            },
            stringLength: {
                'default': 'Geef een waarde in met de juiste lengte',
                less: 'Geef minder dan %s karakters in',
                more: 'Geef meer dan %s karakters in',
                between: 'Geef tussen %s en %s karakters in'
            },
            uri: {
                'default': 'Geef een geldige URI in'
            },
            uuid: {
                'default': 'Geef een geldig UUID-nummer in',
                version: 'Geef een geldig UUID-nummer (versie %s) in'
            },
            vat: {
                'default': 'Geef een geldig BTW-nummer in',
                country: 'Geef een geldig BTW-nummer in uit %s',
                countries: {
                    AT: 'Oostenrijk',
                    BE: 'België',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CY: 'Cyprus',
                    CZ: 'Tsjechische',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    GR: 'Griekenland',
                    EL: 'Griekenland',
                    HU: 'Hongarije',
                    HR: 'Kroatië',
                    IE: 'Ierland',
                    IS: 'IJsland',
                    IT: 'Italië',
                    LT: 'Litouwen',
                    LU: 'Luxemburg',
                    LV: 'Letland',
                    MT: 'Malta',
                    NL: 'Nederland',
                    NO: 'Noorwegen',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    RS: 'Servië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    VE: 'Venezuela',
                    ZA: 'Zuid-Afrika'
                }
            },
            vin: {
                'default': 'Geef een geldig VIN-nummer in'
            },
            zipCode: {
                'default': 'Geef een geldige postcode in',
                country: 'Geef een geldige postcode in uit %s',
                countries: {
                    AT: 'Oostenrijk',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CA: 'Canada',
                    CH: 'Zwitserland',
                    CZ: 'Tsjechische',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    ES: 'Spanje',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    IE: 'Ierland',
                    IN: 'Indië',
                    IT: 'Italië',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    SE: 'Zweden',
                    SG: 'Singapore',
                    SK: 'Slowakije',
                    US: 'VS'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * The Dutch language package
     * Translated by @jvanderheide
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'nl_NL': {
            base64: {
                'default': 'Voer een geldige Base64 geëncodeerde tekst in'
            },
            between: {
                'default': 'Voer een waarde in van %s tot en met %s',
                notInclusive: 'Voer een waarde die tussen %s en %s ligt'
            },
            bic: {
                'default': 'Voer een geldige BIC-code in'
            },
            callback: {
                'default': 'Voer een geldige waarde in'
            },
            choice: {
                'default': 'Voer een geldige waarde in',
                less: 'Kies minimaal %s optie(s)',
                more: 'Kies maximaal %s opties',
                between: 'Kies tussen de %s - %s opties'
            },
            color: {
                'default': 'Voer een geldige kleurcode in'
            },
            creditCard: {
                'default': 'Voer een geldig creditcardnummer in'
            },
            cusip: {
                'default': 'Voer een geldig CUSIP-nummer in'
            },
            cvv: {
                'default': 'Voer een geldig CVV-nummer in'
            },
            date: {
                'default': 'Voer een geldige datum in',
                min: 'Voer een datum in die na %s ligt',
                max: 'Voer een datum in die vóór %s ligt',
                range: 'Voer een datum in die tussen %s en %s ligt'
            },
            different: {
                'default': 'Voer een andere waarde in'
            },
            digits: {
                'default': 'Voer enkel cijfers in'
            },
            ean: {
                'default': 'Voer een geldige EAN-code in'
            },
            ein: {
                'default': 'Voer een geldige EIN-code in'
            },
            emailAddress: {
                'default': 'Voer een geldig e-mailadres in'
            },
            file: {
                'default': 'Kies een geldig bestand'
            },
            greaterThan: {
                'default': 'Voer een waarde in die gelijk is aan of groter is dan %s',
                notInclusive: 'Voer een waarde in die is groter dan %s'
            },
            grid: {
                'default': 'Voer een geldig GRId-nummer in'
            },
            hex: {
                'default': 'Voer een geldig hexadecimaal nummer in'
            },
            iban: {
                'default': 'Voer een geldig IBAN nummer in',
                country: 'Voer een geldig IBAN nummer in uit %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Verenigde Arabische Emiraten',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Oostenrijk',
                    AZ: 'Azerbeidzjan',
                    BA: 'Bosnië en Herzegovina',
                    BE: 'België',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarije"',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CI: 'Ivoorkust',
                    CM: 'Kameroen',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Tsjechische Republiek',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    DO: 'Dominicaanse Republiek',
                    DZ: 'Algerije',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    FO: 'Faeröer',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenland',
                    GR: 'Griekenland',
                    GT: 'Guatemala',
                    HR: 'Kroatië',
                    HU: 'Hongarije',
                    IE: 'Ierland',
                    IL: 'Israël',
                    IR: 'Iran',
                    IS: 'IJsland',
                    IT: 'Italië',
                    JO: 'Jordan',
                    KW: 'Koeweit',
                    KZ: 'Kazachstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Litouwen',
                    LU: 'Luxemburg',
                    LV: 'Letland',
                    MC: 'Monaco',
                    MD: 'Moldavië',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonië',
                    ML: 'Mali',
                    MR: 'Mauretanië',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Nederland',
                    NO: 'Noorwegen',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palestijnse',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Roemenië',
                    RS: 'Servië',
                    SA: 'Saudi-Arabië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Oost-Timor',
                    TN: 'Tunesië',
                    TR: 'Turkije',
                    VG: 'Britse Maagdeneilanden',
                    XK: 'Republiek Kosovo'
                }
            },
            id: {
                'default': 'Voer een geldig identificatie nummer in',
                country: 'Voer een geldig identificatie nummer in uit %s',
                countries: {
                    BA: 'Bosnië en Herzegovina',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CL: 'Chili',
                    CN: 'China',
                    CZ: 'Tsjechische Republiek',
                    DK: 'Denemarken',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    HR: 'Kroatië',
                    IE: 'Ierland',
                    IS: 'IJsland',
                    LT: 'Litouwen',
                    LV: 'Letland',
                    ME: 'Montenegro',
                    MK: 'Macedonië',
                    NL: 'Nederland',
                    PL: 'Polen',
                    RO: 'Roemenië',
                    RS: 'Servië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    TR: 'Turkije',
                    ZA: 'Zuid-Afrika'
                }
            },
            identical: {
                'default': 'Voer dezelfde waarde in'
            },
            imei: {
                'default': 'Voer een geldig IMEI-nummer in'
            },
            imo: {
                'default': 'Voer een geldig IMO-nummer in'
            },
            integer: {
                'default': 'Voer een geldig getal in'
            },
            ip: {
                'default': 'Voer een geldig IP adres in',
                ipv4: 'Voer een geldig IPv4 adres in',
                ipv6: 'Voer een geldig IPv6 adres in'
            },
            isbn: {
                'default': 'Voer een geldig ISBN-nummer in'
            },
            isin: {
                'default': 'Voer een geldig ISIN-nummer in'
            },
            ismn: {
                'default': 'Voer een geldig ISMN-nummer in'
            },
            issn: {
                'default': 'Voer een geldig ISSN-nummer in'
            },
            lessThan: {
                'default': 'Voer een waarde in gelijk aan of kleiner dan %s',
                notInclusive: 'Voer een waarde in kleiner dan %s'
            },
            mac: {
                'default': 'Voer een geldig MAC adres in'
            },
            meid: {
                'default': 'Voer een geldig MEID-nummer in'
            },
            notEmpty: {
                'default': 'Voer een waarde in'
            },
            numeric: {
                'default': 'Voer een geldig kommagetal in'
            },
            phone: {
                'default': 'Voer een geldig telefoonnummer in',
                country: 'Voer een geldig telefoonnummer in uit %s',
                countries: {
                    AE: 'Verenigde Arabische Emiraten',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CN: 'China',
                    CZ: 'Tsjechische Republiek',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    ES: 'Spanje',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    IN: 'Indië',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PK: 'Pakistan',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    SK: 'Slowakije',
                    TH: 'Thailand',
                    US: 'VS',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Voer een geldige waarde in'
            },
            regexp: {
                'default': 'Voer een waarde in die overeenkomt met het patroon'
            },
            remote: {
                'default': 'Voer een geldige waarde in'
            },
            rtn: {
                'default': 'Voer een geldig RTN-nummer in'
            },
            sedol: {
                'default': 'Voer een geldig SEDOL-nummer in'
            },
            siren: {
                'default': 'Voer een geldig SIREN-nummer in'
            },
            siret: {
                'default': 'Voer een geldig SIRET-nummer in'
            },
            step: {
                'default': 'Voer een meervoud van %s in'
            },
            stringCase: {
                'default': 'Voer enkel kleine letters in',
                upper: 'Voer enkel hoofdletters in'
            },
            stringLength: {
                'default': 'Voer een waarde met de juiste lengte in',
                less: 'Voer minder dan %s karakters in',
                more: 'Voer meer dan %s karakters in',
                between: 'Voer tussen tussen %s en %s karakters in'
            },
            uri: {
                'default': 'Voer een geldige link in'
            },
            uuid: {
                'default': 'Voer een geldige UUID in',
                version: 'Voer een geldige UUID (versie %s) in'
            },
            vat: {
                'default': 'Voer een geldig BTW-nummer in',
                country: 'Voer een geldig BTW-nummer in uit %s',
                countries: {
                    AT: 'Oostenrijk',
                    BE: 'België',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CY: 'Cyprus',
                    CZ: 'Tsjechische Republiek',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    GR: 'Griekenland',
                    EL: 'Griekenland',
                    HU: 'Hongarije',
                    HR: 'Kroatië',
                    IE: 'Ierland',
                    IS: 'IJsland',
                    IT: 'Italië',
                    LT: 'Litouwen',
                    LU: 'Luxemburg',
                    LV: 'Letland',
                    MT: 'Malta',
                    NL: 'Nederland',
                    NO: 'Noorwegen',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    RS: 'Servië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    VE: 'Venezuela',
                    ZA: 'Zuid-Afrika'
                }
            },
            vin: {
                'default': 'Voer een geldig VIN-nummer in'
            },
            zipCode: {
                'default': 'Voer een geldige postcode in',
                country: 'Voer een geldige postcode in uit %s',
                countries: {
                    AT: 'Oostenrijk',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CA: 'Canada',
                    CH: 'Zwitserland',
                    CZ: 'Tsjechische Republiek',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    ES: 'Spanje',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    IE: 'Ierland',
                    IN: 'Indië',
                    IT: 'Italië',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    SE: 'Zweden',
                    SG: 'Singapore',
                    SK: 'Slowakije',
                    US: 'VS'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Norwegian language package
     * Translated by @trondulseth
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'no_NO': {
            base64: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig base64-kodet verdi'
            },
            between: {
                'default': 'Vennligst fyll ut dette feltet med en verdi mellom %s og %s',
                notInclusive: 'Vennligst tast inn kun en verdi mellom %s og %s'
            },
            bic: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig BIC-nummer'
            },
            callback: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig verdi'
            },
            choice: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig verdi',
                less: 'Vennligst velg minst %s valgmuligheter',
                more: 'Vennligst velg maks %s valgmuligheter',
                between: 'Vennligst velg %s - %s valgmuligheter'
            },
            color: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig'
            },
            creditCard: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig kreditkortnummer'
            },
            cusip: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig CUSIP-nummer'
            },
            cvv: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig CVV-nummer'
            },
            date: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig dato',
                min: 'Vennligst fyll ut dette feltet med en gyldig dato etter %s',
                max: 'Vennligst fyll ut dette feltet med en gyldig dato før %s',
                range: 'Vennligst fyll ut dette feltet med en gyldig dato mellom %s - %s'
            },
            different: {
                'default': 'Vennligst fyll ut dette feltet med en annen verdi'
            },
            digits: {
                'default': 'Vennligst tast inn kun sifre'
            },
            ean: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig EAN-nummer'
            },
            ein: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig EIN-nummer'
            },
            emailAddress: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig epostadresse'
            },
            file: {
                'default': 'Velg vennligst en gyldig fil'
            },
            greaterThan: {
                'default': 'Vennligst fyll ut dette feltet med en verdi større eller lik %s',
                notInclusive: 'Vennligst fyll ut dette feltet med en verdi større enn %s'
            },
            grid: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig GRIDnummer'
            },
            hex: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig hexadecimalt nummer'
            },
            iban: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig IBAN-nummer',
                country: 'Vennligst fyll ut dette feltet med et gyldig IBAN-nummer i %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'De Forente Arabiske Emirater',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Østerrike',
                    AZ: 'Aserbajdsjan',
                    BA: 'Bosnia-Hercegovina',
                    BE: 'Belgia',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasil',
                    CH: 'Sveits',
                    CI: 'Elfenbenskysten',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Kapp Verde',
                    CY: 'Kypros',
                    CZ: 'Tsjekkia',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    DO: 'Den dominikanske republikk',
                    DZ: 'Algerie',
                    EE: 'Estland',
                    ES: 'Spania',
                    FI: 'Finland',
                    FO: 'Færøyene',
                    FR: 'Frankrike',
                    GB: 'Storbritannia',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Grønland',
                    GR: 'Hellas',
                    GT: 'Guatemala',
                    HR: 'Kroatia',
                    HU: 'Ungarn',
                    IE: 'Irland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Island',
                    IT: 'Italia',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kasakhstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Litauen',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagaskar',
                    MK: 'Makedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mosambik',
                    NL: 'Nederland',
                    NO: 'Norge',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Saudi-Arabia',
                    SE: 'Sverige',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'øst-Timor',
                    TN: 'Tunisia',
                    TR: 'Tyrkia',
                    VG: 'De Britiske Jomfruøyene',
                    XK: 'Republikken Kosovo'
                }
            },
            id: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig identifikasjons-nummer',
                country: 'Vennligst fyll ut dette feltet med et gyldig identifikasjons-nummer i %s',
                countries: {
                    BA: 'Bosnien-Hercegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Sveits',
                    CL: 'Chile',
                    CN: 'Kina',
                    CZ: 'Tsjekkia',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spania',
                    FI: 'Finland',
                    HR: 'Kroatia',
                    IE: 'Irland',
                    IS: 'Island',
                    LT: 'Litauen',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Makedonia',
                    NL: 'Nederland',
                    PL: 'Polen',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Sverige',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    TR: 'Tyrkia',
                    ZA: 'Sør-Afrika'
                }
            },
            identical: {
                'default': 'Vennligst fyll ut dette feltet med den samme verdi'
            },
            imei: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig IMEI-nummer'
            },
            imo: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig IMO-nummer'
            },
            integer: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig tall'
            },
            ip: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig IP adresse',
                ipv4: 'Vennligst fyll ut dette feltet med en gyldig IPv4 adresse',
                ipv6: 'Vennligst fyll ut dette feltet med en gyldig IPv6 adresse'
            },
            isbn: {
                'default': 'Vennligst fyll ut dette feltet med ett gyldig ISBN-nummer'
            },
            isin: {
                'default': 'Vennligst fyll ut dette feltet med ett gyldig ISIN-nummer'
            },
            ismn: {
                'default': 'Vennligst fyll ut dette feltet med ett gyldig ISMN-nummer'
            },
            issn: {
                'default': 'Vennligst fyll ut dette feltet med ett gyldig ISSN-nummer'
            },
            lessThan: {
                'default': 'Vennligst fyll ut dette feltet med en verdi mindre eller lik %s',
                notInclusive: 'Vennligst fyll ut dette feltet med en verdi mindre enn %s'
            },
            mac: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig MAC adresse'
            },
            meid: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig MEID-nummer'
            },
            notEmpty: {
                'default': 'Vennligst fyll ut dette feltet'
            },
            numeric: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig flytende desimaltall'
            },
            phone: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig telefonnummer',
                country: 'Vennligst fyll ut dette feltet med et gyldig telefonnummer i %s',
                countries: {
                    AE: 'De Forente Arabiske Emirater',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CN: 'Kina',
                    CZ: 'Tsjekkia',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spania',
                    FR: 'Frankrike',
                    GB: 'Storbritannia',
                    IN: 'India',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PK: 'Pakistan',
                    RO: 'Rumenia',
                    RU: 'Russland',
                    SK: 'Slovakia',
                    TH: 'Thailand',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig verdi'
            },
            regexp: {
                'default': 'Vennligst fyll ut dette feltet med en verdi som matcher mønsteret'
            },
            remote: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig verdi'
            },
            rtn: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig RTN-nummer'
            },
            sedol: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig SEDOL-nummer'
            },
            siren: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig SIREN-nummer'
            },
            siret: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig SIRET-nummer'
            },
            step: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig trinn av %s'
            },
            stringCase: {
                'default': 'Venligst fyll inn dette feltet kun med små bokstaver',
                upper: 'Venligst fyll inn dette feltet kun med store bokstaver'
            },
            stringLength: {
                'default': 'Vennligst fyll ut dette feltet med en verdi av gyldig lengde',
                less: 'Vennligst fyll ut dette feltet med mindre enn %s tegn',
                more: 'Vennligst fyll ut dette feltet med mer enn %s tegn',
                between: 'Vennligst fyll ut dette feltet med en verdi mellom %s og %s tegn'
            },
            uri: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig URI'
            },
            uuid: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig UUID-nummer',
                version: 'Vennligst fyll ut dette feltet med en gyldig UUID version %s-nummer'
            },
            vat: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig MVA nummer',
                country: 'Vennligst fyll ut dette feltet med et gyldig MVA nummer i %s',
                countries: {
                    AT: 'Østerrike',
                    BE: 'Belgia',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Schweiz',
                    CY: 'Cypern',
                    CZ: 'Tsjekkia',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spania',
                    FI: 'Finland',
                    FR: 'Frankrike',
                    GB: 'Storbritania',
                    GR: 'Hellas',
                    EL: 'Hellas',
                    HU: 'Ungarn',
                    HR: 'Kroatia',
                    IE: 'Irland',
                    IS: 'Island',
                    IT: 'Italia',
                    LT: 'Litauen',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Nederland',
                    NO: 'Norge',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russland',
                    RS: 'Serbia',
                    SE: 'Sverige',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'Sør-Afrika'
                }
            },
            vin: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig VIN-nummer'
            },
            zipCode: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig postnummer',
                country: 'Vennligst fyll ut dette feltet med et gyldig postnummer i %s',
                countries: {
                    AT: 'Østerrike',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CA: 'Canada',
                    CH: 'Schweiz',
                    CZ: 'Tsjekkia',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spania',
                    FR: 'Frankrike',
                    GB: 'Storbritannia',
                    IE: 'Irland',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russland',
                    SE: 'Sverige',
                    SG: 'Singapore',
                    SK: 'Slovakia',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Polish language package
     * Translated by @grzesiek
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'pl_PL': {
            base64: {
                'default': 'Wpisz poprawny ciąg znaków zakodowany w base 64'
            },
            between: {
                'default': 'Wprowadź wartość pomiędzy %s i %s',
                notInclusive: 'Wprowadź wartość pomiędzy %s i %s (zbiór otwarty)'
            },
            bic: {
                'default': 'Wprowadź poprawny numer BIC'
            },
            callback: {
                'default': 'Wprowadź poprawną wartość'
            },
            choice: {
                'default': 'Wprowadź poprawną wartość',
                less: 'Wybierz przynajmniej %s opcji',
                more: 'Wybierz maksymalnie %s opcji',
                between: 'Wybierz przynajmniej %s i maksymalnie %s opcji'
            },
            color: {
                'default': 'Wprowadź poprawny kolor w formacie'
            },
            creditCard: {
                'default': 'Wprowadź poprawny numer karty kredytowej'
            },
            cusip: {
                'default': 'Wprowadź poprawny numer CUSIP'
            },
            cvv: {
                'default': 'Wprowadź poprawny numer CVV'
            },
            date: {
                'default': 'Wprowadź poprawną datę',
                min: 'Wprowadź datę po %s',
                max: 'Wprowadź datę przed  %s',
                range: 'Wprowadź datę pomiędzy %s i %s'
            },
            different: {
                'default': 'Wprowadź inną wartość'
            },
            digits: {
                'default': 'Wprowadź tylko cyfry'
            },
            ean: {
                'default': 'Wprowadź poprawny numer EAN'
            },
            ein: {
                'default': 'Wprowadź poprawny numer EIN'
            },
            emailAddress: {
                'default': 'Wprowadź poprawny adres e-mail'
            },
            file: {
                'default': 'Wybierz prawidłowy plik'
            },
            greaterThan: {
                'default': 'Wprowadź wartość większą bądź równą %s',
                notInclusive: 'Wprowadź wartość większą niż %s'
            },
            grid: {
                'default': 'Wprowadź poprawny numer GRId'
            },
            hex: {
                'default': 'Wprowadź poprawną liczbę w formacie heksadecymalnym'
            },
            iban: {
                'default': 'Wprowadź poprawny numer IBAN',
                country: 'Wprowadź poprawny numer IBAN w kraju %s',
                countries: {
                    AD: 'Andora',
                    AE: 'Zjednoczone Emiraty Arabskie',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbejdżan',
                    BA: 'Bośnia i Hercegowina',
                    BE: 'Belgia',
                    BF: 'Burkina Faso',
                    BG: 'Bułgaria',
                    BH: 'Bahrajn',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazylia',
                    CH: 'Szwajcaria',
                    CI: 'Wybrzeże Kości Słoniowej',
                    CM: 'Kamerun',
                    CR: 'Kostaryka',
                    CV: 'Republika Zielonego Przylądka',
                    CY: 'Cypr',
                    CZ: 'Czechy',
                    DE: 'Niemcy',
                    DK: 'Dania',
                    DO: 'Dominikana',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Hiszpania',
                    FI: 'Finlandia',
                    FO: 'Wyspy Owcze',
                    FR: 'Francja',
                    GB: 'Wielka Brytania',
                    GE: 'Gruzja',
                    GI: 'Gibraltar',
                    GL: 'Grenlandia',
                    GR: 'Grecja',
                    GT: 'Gwatemala',
                    HR: 'Chorwacja',
                    HU: 'Węgry',
                    IE: 'Irlandia',
                    IL: 'Izrael',
                    IR: 'Iran',
                    IS: 'Islandia',
                    IT: 'Włochy',
                    JO: 'Jordania',
                    KW: 'Kuwejt',
                    KZ: 'Kazahstan',
                    LB: 'Liban',
                    LI: 'Liechtenstein',
                    LT: 'Litwa',
                    LU: 'Luksemburg',
                    LV: 'Łotwa',
                    MC: 'Monako',
                    MD: 'Mołdawia',
                    ME: 'Czarnogóra',
                    MG: 'Madagaskar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauretania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambik',
                    NL: 'Holandia',
                    NO: 'Norwegia',
                    PK: 'Pakistan',
                    PL: 'Polska',
                    PS: 'Palestyna',
                    PT: 'Portugalia',
                    QA: 'Katar',
                    RO: 'Rumunia',
                    RS: 'Serbia',
                    SA: 'Arabia Saudyjska',
                    SE: 'Szwecja',
                    SI: 'Słowenia',
                    SK: 'Słowacja',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Timor Wschodni',
                    TN: 'Tunezja',
                    TR: 'Turcja',
                    VG: 'Brytyjskie Wyspy Dziewicze',
                    XK: 'Republika Kosowa'
                }
            },
            id: {
                'default': 'Wprowadź poprawny numer identyfikacyjny',
                country: 'Wprowadź poprawny numer identyfikacyjny w kraju %s',
                countries: {
                    BA: 'Bośnia i Hercegowina',
                    BG: 'Bułgaria',
                    BR: 'Brazylia',
                    CH: 'Szwajcaria',
                    CL: 'Chile',
                    CN: 'Chiny',
                    CZ: 'Czechy',
                    DK: 'Dania',
                    EE: 'Estonia',
                    ES: 'Hiszpania',
                    FI: 'Finlandia',
                    HR: 'Chorwacja',
                    IE: 'Irlandia',
                    IS: 'Islandia',
                    LT: 'Litwa',
                    LV: 'Łotwa',
                    ME: 'Czarnogóra',
                    MK: 'Macedonia',
                    NL: 'Holandia',
                    PL: 'Polska',
                    RO: 'Rumunia',
                    RS: 'Serbia',
                    SE: 'Szwecja',
                    SI: 'Słowenia',
                    SK: 'Słowacja',
                    SM: 'San Marino',
                    TH: 'Tajlandia',
                    TR: 'Turcja',
                    ZA: 'Republika Południowej Afryki'
                }
            },
            identical: {
                'default': 'Wprowadź taką samą wartość'
            },
            imei: {
                'default': 'Wprowadź poprawny numer IMEI'
            },
            imo: {
                'default': 'Wprowadź poprawny numer IMO'
            },
            integer: {
                'default': 'Wprowadź poprawną liczbę całkowitą'
            },
            ip: {
                'default': 'Wprowadź poprawny adres IP',
                ipv4: 'Wprowadź poprawny adres IPv4',
                ipv6: 'Wprowadź poprawny adres IPv6'
            },
            isbn: {
                'default': 'Wprowadź poprawny numer ISBN'
            },
            isin: {
                'default': 'Wprowadź poprawny numer ISIN'
            },
            ismn: {
                'default': 'Wprowadź poprawny numer ISMN'
            },
            issn: {
                'default': 'Wprowadź poprawny numer ISSN'
            },
            lessThan: {
                'default': 'Wprowadź wartość mniejszą bądź równą %s',
                notInclusive: 'Wprowadź wartość mniejszą niż %s'
            },
            mac: {
                'default': 'Wprowadź poprawny adres MAC'
            },
            meid: {
                'default': 'Wprowadź poprawny numer MEID'
            },
            notEmpty: {
                'default': 'Wprowadź wartość, pole nie może być puste'
            },
            numeric: {
                'default': 'Wprowadź poprawną liczbę zmiennoprzecinkową'
            },
            phone: {
                'default': 'Wprowadź poprawny numer telefonu',
                country: 'Wprowadź poprawny numer telefonu w kraju %s',
                countries: {
                    AE: 'Zjednoczone Emiraty Arabskie',
                    BG: 'Bułgaria',
                    BR: 'Brazylia',
                    CN: 'Chiny',
                    CZ: 'Czechy',
                    DE: 'Niemcy',
                    DK: 'Dania',
                    ES: 'Hiszpania',
                    FR: 'Francja',
                    GB: 'Wielka Brytania',
                    IN: 'Indie',
                    MA: 'Maroko',
                    NL: 'Holandia',
                    PK: 'Pakistan',
                    RO: 'Rumunia',
                    RU: 'Rosja',
                    SK: 'Słowacja',
                    TH: 'Tajlandia',
                    US: 'USA',
                    VE: 'Wenezuela'
                }
            },
            promise: {
                'default': 'Wprowadź poprawną wartość'
            },
            regexp: {
                'default': 'Wprowadź wartość pasującą do wzoru'
            },
            remote: {
                'default': 'Wprowadź poprawną wartość'
            },
            rtn: {
                'default': 'Wprowadź poprawny numer RTN'
            },
            sedol: {
                'default': 'Wprowadź poprawny numer SEDOL'
            },
            siren: {
                'default': 'Wprowadź poprawny numer SIREN'
            },
            siret: {
                'default': 'Wprowadź poprawny numer SIRET'
            },
            step: {
                'default': 'Wprowadź wielokrotność %s'
            },
            stringCase: {
                'default': 'Wprowadź tekst składającą się tylko z małych liter',
                upper: 'Wprowadź tekst składający się tylko z dużych liter'
            },
            stringLength: {
                'default': 'Wprowadź wartość o poprawnej długości',
                less: 'Wprowadź mniej niż %s znaków',
                more: 'Wprowadź więcej niż %s znaków',
                between: 'Wprowadź wartość składająca się z min %s i max %s znaków'
            },
            uri: {
                'default': 'Wprowadź poprawny URI'
            },
            uuid: {
                'default': 'Wprowadź poprawny numer UUID',
                version: 'Wprowadź poprawny numer UUID w wersji %s'
            },
            vat: {
                'default': 'Wprowadź poprawny numer VAT',
                country: 'Wprowadź poprawny numer VAT w kraju %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgia',
                    BG: 'Bułgaria',
                    BR: 'Brazylia',
                    CH: 'Szwajcaria',
                    CY: 'Cypr',
                    CZ: 'Czechy',
                    DE: 'Niemcy',
                    DK: 'Dania',
                    EE: 'Estonia',
                    ES: 'Hiszpania',
                    FI: 'Finlandia',
                    FR: 'Francja',
                    GB: 'Wielka Brytania',
                    GR: 'Grecja',
                    EL: 'Grecja',
                    HU: 'Węgry',
                    HR: 'Chorwacja',
                    IE: 'Irlandia',
                    IS: 'Islandia',
                    IT: 'Włochy',
                    LT: 'Litwa',
                    LU: 'Luksemburg',
                    LV: 'Łotwa',
                    MT: 'Malta',
                    NL: 'Holandia',
                    NO: 'Norwegia',
                    PL: 'Polska',
                    PT: 'Portugalia',
                    RO: 'Rumunia',
                    RU: 'Rosja',
                    RS: 'Serbia',
                    SE: 'Szwecja',
                    SI: 'Słowenia',
                    SK: 'Słowacja',
                    VE: 'Wenezuela',
                    ZA: 'Republika Południowej Afryki'
                }
            },
            vin: {
                'default': 'Wprowadź poprawny numer VIN'
            },
            zipCode: {
                'default': 'Wprowadź poprawny kod pocztowy',
                country: 'Wprowadź poprawny kod pocztowy w kraju %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bułgaria',
                    BR: 'Brazylia',
                    CA: 'Kanada',
                    CH: 'Szwajcaria',
                    CZ: 'Czechy',
                    DE: 'Niemcy',
                    DK: 'Dania',
                    ES: 'Hiszpania',
                    FR: 'Francja',
                    GB: 'Wielka Brytania',
                    IE: 'Irlandia',
                    IN: 'Indie',
                    IT: 'Włochy',
                    MA: 'Maroko',
                    NL: 'Holandia',
                    PL: 'Polska',
                    PT: 'Portugalia',
                    RO: 'Rumunia',
                    RU: 'Rosja',
                    SE: 'Szwecja',
                    SG: 'Singapur',
                    SK: 'Słowacja',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));
(function ($) {
    /**
     * Portuguese (Brazil) language package
     * Translated by @marcuscarvalho6. Improved by @dgmike
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'pt_BR': {
            base64: {
                'default': 'Por favor insira um código base 64 válido'
            },
            between: {
                'default': 'Por favor insira um valor entre %s e %s',
                notInclusive: 'Por favor insira um valor estritamente entre %s e %s'
            },
            bic: {
                'default': 'Por favor insira um número BIC válido'
            },
            callback: {
                'default': 'Por favor insira um valor válido'
            },
            choice: {
                'default': 'Por favor insira um valor válido',
                less: 'Por favor escolha %s opções no mínimo',
                more: 'Por favor escolha %s opções no máximo',
                between: 'Por favor escolha de %s a %s opções'
            },
            color: {
                'default': 'Por favor insira uma cor válida'
            },
            creditCard: {
                'default': 'Por favor insira um número de cartão de crédito válido'
            },
            cusip: {
                'default': 'Por favor insira um número CUSIP válido'
            },
            cvv: {
                'default': 'Por favor insira um número CVV válido'
            },
            date: {
                'default': 'Por favor insira uma data válida',
                min: 'Por favor insira uma data posterior a %s',
                max: 'Por favor insira uma data anterior a %s',
                range: 'Por favor insira uma data entre %s e %s'
            },
            different: {
                'default': 'Por favor insira valores diferentes'
            },
            digits: {
                'default': 'Por favor insira somente dígitos'
            },
            ean: {
                'default': 'Por favor insira um número EAN válido'
            },
            ein: {
                'default': 'Por favor insira um número EIN válido'
            },
            emailAddress: {
                'default': 'Por favor insira um email válido'
            },
            file: {
                'default': 'Por favor escolha um arquivo válido'
            },
            greaterThan: {
                'default': 'Por favor insira um valor maior ou igual a %s',
                notInclusive: 'Por favor insira um valor maior do que %s'
            },
            grid: {
                'default': 'Por favor insira uma GRID válida'
            },
            hex: {
                'default': 'Por favor insira um hexadecimal válido'
            },
            iban: {
                'default': 'Por favor insira um número IBAN válido',
                country: 'Por favor insira um número IBAN válido em %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emirados Árabes',
                    AL: 'Albânia',
                    AO: 'Angola',
                    AT: 'Áustria',
                    AZ: 'Azerbaijão',
                    BA: 'Bósnia-Herzegovina',
                    BE: 'Bélgica',
                    BF: 'Burkina Faso',
                    BG: 'Bulgária',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    IC: 'Costa do Marfim',
                    CM: 'Camarões',
                    CR: 'Costa Rica',
                    CV: 'Cabo Verde',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    DO: 'República Dominicana',
                    DZ: 'Argélia',
                    EE: 'Estónia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    FO: 'Ilhas Faroé',
                    FR: 'França',
                    GB: 'Reino Unido',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlândia',
                    GR: 'Grécia',
                    GT: 'Guatemala',
                    HR: 'Croácia',
                    HU: 'Hungria',
                    IE: 'Ireland',
                    IL: 'Israel',
                    IR: 'Irão',
                    IS: 'Islândia',
                    TI: 'Itália',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Cazaquistão',
                    LB: 'Líbano',
                    LI: 'Liechtenstein',
                    LT: 'Lituânia',
                    LU: 'Luxemburgo',
                    LV: 'Letónia',
                    MC: 'Mônaco',
                    MD: 'Moldávia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedónia',
                    ML: 'Mali',
                    MR: 'Mauritânia',
                    MT: 'Malta',
                    MU: 'Maurício',
                    MZ: 'Moçambique',
                    NL: 'Países Baixos',
                    NO: 'Noruega',
                    PK: 'Paquistão',
                    PL: 'Polônia',
                    PS: 'Palestino',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Roménia',
                    RS: 'Sérvia',
                    SA: 'Arábia Saudita',
                    SE: 'Suécia',
                    SI: 'Eslovénia',
                    SK: 'Eslováquia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Timor Leste',
                    TN: 'Tunísia',
                    TR: 'Turquia',
                    VG: 'Ilhas Virgens Britânicas',
                    XK: 'República do Kosovo'
                }
            },
            id: {
                'default': 'Por favor insira um código de identificação válido',
                country: 'Por favor insira um número de indentificação válido em %s',
                countries: {
                    BA: 'Bósnia e Herzegovina',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'República Checa',
                    DK: 'Dinamarca',
                    EE: 'Estônia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    HR: 'Croácia',
                    IE: 'Irlanda',
                    IS: 'Islândia',
                    LT: 'Lituânia',
                    LV: 'Letónia',
                    ME: 'Montenegro',
                    MK: 'Macedónia',
                    NL: 'Holanda',
                    PL: 'Polônia',
                    RO: 'Roménia',
                    RS: 'Sérvia',
                    SE: 'Suécia',
                    SI: 'Eslovênia',
                    SK: 'Eslováquia',
                    SM: 'San Marino',
                    TH: 'Tailândia',
                    TR: 'Turquia',
                    ZA: 'África do Sul'
                }
            },
            identical: {
                'default': 'Por favor, insira o mesmo valor'
            },
            imei: {
                'default': 'Por favor insira um IMEI válido'
            },
            imo: {
                'default': 'Por favor insira um IMO válido'
            },
            integer: {
                'default': 'Por favor insira um número inteiro válido'
            },
            ip: {
                'default': 'Por favor insira um IP válido',
                ipv4: 'Por favor insira um endereço de IPv4 válido',
                ipv6: 'Por favor insira um endereço de IPv6 válido'
            },
            isbn: {
                'default': 'Por favor insira um ISBN válido'
            },
            isin: {
                'default': 'Por favor insira um ISIN válido'
            },
            ismn: {
                'default': 'Por favor insira um ISMN válido'
            },
            issn: {
                'default': 'Por favor insira um ISSN válido'
            },
            lessThan: {
                'default': 'Por favor insira um valor menor ou igual a %s',
                notInclusive: 'Por favor insira um valor menor do que %s'
            },
            mac: {
                'default': 'Por favor insira um endereço MAC válido'
            },
            meid: {
                'default': 'Por favor insira um MEID válido'
            },
            notEmpty: {
                'default': 'Por favor insira um valor'
            },
            numeric: {
                'default': 'Por favor insira um número real válido'
            },
            phone: {
                'default': 'Por favor insira um número de telefone válido',
                country: 'Por favor insira um número de telefone válido em %s',
                countries: {
                    AE: 'Emirados Árabes',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CN: 'China',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    ES: 'Espanha',
                    FR: 'França',
                    GB: 'Reino Unido',
                    IN: 'Índia',
                    MA: 'Marrocos',
                    NL: 'Países Baixos',
                    PK: 'Paquistão',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    SK: 'Eslováquia',
                    TH: 'Tailândia',
                    US: 'EUA',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Por favor insira um valor válido'
            },
            regexp: {
                'default': 'Por favor insira um valor correspondente ao padrão'
            },
            remote: {
                'default': 'Por favor insira um valor válido'
            },
            rtn: {
                'default': 'Por favor insira um número válido RTN'
            },
            sedol: {
                'default': 'Por favor insira um número válido SEDOL'
            },
            siren: {
                'default': 'Por favor insira um número válido SIREN'
            },
            siret: {
                'default': 'Por favor insira um número válido SIRET'
            },
            step: {
                'default': 'Por favor insira um passo válido %s'
            },
            stringCase: {
                'default': 'Por favor, digite apenas caracteres minúsculos',
                upper: 'Por favor, digite apenas caracteres maiúsculos'
            },
            stringLength: {
                'default': 'Por favor insira um valor com comprimento válido',
                less: 'Por favor insira menos de %s caracteres',
                more: 'Por favor insira mais de %s caracteres',
                between: 'Por favor insira um valor entre %s e %s caracteres'
            },
            uri: {
                'default': 'Por favor insira um URI válido'
            },
            uuid: {
                'default': 'Por favor insira um número válido UUID',
                version: 'Por favor insira uma versão %s  UUID válida'
            },
            vat: {
                'default': 'Por favor insira um VAT válido',
                country: 'Por favor insira um número VAT válido em %s',
                countries: {
                    AT: 'Áustria',
                    BE: 'Bélgica',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    EE: 'Estônia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    FR: 'França',
                    GB: 'Reino Unido',
                    GR: 'Grécia',
                    EL: 'Grécia',
                    HU: 'Hungria',
                    HR: 'Croácia',
                    IE: 'Irlanda',
                    IS: 'Islândia',
                    IT: 'Itália',
                    LT: 'Lituânia',
                    LU: 'Luxemburgo',
                    LV: 'Letónia',
                    MT: 'Malta',
                    NL: 'Holanda',
                    NO: 'Norway',
                    PL: 'Polônia',
                    PT: 'Portugal',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    RS: 'Sérvia',
                    SE: 'Suécia',
                    SI: 'Eslovênia',
                    SK: 'Eslováquia',
                    VE: 'Venezuela',
                    ZA: 'África do Sul'
                }
            },
            vin: {
                'default': 'Por favor insira um VIN válido'
            },
            zipCode: {
                'default': 'Por favor insira um código postal válido',
                country: 'Por favor insira um código postal válido em %s',
                countries: {
                    AT: 'Áustria',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CA: 'Canadá',
                    CH: 'Suíça',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    ES: 'Espanha',
                    FR: 'França',
                    GB: 'Reino Unido',
                    IE: 'Irlanda',
                    IN: 'Índia',
                    IT: 'Itália',
                    MA: 'Marrocos',
                    NL: 'Holanda',
                    PL: 'Polônia',
                    PT: 'Portugal',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    SE: 'Suécia',
                    SG: 'Cingapura',
                    SK: 'Eslováquia',
                    US: 'EUA'
                }
            }
        }
    });
}(jQuery));
(function ($) {
    /**
     * Portuguese (Portugal) language package
     * Translated by @rtbfreitas
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'pt_PT': {
            base64: {
                'default': 'Por favor insira um código base 64 válido'
            },
            between: {
                'default': 'Por favor insira um valor entre %s e %s',
                notInclusive: 'Por favor insira um valor estritamente entre %s e %s'
            },
            bic: {
                'default': 'Por favor insira um número BIC válido'
            },
            callback: {
                'default': 'Por favor insira um valor válido'
            },
            choice: {
                'default': 'Por favor insira um valor válido',
                less: 'Por favor escolha %s opções no mínimo',
                more: 'Por favor escolha %s opções no máximo',
                between: 'Por favor escolha de %s a %s opções'
            },
            color: {
                'default': 'Por favor insira uma cor válida'
            },
            creditCard: {
                'default': 'Por favor insira um número de cartão de crédito válido'
            },
            cusip: {
                'default': 'Por favor insira um número CUSIP válido'
            },
            cvv: {
                'default': 'Por favor insira um número CVV válido'
            },
            date: {
                'default': 'Por favor insira uma data válida',
                min: 'Por favor insira uma data posterior a %s',
                max: 'Por favor insira uma data anterior a %s',
                range: 'Por favor insira uma data entre %s e %s'
            },
            different: {
                'default': 'Por favor insira valores diferentes'
            },
            digits: {
                'default': 'Por favor insira somente dígitos'
            },
            ean: {
                'default': 'Por favor insira um número EAN válido'
            },
            ein: {
                'default': 'Por favor insira um número EIN válido'
            },
            emailAddress: {
                'default': 'Por favor insira um email válido'
            },
            file: {
                'default': 'Por favor escolha um arquivo válido'
            },
            greaterThan: {
                'default': 'Por favor insira um valor maior ou igual a %s',
                notInclusive: 'Por favor insira um valor maior do que %s'
            },
            grid: {
                'default': 'Por favor insira uma GRID válida'
            },
            hex: {
                'default': 'Por favor insira um hexadecimal válido'
            },
            iban: {
                'default': 'Por favor insira um número IBAN válido',
                country: 'Por favor insira um número IBAN válido em %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emirados Árabes',
                    AL: 'Albânia',
                    AO: 'Angola',
                    AT: 'Áustria',
                    AZ: 'Azerbaijão',
                    BA: 'Bósnia-Herzegovina',
                    BE: 'Bélgica',
                    BF: 'Burkina Faso',
                    BG: 'Bulgária',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    IC: 'Costa do Marfim',
                    CM: 'Camarões',
                    CR: 'Costa Rica',
                    CV: 'Cabo Verde',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    DO: 'República Dominicana',
                    DZ: 'Argélia',
                    EE: 'Estónia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    FO: 'Ilhas Faroé',
                    FR: 'França',
                    GB: 'Reino Unido',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlândia',
                    GR: 'Grécia',
                    GT: 'Guatemala',
                    HR: 'Croácia',
                    HU: 'Hungria',
                    IE: 'Ireland',
                    IL: 'Israel',
                    IR: 'Irão',
                    IS: 'Islândia',
                    TI: 'Itália',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Cazaquistão',
                    LB: 'Líbano',
                    LI: 'Liechtenstein',
                    LT: 'Lituânia',
                    LU: 'Luxemburgo',
                    LV: 'Letónia',
                    MC: 'Mônaco',
                    MD: 'Moldávia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedónia',
                    ML: 'Mali',
                    MR: 'Mauritânia',
                    MT: 'Malta',
                    MU: 'Maurício',
                    MZ: 'Moçambique',
                    NL: 'Países Baixos',
                    NO: 'Noruega',
                    PK: 'Paquistão',
                    PL: 'Polônia',
                    PS: 'Palestino',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Roménia',
                    RS: 'Sérvia',
                    SA: 'Arábia Saudita',
                    SE: 'Suécia',
                    SI: 'Eslovénia',
                    SK: 'Eslováquia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Timor Leste',
                    TN: 'Tunísia',
                    TR: 'Turquia',
                    VG: 'Ilhas Virgens Britânicas',
                    XK: 'República do Kosovo'
                }
            },
            id: {
                'default': 'Por favor insira um código de identificação válido',
                country: 'Por favor insira um número de indentificação válido em %s',
                countries: {
                    BA: 'Bósnia e Herzegovina',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'República Checa',
                    DK: 'Dinamarca',
                    EE: 'Estônia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    HR: 'Croácia',
                    IE: 'Irlanda',
                    IS: 'Islândia',
                    LT: 'Lituânia',
                    LV: 'Letónia',
                    ME: 'Montenegro',
                    MK: 'Macedónia',
                    NL: 'Holanda',
                    PL: 'Polônia',
                    RO: 'Roménia',
                    RS: 'Sérvia',
                    SE: 'Suécia',
                    SI: 'Eslovênia',
                    SK: 'Eslováquia',
                    SM: 'San Marino',
                    TH: 'Tailândia',
                    TR: 'Turquia',
                    ZA: 'África do Sul'
                }
            },
            identical: {
                'default': 'Por favor, insira o mesmo valor'
            },
            imei: {
                'default': 'Por favor insira um IMEI válido'
            },
            imo: {
                'default': 'Por favor insira um IMO válido'
            },
            integer: {
                'default': 'Por favor insira um número inteiro válido'
            },
            ip: {
                'default': 'Por favor insira um IP válido',
                ipv4: 'Por favor insira um endereço de IPv4 válido',
                ipv6: 'Por favor insira um endereço de IPv6 válido'
            },
            isbn: {
                'default': 'Por favor insira um ISBN válido'
            },
            isin: {
                'default': 'Por favor insira um ISIN válido'
            },
            ismn: {
                'default': 'Por favor insira um ISMN válido'
            },
            issn: {
                'default': 'Por favor insira um ISSN válido'
            },
            lessThan: {
                'default': 'Por favor insira um valor menor ou igual a %s',
                notInclusive: 'Por favor insira um valor menor do que %s'
            },
            mac: {
                'default': 'Por favor insira um endereço MAC válido'
            },
            meid: {
                'default': 'Por favor insira um MEID válido'
            },
            notEmpty: {
                'default': 'Por favor insira um valor'
            },
            numeric: {
                'default': 'Por favor insira um número real válido'
            },
            phone: {
                'default': 'Por favor insira um número de telefone válido',
                country: 'Por favor insira um número de telefone válido em %s',
                countries: {
                    AE: 'Emirados Árabes',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CN: 'China',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    ES: 'Espanha',
                    FR: 'França',
                    GB: 'Reino Unido',
                    IN: 'Índia',
                    MA: 'Marrocos',
                    NL: 'Países Baixos',
                    PK: 'Paquistão',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    SK: 'Eslováquia',
                    TH: 'Tailândia',
                    US: 'EUA',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Por favor insira um valor válido'
            },
            regexp: {
                'default': 'Por favor insira um valor correspondente ao padrão'
            },
            remote: {
                'default': 'Por favor insira um valor válido'
            },
            rtn: {
                'default': 'Por favor insira um número válido RTN'
            },
            sedol: {
                'default': 'Por favor insira um número válido SEDOL'
            },
            siren: {
                'default': 'Por favor insira um número válido SIREN'
            },
            siret: {
                'default': 'Por favor insira um número válido SIRET'
            },
            step: {
                'default': 'Por favor insira um passo válido %s'
            },
            stringCase: {
                'default': 'Por favor, digite apenas caracteres minúsculos',
                upper: 'Por favor, digite apenas caracteres maiúsculos'
            },
            stringLength: {
                'default': 'Por favor insira um valor com comprimento válido',
                less: 'Por favor insira menos de %s caracteres',
                more: 'Por favor insira mais de %s caracteres',
                between: 'Por favor insira um valor entre %s e %s caracteres'
            },
            uri: {
                'default': 'Por favor insira um URI válido'
            },
            uuid: {
                'default': 'Por favor insira um número válido UUID',
                version: 'Por favor insira uma versão %s  UUID válida'
            },
            vat: {
                'default': 'Por favor insira um VAT válido',
                country: 'Por favor insira um número VAT válido em %s',
                countries: {
                    AT: 'Áustria',
                    BE: 'Bélgica',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    EE: 'Estônia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    FR: 'França',
                    GB: 'Reino Unido',
                    GR: 'Grécia',
                    EL: 'Grécia',
                    HU: 'Hungria',
                    HR: 'Croácia',
                    IE: 'Irlanda',
                    IS: 'Islândia',
                    IT: 'Itália',
                    LT: 'Lituânia',
                    LU: 'Luxemburgo',
                    LV: 'Letónia',
                    MT: 'Malta',
                    NL: 'Holanda',
                    NO: 'Norway',
                    PL: 'Polônia',
                    PT: 'Portugal',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    RS: 'Sérvia',
                    SE: 'Suécia',
                    SI: 'Eslovênia',
                    SK: 'Eslováquia',
                    VE: 'Venezuela',
                    ZA: 'África do Sul'
                }
            },
            vin: {
                'default': 'Por favor insira um VIN válido'
            },
            zipCode: {
                'default': 'Por favor insira um código postal válido',
                country: 'Por favor insira um código postal válido em %s',
                countries: {
                    AT: 'Áustria',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CA: 'Canadá',
                    CH: 'Suíça',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    ES: 'Espanha',
                    FR: 'França',
                    GB: 'Reino Unido',
                    IE: 'Irlanda',
                    IN: 'Índia',
                    IT: 'Itália',
                    MA: 'Marrocos',
                    NL: 'Holanda',
                    PL: 'Polônia',
                    PT: 'Portugal',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    SE: 'Suécia',
                    SG: 'Cingapura',
                    SK: 'Eslováquia',
                    US: 'EUA'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Romanian language package
     * Translated by @filipac
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ro_RO': {
            base64: {
                'default': 'Te rog introdu un base64 valid'
            },
            between: {
                'default': 'Te rog introdu o valoare intre %s si %s',
                notInclusive: 'Te rog introdu o valoare doar intre %s si %s'
            },
            bic: {
                'default': 'Te rog sa introduci un numar BIC valid'
            },
            callback: {
                'default': 'Te rog introdu o valoare valida'
            },
            choice: {
                'default': 'Te rog introdu o valoare valida',
                less: 'Te rog alege minim %s optiuni',
                more: 'Te rog alege maxim %s optiuni',
                between: 'Te rog alege %s - %s optiuni'
            },
            color: {
                'default': 'Te rog sa introduci o culoare valida'
            },
            creditCard: {
                'default': 'Te rog introdu un numar de card valid'
            },
            cusip: {
                'default': 'Te rog introdu un numar CUSIP valid'
            },
            cvv: {
                'default': 'Te rog introdu un numar CVV valid'
            },
            date: {
                'default': 'Te rog introdu o data valida',
                min: 'Te rog sa introduci o data dupa %s',
                max: 'Te rog sa introduci o data inainte de %s',
                range: 'Te rog sa introduci o data in intervalul %s - %s'
            },
            different: {
                'default': 'Te rog sa introduci o valoare diferita'
            },
            digits: {
                'default': 'Te rog sa introduci doar cifre'
            },
            ean: {
                'default': 'Te rog sa introduci un numar EAN valid'
            },
            ein: {
                'default': 'Te rog sa introduci un numar EIN valid'
            },
            emailAddress: {
                'default': 'Te rog sa introduci o adresa de email valide'
            },
            file: {
                'default': 'Te rog sa introduci un fisier valid'
            },
            greaterThan: {
                'default': 'Te rog sa introduci o valoare mai mare sau egala cu %s',
                notInclusive: 'Te rog sa introduci  o valoare mai mare ca %s'
            },
            grid: {
                'default': 'Te rog sa introduci un numar GRId valid'
            },
            hex: {
                'default': 'Te rog sa introduci un numar hexadecimal valid'
            },
            iban: {
                'default': 'Te rog sa introduci un IBAN valid',
                country: 'Te rog sa introduci un IBAN valid din %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emiratele Arabe unite',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia si Herzegovina',
                    BE: 'Belgia',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazilia',
                    CH: 'Elvetia',
                    CI: 'Coasta de Fildes',
                    CM: 'Cameroon',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cipru',
                    CZ: 'Republica Cehia',
                    DE: 'Germania',
                    DK: 'Danemarca',
                    DO: 'Republica Dominicană',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Spania',
                    FI: 'Finlanda',
                    FO: 'Insulele Faroe',
                    FR: 'Franta',
                    GB: 'Regatul Unit',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlanda',
                    GR: 'Grecia',
                    GT: 'Guatemala',
                    HR: 'Croatia',
                    HU: 'Ungaria',
                    IE: 'Irlanda',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islanda',
                    IT: 'Italia',
                    JO: 'Iordania',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Lebanon',
                    LI: 'Liechtenstein',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Muntenegru',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Olanda',
                    NO: 'Norvegia',
                    PK: 'Pakistan',
                    PL: 'Polanda',
                    PS: 'Palestina',
                    PT: 'Portugalia',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Arabia Saudita',
                    SE: 'Suedia',
                    SI: 'Slovenia',
                    SK: 'Slovacia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Timorul de Est',
                    TN: 'Tunisia',
                    TR: 'Turkey',
                    VG: 'Insulele Virgin',
                    XK: 'Republica Kosovo'
                }
            },
            id: {
                'default': 'Te rog sa introduci un numar de identificare valid',
                country: 'Te rog sa introduci un numar de identificare valid din %s',
                countries: {
                    BA: 'Bosnia si Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brazilia',
                    CH: 'Elvetia',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'Republica Cehia',
                    DK: 'Danemarca',
                    EE: 'Estonia',
                    ES: 'Spania',
                    FI: 'Finlanda',
                    HR: 'Croatia',
                    IE: 'Irlanda',
                    IS: 'Islanda',
                    LT: 'Lithuania',
                    LV: 'Latvia',
                    ME: 'Muntenegru',
                    MK: 'Macedonia',
                    NL: 'Olanda',
                    PL: 'Polanda',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Suedia',
                    SI: 'Slovenia',
                    SK: 'Slovacia',
                    SM: 'San Marino',
                    TH: 'Thailanda',
                    TR: 'Turkey',
                    ZA: 'Africa de Sud'
                }
            },
            identical: {
                'default': 'Te rog sa introduci aceeasi valoare'
            },
            imei: {
                'default': 'Te rog sa introduci un numar IMEI valid'
            },
            imo: {
                'default': 'Te rog sa introduci un numar IMO valid'
            },
            integer: {
                'default': 'Te rog sa introduci un numar valid'
            },
            ip: {
                'default': 'Te rog sa introduci o adresa IP valida',
                ipv4: 'Te rog sa introduci o adresa IPv4 valida',
                ipv6: 'Te rog sa introduci o adresa IPv6 valida'
            },
            isbn: {
                'default': 'Te rog sa introduci un numar ISBN valid'
            },
            isin: {
                'default': 'Te rog sa introduci un numar ISIN valid'
            },
            ismn: {
                'default': 'Te rog sa introduci un numar ISMN valid'
            },
            issn: {
                'default': 'Te rog sa introduci un numar ISSN valid'
            },
            lessThan: {
                'default': 'Te rog sa introduci o valoare mai mica sau egala cu %s',
                notInclusive: 'Te rog sa introduci o valoare mai mica decat %s'
            },
            mac: {
                'default': 'Te rog sa introduci o adresa MAC valida'
            },
            meid: {
                'default': 'Te rog sa introduci un numar MEID valid'
            },
            notEmpty: {
                'default': 'Te rog sa introduci o valoare'
            },
            numeric: {
                'default': 'Te rog sa introduci un numar'
            },
            phone: {
                'default': 'Te rog sa introduci un numar de telefon valid',
                country: 'Te rog sa introduci un numar de telefon valid din %s',
                countries: {
                    AE: 'Emiratele Arabe unite',
                    BG: 'Bulgaria',
                    BR: 'Brazilia',
                    CN: 'China',
                    CZ: 'Republica Cehia',
                    DE: 'Germania',
                    DK: 'Danemarca',
                    ES: 'Spania',
                    FR: 'Franta',
                    GB: 'Regatul Unit',
                    IN: 'India',
                    MA: 'Maroc',
                    NL: 'Olanda',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Rusia',
                    SK: 'Slovacia',
                    TH: 'Thailanda',
                    US: 'SUA',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Te rog introdu o valoare valida'
            },
            regexp: {
                'default': 'Te rog sa introduci o valoare in formatul'
            },
            remote: {
                'default': 'Te rog sa introduci o valoare valida'
            },
            rtn: {
                'default': 'Te rog sa introduci un numar RTN valid'
            },
            sedol: {
                'default': 'Te rog sa introduci un numar SEDOL valid'
            },
            siren: {
                'default': 'Te rog sa introduci un numar SIREN valid'
            },
            siret: {
                'default': 'Te rog sa introduci un numar SIRET valid'
            },
            step: {
                'default': 'Te rog introdu un pas de %s'
            },
            stringCase: {
                'default': 'Te rog sa introduci doar litere mici',
                upper: 'Te rog sa introduci doar litere mari'
            },
            stringLength: {
                'default': 'Te rog sa introduci o valoare cu lungimea valida',
                less: 'Te rog sa introduci mai putin de %s caractere',
                more: 'Te rog sa introduci mai mult de %s caractere',
                between: 'Te rog sa introduci o valoare cu lungimea intre %s si %s caractere'
            },
            uri: {
                'default': 'Te rog sa introduci un URI valid'
            },
            uuid: {
                'default': 'Te rog sa introduci un numar UUID valid',
                version: 'Te rog sa introduci un numar UUID versiunea %s valid'
            },
            vat: {
                'default': 'Te rog sa introduci un numar TVA valid',
                country: 'Te rog sa introduci un numar TVA valid din %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgia',
                    BG: 'Bulgaria',
                    BR: 'Brazilia',
                    CH: 'Elvetia',
                    CY: 'Cipru',
                    CZ: 'Republica Cehia',
                    DE: 'Germania',
                    DK: 'Danemarca',
                    EE: 'Estonia',
                    ES: 'Spania',
                    FI: 'Finlanda',
                    FR: 'Franta',
                    GB: 'Regatul Unit',
                    GR: 'Grecia',
                    EL: 'Grecia',
                    HU: 'Ungaria',
                    HR: 'Croatia',
                    IE: 'Irlanda',
                    IS: 'Islanda',
                    IT: 'Italia',
                    LT: 'Lituania',
                    LU: 'Luxemburg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Olanda',
                    NO: 'Norvegia',
                    PL: 'Polanda',
                    PT: 'Portugalia',
                    RO: 'Romania',
                    RU: 'Rusia',
                    RS: 'Serbia',
                    SE: 'Suedia',
                    SI: 'Slovenia',
                    SK: 'Slovacia',
                    VE: 'Venezuela',
                    ZA: 'Africa de Sud'
                }
            },
            vin: {
                'default': 'Te rog sa introduci un numar VIN valid'
            },
            zipCode: {
                'default': 'Te rog sa introduci un cod postal valid',
                country: 'Te rog sa introduci un cod postal valid din %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brazilia',
                    CA: 'Canada',
                    CH: 'Elvetia',
                    CZ: 'Republica Cehia',
                    DE: 'Germania',
                    DK: 'Danemarca',
                    ES: 'Spania',
                    FR: 'Franta',
                    GB: 'Regatul Unit',
                    IE: 'Irlanda',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Maroc',
                    NL: 'Olanda',
                    PL: 'Polanda',
                    PT: 'Portugalia',
                    RO: 'Romania',
                    RU: 'Rusia',
                    SE: 'Suedia',
                    SG: 'Singapore',
                    SK: 'Slovacia',
                    US: 'SUA'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Russian language package
     * Translated by @cylon-v. Improved by @stepin, @oleg-voloshyn
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ru_RU': {
            base64: {
                'default': 'Пожалуйста, введите корректную строку base64'
            },
            between: {
                'default': 'Пожалуйста, введите значение от %s до %s',
                notInclusive: 'Пожалуйста, введите значение между %s и %s'
            },
            bic: {
                'default': 'Пожалуйста, введите правильный номер BIC'
            },
            callback: {
                'default': 'Пожалуйста, введите корректное значение'
            },
            choice: {
                'default': 'Пожалуйста, введите корректное значение',
                less: 'Пожалуйста, выберите хотя бы %s опций',
                more: 'Пожалуйста, выберите не больше %s опций',
                between: 'Пожалуйста, выберите %s-%s опций'
            },
            color: {
                'default': 'Пожалуйста, введите правильный номер цвета'
            },
            creditCard: {
                'default': 'Пожалуйста, введите правильный номер кредитной карты'
            },
            cusip: {
                'default': 'Пожалуйста, введите правильный номер CUSIP'
            },
            cvv: {
                'default': 'Пожалуйста, введите правильный номер CVV'
            },
            date: {
                'default': 'Пожалуйста, введите правильную дату',
                min: 'Пожалуйста, введите дату после %s',
                max: 'Пожалуйста, введите дату перед %s',
                range: 'Пожалуйста, введите дату в диапазоне %s - %s'
            },
            different: {
                'default': 'Пожалуйста, введите другое значение'
            },
            digits: {
                'default': 'Пожалуйста, введите только цифры'
            },
            ean: {
                'default': 'Пожалуйста, введите правильный номер EAN'
            },
            ein: {
                'default': 'Пожалуйста, введите правильный номер EIN'
            },
            emailAddress: {
                'default': 'Пожалуйста, введите правильный адрес эл. почты'
            },
            file: {
                'default': 'Пожалуйста, выберите файл'
            },
            greaterThan: {
                'default': 'Пожалуйста, введите значение большее или равное %s',
                notInclusive: 'Пожалуйста, введите значение больше %s'
            },
            grid: {
                'default': 'Пожалуйста, введите правильный номер GRId'
            },
            hex: {
                'default': 'Пожалуйста, введите правильное шестнадцатиричное число'
            },
            iban: {
                'default': 'Пожалуйста, введите правильный номер IBAN',
                country: 'Пожалуйста, введите правильный номер IBAN в %s',
                countries: {
                    AD: 'Андорре',
                    AE: 'Объединённых Арабских Эмиратах',
                    AL: 'Албании',
                    AO: 'Анголе',
                    AT: 'Австрии',
                    AZ: 'Азербайджане',
                    BA: 'Боснии и Герцеговине',
                    BE: 'Бельгии',
                    BF: 'Буркина-Фасо',
                    BG: 'Болгарии',
                    BH: 'Бахрейне',
                    BI: 'Бурунди',
                    BJ: 'Бенине',
                    BR: 'Бразилии',
                    CH: 'Швейцарии',
                    CI: "Кот-д'Ивуаре",
                    CM: 'Камеруне',
                    CR: 'Коста-Рике',
                    CV: 'Кабо-Верде',
                    CY: 'Кипре',
                    CZ: 'Чешская республика',
                    DE: 'Германии',
                    DK: 'Дании',
                    DO: 'Доминикане Республика',
                    DZ: 'Алжире',
                    EE: 'Эстонии',
                    ES: 'Испании',
                    FI: 'Финляндии',
                    FO: 'Фарерских островах',
                    FR: 'Франции',
                    GB: 'Великобритании',
                    GE: 'Грузии',
                    GI: 'Гибралтаре',
                    GL: 'Гренландии',
                    GR: 'Греции',
                    GT: 'Гватемале',
                    HR: 'Хорватии',
                    HU: 'Венгрии',
                    IE: 'Ирландии',
                    IL: 'Израиле',
                    IR: 'Иране',
                    IS: 'Исландии',
                    IT: 'Италии',
                    JO: 'Иордании',
                    KW: 'Кувейте',
                    KZ: 'Казахстане',
                    LB: 'Ливане',
                    LI: 'Лихтенштейне',
                    LT: 'Литве',
                    LU: 'Люксембурге',
                    LV: 'Латвии',
                    MC: 'Монако',
                    MD: 'Молдове',
                    ME: 'Черногории',
                    MG: 'Мадагаскаре',
                    MK: 'Македонии',
                    ML: 'Мали',
                    MR: 'Мавритании',
                    MT: 'Мальте',
                    MU: 'Маврикии',
                    MZ: 'Мозамбике',
                    NL: 'Нидерландах',
                    NO: 'Норвегии',
                    PK: 'Пакистане',
                    PL: 'Польше',
                    PS: 'Палестине',
                    PT: 'Португалии',
                    QA: 'Катаре',
                    RO: 'Румынии',
                    RS: 'Сербии',
                    SA: 'Саудовской Аравии',
                    SE: 'Швеции',
                    SI: 'Словении',
                    SK: 'Словакии',
                    SM: 'Сан-Марино',
                    SN: 'Сенегале',
                    TL: 'Восточный Тимор',
                    TN: 'Тунисе',
                    TR: 'Турции',
                    VG: 'Британских Виргинских островах',
                    XK: 'Республика Косово'
                }
            },
            id: {
                'default': 'Пожалуйста, введите правильный идентификационный номер',
                country: 'Пожалуйста, введите правильный идентификационный номер в %s',
                countries: {
                    BA: 'Боснии и Герцеговине',
                    BG: 'Болгарии',
                    BR: 'Бразилии',
                    CH: 'Швейцарии',
                    CL: 'Чили',
                    CN: 'Китае',
                    CZ: 'Чешская республика',
                    DK: 'Дании',
                    EE: 'Эстонии',
                    ES: 'Испании',
                    FI: 'Финляндии',
                    HR: 'Хорватии',
                    IE: 'Ирландии',
                    IS: 'Исландии',
                    LT: 'Литве',
                    LV: 'Латвии',
                    ME: 'Черногории',
                    MK: 'Македонии',
                    NL: 'Нидерландах',
                    PL: 'Польше',
                    RO: 'Румынии',
                    RS: 'Сербии',
                    SE: 'Швеции',
                    SI: 'Словении',
                    SK: 'Словакии',
                    SM: 'Сан-Марино',
                    TH: 'Тайланде',
                    TR: 'Турции',
                    ZA: 'ЮАР'
                }
            },
            identical: {
                'default': 'Пожалуйста, введите такое же значение'
            },
            imei: {
                'default': 'Пожалуйста, введите правильный номер IMEI'
            },
            imo: {
                'default': 'Пожалуйста, введите правильный номер IMO'
            },
            integer: {
                'default': 'Пожалуйста, введите правильное целое число'
            },
            ip: {
                'default': 'Пожалуйста, введите правильный IP-адрес',
                ipv4: 'Пожалуйста, введите правильный IPv4-адрес',
                ipv6: 'Пожалуйста, введите правильный IPv6-адрес'
            },
            isbn: {
                'default': 'Пожалуйста, введите правильный номер ISBN'
            },
            isin: {
                'default': 'Пожалуйста, введите правильный номер ISIN'
            },
            ismn: {
                'default': 'Пожалуйста, введите правильный номер ISMN'
            },
            issn: {
                'default': 'Пожалуйста, введите правильный номер ISSN'
            },
            lessThan: {
                'default': 'Пожалуйста, введите значение меньшее или равное %s',
                notInclusive: 'Пожалуйста, введите значение меньше %s'
            },
            mac: {
                'default': 'Пожалуйста, введите правильный MAC-адрес'
            },
            meid: {
                'default': 'Пожалуйста, введите правильный номер MEID'
            },
            notEmpty: {
                'default': 'Пожалуйста, введите значение'
            },
            numeric: {
                'default': 'Пожалуйста, введите корректное действительное число'
            },
            phone: {
                'default': 'Пожалуйста, введите правильный номер телефона',
                country: 'Пожалуйста, введите правильный номер телефона в %s',
                countries: {
                    AE: 'Объединённых Арабских Эмиратах',
                    BG: 'Болгарии',
                    BR: 'Бразилии',
                    CN: 'Китае',
                    CZ: 'Чешская республика',
                    DE: 'Германии',
                    DK: 'Дании',
                    ES: 'Испании',
                    FR: 'Франции',
                    GB: 'Великобритании',
                    IN: 'Индия',
                    MA: 'Марокко',
                    NL: 'Нидерландах',
                    PK: 'Пакистане',
                    RO: 'Румынии',
                    RU: 'России',
                    SK: 'Словакии',
                    TH: 'Тайланде',
                    US: 'США',
                    VE: 'Венесуэле'
                }
            },
            promise: {
                'default': 'Пожалуйста, введите корректное значение'
            },
            regexp: {
                'default': 'Пожалуйста, введите значение соответствующее шаблону'
            },
            remote: {
                'default': 'Пожалуйста, введите правильное значение'
            },
            rtn: {
                'default': 'Пожалуйста, введите правильный номер RTN'
            },
            sedol: {
                'default': 'Пожалуйста, введите правильный номер SEDOL'
            },
            siren: {
                'default': 'Пожалуйста, введите правильный номер SIREN'
            },
            siret: {
                'default': 'Пожалуйста, введите правильный номер SIRET'
            },
            step: {
                'default': 'Пожалуйста, введите правильный шаг %s'
            },
            stringCase: {
                'default': 'Пожалуйста, вводите только строчные буквы',
                upper: 'Пожалуйста, вводите только заглавные буквы'
            },
            stringLength: {
                'default': 'Пожалуйста, введите значение корректной длины',
                less: 'Пожалуйста, введите не больше %s символов',
                more: 'Пожалуйста, введите не меньше %s символов',
                between: 'Пожалуйста, введите строку длиной от %s до %s символов'
            },
            uri: {
                'default': 'Пожалуйста, введите правильный URI'
            },
            uuid: {
                'default': 'Пожалуйста, введите правильный номер UUID',
                version: 'Пожалуйста, введите правильный номер UUID версии %s'
            },
            vat: {
                'default': 'Пожалуйста, введите правильный номер ИНН',
                country: 'Пожалуйста, введите правильный номер ИНН (VAT) в %s',
                countries: {
                    AT: 'Австрии',
                    BE: 'Бельгии',
                    BG: 'Болгарии',
                    BR: 'Бразилии',
                    CH: 'Швейцарии',
                    CY: 'Кипре',
                    CZ: 'Чешская республика',
                    DE: 'Германии',
                    DK: 'Дании',
                    EE: 'Эстонии',
                    ES: 'Испании',
                    FI: 'Финляндии',
                    FR: 'Франции',
                    GB: 'Великобритании',
                    GR: 'Греции',
                    EL: 'Греции',
                    HU: 'Венгрии',
                    HR: 'Хорватии',
                    IE: 'Ирландии',
                    IS: 'Исландии',
                    IT: 'Италии',
                    LT: 'Литве',
                    LU: 'Люксембурге',
                    LV: 'Латвии',
                    MT: 'Мальте',
                    NL: 'Нидерландах',
                    NO: 'Норвегии',
                    PL: 'Польше',
                    PT: 'Португалии',
                    RO: 'Румынии',
                    RU: 'России',
                    RS: 'Сербии',
                    SE: 'Швеции',
                    SI: 'Словении',
                    SK: 'Словакии',
                    VE: 'Венесуэле',
                    ZA: 'ЮАР'
                }
            },
            vin: {
                'default': 'Пожалуйста, введите правильный номер VIN'
            },
            zipCode: {
                'default': 'Пожалуйста, введите правильный почтовый индекс',
                country: 'Пожалуйста, введите правильный почтовый индекс в %s',
                countries: {
                    AT: 'Австрии',
                    BG: 'Болгарии',
                    BR: 'Бразилии',
                    CA: 'Канаде',
                    CH: 'Швейцарии',
                    CZ: 'Чешская республика',
                    DE: 'Германии',
                    DK: 'Дании',
                    ES: 'Испании',
                    FR: 'Франции',
                    GB: 'Великобритании',
                    IE: 'Ирландии',
                    IN: 'Индия',
                    IT: 'Италии',
                    MA: 'Марокко',
                    NL: 'Нидерландах',
                    PL: 'Польше',
                    PT: 'Португалии',
                    RO: 'Румынии',
                    RU: 'России',
                    SE: 'Швеции',
                    SG: 'Сингапуре',
                    SK: 'Словакии',
                    US: 'США'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Slovak language package
     * Translated by @budik21. Improved by @PatrikGallik
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'sk_SK': {
            base64: {
                'default': 'Prosím zadajte správny base64'
            },
            between: {
                'default': 'Prosím zadajte hodnotu medzi %s a %s',
                notInclusive: 'Prosím zadajte hodnotu medzi %s a %s (vrátane týchto čísel)'
            },
            bic: {
                'default': 'Prosím zadajte správne BIC číslo'
            },
            callback: {
                'default': 'Prosím zadajte správnu hodnotu'
            },
            choice: {
                'default': 'Prosím vyberte správnu hodnotu',
                less: 'Hodnota musí byť minimálne %s',
                more: 'Hodnota nesmie byť viac ako %s',
                between: 'Prosím vyberte medzi %s a %s'
            },
            color: {
                'default': 'Prosím zadajte správnu farbu'
            },
            creditCard: {
                'default': 'Prosím zadajte správne číslo kreditnej karty'
            },
            cusip: {
                'default': 'Prosím zadajte správne CUSIP číslo'
            },
            cvv: {
                'default': 'Prosím zadajte správne CVV číslo'
            },
            date: {
                'default': 'Prosím zadajte správny dátum',
                min: 'Prosím zadajte dátum pred %s',
                max: 'Prosím zadajte dátum po %s',
                range: 'Prosím zadajte dátum v rozmedzí %s až %s'
            },
            different: {
                'default': 'Prosím zadajte inú hodnotu'
            },
            digits: {
                'default': 'Toto pole môže obsahovať len čísla'
            },
            ean: {
                'default': 'Prosím zadajte správne EAN číslo'
            },
            ein: {
                'default': 'Prosím zadajte správne EIN číslo'
            },
            emailAddress: {
                'default': 'Prosím zadajte správnu emailovú adresu'
            },
            file: {
                'default': 'Prosím vyberte súbor'
            },
            greaterThan: {
                'default': 'Prosím zadajte hodnotu väčšiu alebo rovnú %s',
                notInclusive: 'Prosím zadajte hodnotu väčšiu ako %s'
            },
            grid: {
                'default': 'Prosím zadajte správné GRId číslo'
            },
            hex: {
                'default': 'Prosím zadajte správne hexadecimálne číslo'
            },
            iban: {
                'default': 'Prosím zadajte správne IBAN číslo',
                country: 'Prosím zadajte správne IBAN číslo pre %s',
                countries: {
                    AD: 'Andorru',
                    AE: 'Spojené arabské emiráty',
                    AL: 'Albánsko',
                    AO: 'Angolu',
                    AT: 'Rakúsko',
                    AZ: 'Ázerbajdžán',
                    BA: 'Bosnu a Herzegovinu',
                    BE: 'Belgicko',
                    BF: 'Burkina Faso',
                    BG: 'Bulharsko',
                    BH: 'Bahrajn',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazíliu',
                    CH: 'Švajčiarsko',
                    CI: 'Pobrežie Slonoviny',
                    CM: 'Kamerun',
                    CR: 'Kostariku',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Českú Republiku',
                    DE: 'Nemecko',
                    DK: 'Dánsko',
                    DO: 'Dominikánsku republiku',
                    DZ: 'Alžírsko',
                    EE: 'Estónsko',
                    ES: 'Španielsko',
                    FI: 'Fínsko',
                    FO: 'Faerské ostrovy',
                    FR: 'Francúzsko',
                    GB: 'Veľkú Britániu',
                    GE: 'Gruzínsko',
                    GI: 'Gibraltár',
                    GL: 'Grónsko',
                    GR: 'Grécko',
                    GT: 'Guatemalu',
                    HR: 'Chorvátsko',
                    HU: 'Maďarsko',
                    IE: 'Írsko',
                    IL: 'Izrael',
                    IR: 'Irán',
                    IS: 'Island',
                    IT: 'Taliansko',
                    JO: 'Jordánsko',
                    KW: 'Kuwait',
                    KZ: 'Kazachstan',
                    LB: 'Libanon',
                    LI: 'Lichtenštajnsko',
                    LT: 'Litvu',
                    LU: 'Luxemburgsko',
                    LV: 'Lotyšsko',
                    MC: 'Monako',
                    MD: 'Moldavsko',
                    ME: 'Čiernu horu',
                    MG: 'Madagaskar',
                    MK: 'Macedónsko',
                    ML: 'Mali',
                    MR: 'Mauritániu',
                    MT: 'Maltu',
                    MU: 'Mauritius',
                    MZ: 'Mosambik',
                    NL: 'Holandsko',
                    NO: 'Nórsko',
                    PK: 'Pakistan',
                    PL: 'Poľsko',
                    PS: 'Palestínu',
                    PT: 'Portugalsko',
                    QA: 'Katar',
                    RO: 'Rumunsko',
                    RS: 'Srbsko',
                    SA: 'Saudskú Arábiu',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Východný Timor',
                    TN: 'Tunisko',
                    TR: 'Turecko',
                    VG: 'Britské Panenské ostrovy',
                    XK: 'Republic of Kosovo'
                }
            },
            id: {
                'default': 'Prosím zadajte správne rodné číslo',
                country: 'Prosím zadajte správne rodné číslo pre %s',
                countries: {
                    BA: 'Bosnu a Hercegovinu',
                    BG: 'Bulharsko',
                    BR: 'Brazíliu',
                    CH: 'Švajčiarsko',
                    CL: 'Chile',
                    CN: 'Čínu',
                    CZ: 'Českú Republiku',
                    DK: 'Dánsko',
                    EE: 'Estónsko',
                    ES: 'Španielsko',
                    FI: 'Fínsko',
                    HR: 'Chorvátsko',
                    IE: 'Írsko',
                    IS: 'Island',
                    LT: 'Litvu',
                    LV: 'Lotyšsko',
                    ME: 'Čiernu horu',
                    MK: 'Macedónsko',
                    NL: 'Holandsko',
                    PL: 'Poľsko',
                    RO: 'Rumunsko',
                    RS: 'Srbsko',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    SM: 'San Marino',
                    TH: 'Thajsko',
                    TR: 'Turecko',
                    ZA: 'Južnú Afriku'
                }
            },
            identical: {
                'default': 'Prosím zadajte rovnakú hodnotu'
            },
            imei: {
                'default': 'Prosím zadajte správne IMEI číslo'
            },
            imo: {
                'default': 'Prosím zadajte správne IMO číslo'
            },
            integer: {
                'default': 'Prosím zadajte celé číslo'
            },
            ip: {
                'default': 'Prosím zadajte správnu IP adresu',
                ipv4: 'Prosím zadajte správnu IPv4 adresu',
                ipv6: 'Prosím zadajte správnu IPv6 adresu'
            },
            isbn: {
                'default': 'Prosím zadajte správne ISBN číslo'
            },
            isin: {
                'default': 'Prosím zadajte správne ISIN číslo'
            },
            ismn: {
                'default': 'Prosím zadajte správne ISMN číslo'
            },
            issn: {
                'default': 'Prosím zadajte správne ISSN číslo'
            },
            lessThan: {
                'default': 'Prosím zadajte hodnotu menšiu alebo rovnú %s',
                notInclusive: 'Prosím zadajte hodnotu menšiu ako %s'
            },
            mac: {
                'default': 'Prosím zadajte správnu MAC adresu'
            },
            meid: {
                'default': 'Prosím zadajte správne MEID číslo'
            },
            notEmpty: {
                'default': 'Toto pole nesmie byť prázdne'
            },
            numeric: {
                'default': 'Prosím zadajte číselnú hodnotu'
            },
            phone: {
                'default': 'Prosím zadajte správne telefónne číslo',
                country: 'Prosím zadajte správne telefónne číslo pre %s',
                countries: {
                    AE: 'Spojené arabské emiráty',
                    BG: 'Bulharsko',
                    BR: 'Brazíliu',
                    CN: 'Čínu',
                    CZ: 'Českú Republiku',
                    DE: 'Nemecko',
                    DK: 'Dánsko',
                    ES: 'Španielsko',
                    FR: 'Francúzsko',
                    GB: 'Veľkú Britániu',
                    IN: 'Indiu',
                    MA: 'Maroko',
                    NL: 'Holandsko',
                    PK: 'Pakistan',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    SK: 'Slovensko',
                    TH: 'Thajsko',
                    US: 'Spojené Štáty Americké',
                    VE: 'Venezuelu'
                }
            },
            promise: {
                'default': 'Prosím zadajte správnu hodnotu'
            },
            regexp: {
                'default': 'Prosím zadajte hodnotu spĺňajúcu zadanie'
            },
            remote: {
                'default': 'Prosím zadajte správnu hodnotu'
            },
            rtn: {
                'default': 'Prosím zadajte správne RTN číslo'
            },
            sedol: {
                'default': 'Prosím zadajte správne SEDOL číslo'
            },
            siren: {
                'default': 'Prosím zadajte správne SIREN číslo'
            },
            siret: {
                'default': 'Prosím zadajte správne SIRET číslo'
            },
            step: {
                'default': 'Prosím zadajte správny krok %s'
            },
            stringCase: {
                'default': 'Len malé písmená sú povolené v tomto poli',
                upper: 'Len veľké písmená sú povolené v tomto poli'
            },
            stringLength: {
                'default': 'Toto pole nesmie byť prázdne',
                less: 'Prosím zadajte hodnotu kratšiu ako %s znakov',
                more: 'Prosím zadajte hodnotu dlhú %s znakov a viacej',
                between: 'Prosím zadajte hodnotu medzi %s a %s znakov'
            },
            uri: {
                'default': 'Prosím zadajte správnu URI'
            },
            uuid: {
                'default': 'Prosím zadajte správne UUID číslo',
                version: 'Prosím zadajte správne UUID vo verzii %s'
            },
            vat: {
                'default': 'Prosím zadajte správne VAT číslo',
                country: 'Prosím zadajte správne VAT číslo pre %s',
                countries: {
                    AT: 'Rakúsko',
                    BE: 'Belgicko',
                    BG: 'Bulharsko',
                    BR: 'Brazíliu',
                    CH: 'Švajčiarsko',
                    CY: 'Cyprus',
                    CZ: 'Českú Republiku',
                    DE: 'Nemecko',
                    DK: 'Dánsko',
                    EE: 'Estónsko',
                    ES: 'Španielsko',
                    FI: 'Fínsko',
                    FR: 'Francúzsko',
                    GB: 'Veľkú Britániu',
                    GR: 'Grécko',
                    EL: 'Grécko',
                    HU: 'Maďarsko',
                    HR: 'Chorvátsko',
                    IE: 'Írsko',
                    IS: 'Island',
                    IT: 'Taliansko',
                    LT: 'Litvu',
                    LU: 'Luxemburgsko',
                    LV: 'Lotyšsko',
                    MT: 'Maltu',
                    NL: 'Holandsko',
                    NO: 'Norsko',
                    PL: 'Poľsko',
                    PT: 'Portugalsko',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    RS: 'Srbsko',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    VE: 'Venezuelu',
                    ZA: 'Južnú Afriku'
                }
            },
            vin: {
                'default': 'Prosím zadajte správne VIN číslo'
            },
            zipCode: {
                'default': 'Prosím zadajte správne PSČ',
                country: 'Prosím zadajte správne PSČ pre %s',
                countries: {
                    AT: 'Rakúsko',
                    BG: 'Bulharsko',
                    BR: 'Brazíliu',
                    CA: 'Kanadu',
                    CH: 'Švajčiarsko',
                    CZ: 'Českú Republiku',
                    DE: 'Nemecko',
                    DK: 'Dánsko',
                    ES: 'Španielsko',
                    FR: 'Francúzsko',
                    GB: 'Veľkú Britániu',
                    IE: 'Írsko',
                    IN: 'Indiu',
                    IT: 'Taliansko',
                    MA: 'Maroko',
                    NL: 'Holandsko',
                    PL: 'Poľsko',
                    PT: 'Portugalsko',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    SE: 'Švédsko',
                    SG: 'Singapur',
                    SK: 'Slovensko',
                    US: 'Spojené Štáty Americké'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Albanian language package
     * Translated by @desaretiuss
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'sq_AL': {
            base64: {
                'default': 'Ju lutem përdorni sistemin e kodimit Base64'
            },
            between: {
                'default': 'Ju lutem vendosni një vlerë midis %s dhe %s',
                notInclusive: 'Ju lutem vendosni një vlerë rreptësisht midis %s dhe %s'
            },
            bic: {
                'default': 'Ju lutem vendosni një numër BIC të vlefshëm'
            },
            callback: {
                'default': 'Ju lutem vendosni një vlerë të vlefshme'
            },
            choice: {
                'default': 'Ju lutem vendosni një vlerë të vlefshme',
                less: 'Ju lutem përzgjidhni së paku %s mundësi',
                more: 'Ju lutem përzgjidhni së shumti %s mundësi ',
                between: 'Ju lutem përzgjidhni %s - %s mundësi'
            },
            color: {
                'default': 'Ju lutem vendosni një ngjyrë të vlefshme'
            },
            creditCard: {
                'default': 'Ju lutem vendosni një numër karte krediti të vlefshëm'
            },
            cusip: {
                'default': 'Ju lutem vendosni një numër CUSIP të vlefshëm'
            },
            cvv: {
                'default': 'Ju lutem vendosni një numër CVV të vlefshëm'
            },
            date: {
                'default': 'Ju lutem vendosni një datë të saktë',
                min: 'Ju lutem vendosni një datë pas %s',
                max: 'Ju lutem vendosni një datë para %s',
                range: 'Ju lutem vendosni një datë midis %s - %s'
            },
            different: {
                'default': 'Ju lutem vendosni një vlerë tjetër'
            },
            digits: {
                'default': 'Ju lutem vendosni vetëm numra'
            },
            ean: {
                'default': 'Ju lutem vendosni një numër EAN të vlefshëm'
            },
            ein: {
                'default': 'Ju lutem vendosni një numër EIN të vlefshëm'
            },
            emailAddress: {
                'default': 'Ju lutem vendosni një adresë email të vlefshme'
            },
            file: {
                'default': 'Ju lutem përzgjidhni një skedar të vlefshëm'
            },
            greaterThan: {
                'default': 'Ju lutem vendosni një vlerë më të madhe ose të barabartë me %s',
                notInclusive: 'Ju lutem vendosni një vlerë më të madhe se %s'
            },
            grid: {
                'default': 'Ju lutem vendosni një numër GRId të vlefshëm'
            },
            hex: {
                'default': 'Ju lutem vendosni një numër të saktë heksadecimal'
            },
            iban: {
                'default': 'Ju lutem vendosni një numër IBAN të vlefshëm',
                country: 'Ju lutem vendosni një numër IBAN të vlefshëm në %s',
                countries: {
                    AD: 'Andora',
                    AE: 'Emiratet e Bashkuara Arabe',
                    AL: 'Shqipëri',
                    AO: 'Angola',
                    AT: 'Austri',
                    AZ: 'Azerbajxhan',
                    BA: 'Bosnjë dhe Hercegovinë',
                    BE: 'Belgjikë',
                    BF: 'Burkina Faso',
                    BG: 'Bullgari',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazil',
                    CH: 'Zvicër',
                    CI: 'Bregu i fildishtë',
                    CM: 'Kamerun',
                    CR: 'Kosta Rika',
                    CV: 'Kepi i Gjelbër',
                    CY: 'Qipro',
                    CZ: 'Republika Çeke',
                    DE: 'Gjermani',
                    DK: 'Danimarkë',
                    DO: 'Dominika',
                    DZ: 'Algjeri',
                    EE: 'Estoni',
                    ES: 'Spanjë',
                    FI: 'Finlandë',
                    FO: 'Ishujt Faroe',
                    FR: 'Francë',
                    GB: 'Mbretëria e Bashkuar',
                    GE: 'Gjeorgji',
                    GI: 'Gjibraltar',
                    GL: 'Groenlandë',
                    GR: 'Greqi',
                    GT: 'Guatemalë',
                    HR: 'Kroaci',
                    HU: 'Hungari',
                    IE: 'Irlandë',
                    IL: 'Izrael',
                    IR: 'Iran',
                    IS: 'Islandë',
                    IT: 'Itali',
                    JO: 'Jordani',
                    KW: 'Kuvajt',
                    KZ: 'Kazakistan',
                    LB: 'Liban',
                    LI: 'Lihtenshtejn',
                    LT: 'Lituani',
                    LU: 'Luksemburg',
                    LV: 'Letoni',
                    MC: 'Monako',
                    MD: 'Moldavi',
                    ME: 'Mal i Zi',
                    MG: 'Madagaskar',
                    MK: 'Maqedoni',
                    ML: 'Mali',
                    MR: 'Mauritani',
                    MT: 'Maltë',
                    MU: 'Mauricius',
                    MZ: 'Mozambik',
                    NL: 'Hollandë',
                    NO: 'Norvegji',
                    PK: 'Pakistan',
                    PL: 'Poloni',
                    PS: 'Palestinë',
                    PT: 'Portugali',
                    QA: 'Katar',
                    RO: 'Rumani',
                    RS: 'Serbi',
                    SA: 'Arabi Saudite',
                    SE: 'Suedi',
                    SI: 'Slloveni',
                    SK: 'Sllovaki',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Timori Lindor',
                    TN: 'Tunizi',
                    TR: 'Turqi',
                    VG: 'Ishujt Virxhin Britanikë',
                    XK: 'Republika e Kosovës'
                }
            },
            id: {
                'default': 'Ju lutem vendosni një numër identifikimi të vlefshëm ',
                country: 'Ju lutem vendosni një numër identifikimi të vlefshëm në %s',
                countries: {
                    BA: 'Bosnjë dhe Hercegovinë',
                    BG: 'Bullgari',
                    BR: 'Brazil',
                    CH: 'Zvicër',
                    CL: 'Kili',
                    CN: 'Kinë',
                    CZ: 'Republika Çeke',
                    DK: 'Danimarkë',
                    EE: 'Estoni',
                    ES: 'Spanjë',
                    FI: 'Finlandë',
                    HR: 'Kroaci',
                    IE: 'Irlandë',
                    IS: 'Islandë',
                    LT: 'Lituani',
                    LV: 'Letoni',
                    ME: 'Mal i Zi',
                    MK: 'Maqedoni',
                    NL: 'Hollandë',
                    PL: 'Poloni',
                    RO: 'Rumani',
                    RS: 'Serbi',
                    SE: 'Suedi',
                    SI: 'Slloveni',
                    SK: 'Slovaki',
                    SM: 'San Marino',
                    TH: 'Tajlandë',
                    TR: 'Turqi',
                    ZA: 'Afrikë e Jugut'
                }
            },
            identical: {
                'default': 'Ju lutem vendosni të njëjtën vlerë'
            },
            imei: {
                'default': 'Ju lutem vendosni numër IMEI të njëjtë'
            },
            imo: {
                'default': 'Ju lutem vendosni numër IMO të vlefshëm'
            },
            integer: {
                'default': 'Ju lutem vendosni një numër të vlefshëm'
            },
            ip: {
                'default': 'Ju lutem vendosni një adresë IP të vlefshme',
                ipv4: 'Ju lutem vendosni një adresë IPv4 të vlefshme',
                ipv6: 'Ju lutem vendosni një adresë IPv6 të vlefshme'
            },
            isbn: {
                'default': 'Ju lutem vendosni një numër ISBN të vlefshëm'
            },
            isin: {
                'default': 'Ju lutem vendosni një numër ISIN të vlefshëm'
            },
            ismn: {
                'default': 'Ju lutem vendosni një numër ISMN të vlefshëm'
            },
            issn: {
                'default': 'Ju lutem vendosni një numër ISSN të vlefshëm'
            },
            lessThan: {
                'default': 'Ju lutem vendosni një vlerë më të madhe ose të barabartë me %s',
                notInclusive: 'Ju lutem vendosni një vlerë më të vogël se %s'
            },
            mac: {
                'default': 'Ju lutem vendosni një adresë MAC të vlefshme'
            },
            meid: {
                'default': 'Ju lutem vendosni një numër MEID të vlefshëm'
            },
            notEmpty: {
                'default': 'Ju lutem vendosni një vlerë'
            },
            numeric: {
                'default': 'Ju lutem vendosni një numër me presje notuese të saktë'
            },
            phone: {
                'default': 'Ju lutem vendosni një numër telefoni të vlefshëm',
                country: 'Ju lutem vendosni një numër telefoni të vlefshëm në %s',
                countries: {
                    AE: 'Emiratet e Bashkuara Arabe',
                    BG: 'Bullgari',
                    BR: 'Brazil',
                    CN: 'Kinë',
                    CZ: 'Republika Çeke',
                    DE: 'Gjermani',
                    DK: 'Danimarkë',
                    ES: 'Spanjë',
                    FR: 'Francë',
                    GB: 'Mbretëria e Bashkuar',
                    IN: 'Indi',
                    MA: 'Marok',
                    NL: 'Hollandë',
                    PK: 'Pakistan',
                    RO: 'Rumani',
                    RU: 'Rusi',
                    SK: 'Sllovaki',
                    TH: 'Tajlandë',
                    US: 'SHBA',
                    VE: 'Venezuelë'
                }
            },
            promise: {
                'default': 'Ju lutem vendosni një vlerë të vlefshme'
            },
            regexp: {
                'default': 'Ju lutem vendosni një vlerë që përputhet me modelin'
            },
            remote: {
                'default': 'Ju lutem vendosni një vlerë të vlefshme'
            },
            rtn: {
                'default': 'Ju lutem vendosni një numër RTN të vlefshëm'
            },
            sedol: {
                'default': 'Ju lutem vendosni një numër SEDOL të vlefshëm'
            },
            siren: {
                'default': 'Ju lutem vendosni një numër SIREN të vlefshëm'
            },
            siret: {
                'default': 'Ju lutem vendosni një numër SIRET të vlefshëm'
            },
            step: {
                'default': 'Ju lutem vendosni një hap të vlefshëm të %s'
            },
            stringCase: {
                'default': 'Ju lutem përdorni vetëm shenja të vogla të shtypit',
                upper: 'Ju lutem përdorni vetëm shenja të mëdha të shtypit'
            },
            stringLength: {
                'default': 'Ju lutem vendosni një vlerë me gjatësinë e duhur',
                less: 'Ju lutem vendosni më pak se %s simbole',
                more: 'Ju lutem vendosni më shumë se %s simbole',
                between: 'Ju lutem vendosni një vlerë me gjatësi midis %s dhe %s simbole'
            },
            uri: {
                'default': 'Ju lutem vendosni një URI të vlefshme'
            },
            uuid: {
                'default': 'Ju lutem vendosni një numër UUID të vlefshëm',
                version: 'Ju lutem vendosni një numër UUID version %s të vlefshëm'
            },
            vat: {
                'default': 'Ju lutem vendosni një numër VAT të vlefshëm',
                country: 'Ju lutem vendosni një numër VAT të vlefshëm në %s',
                countries: {
                    AT: 'Austri',
                    BE: 'Belgjikë',
                    BG: 'Bullgari',
                    BR: 'Brazil',
                    CH: 'Zvicër',
                    CY: 'Qipro',
                    CZ: 'Republika Çeke',
                    DE: 'Gjermani',
                    DK: 'Danimarkë',
                    EE: 'Estoni',
                    ES: 'Spanjë',
                    FI: 'Finlandë',
                    FR: 'Francë',
                    GB: 'Mbretëria e Bashkuar',
                    GR: 'Greqi',
                    EL: 'Greqi',
                    HU: 'Hungari',
                    HR: 'Kroaci',
                    IE: 'Irlandë',
                    IS: 'Iclandë',
                    IT: 'Itali',
                    LT: 'Lituani',
                    LU: 'Luksemburg',
                    LV: 'Letoni',
                    MT: 'Maltë',
                    NL: 'Hollandë',
                    NO: 'Norvegji',
                    PL: 'Poloni',
                    PT: 'Portugali',
                    RO: 'Rumani',
                    RU: 'Rusi',
                    RS: 'Serbi',
                    SE: 'Suedi',
                    SI: 'Slloveni',
                    SK: 'Sllovaki',
                    VE: 'Venezuelë',
                    ZA: 'Afrikë e Jugut'
                }
            },
            vin: {
                'default': 'Ju lutem vendosni një numër VIN të vlefshëm'
            },
            zipCode: {
                'default': 'Ju lutem vendosni një kod postar të vlefshëm',
                country: 'Ju lutem vendosni një kod postar të vlefshëm në %s',
                countries: {
                    AT: 'Austri',
                    BG: 'Bullgari',
                    BR: 'Brazil',
                    CA: 'Kanada',
                    CH: 'Zvicër',
                    CZ: 'Republika Çeke',
                    DE: 'Gjermani',
                    DK: 'Danimarkë',
                    ES: 'Spanjë',
                    FR: 'Francë',
                    GB: 'Mbretëria e Bashkuar',
                    IE: 'Irlandë',
                    IN: 'Indi',
                    IT: 'Itali',
                    MA: 'Marok',
                    NL: 'Hollandë',
                    PL: 'Poloni',
                    PT: 'Portugali',
                    RO: 'Rumani',
                    RU: 'Rusi',
                    SE: 'Suedi',
                    SG: 'Singapor',
                    SK: 'Sllovaki',
                    US: 'SHBA'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Serbian Latin language package
     * Translated by @markocrni
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'sr_RS': {
            base64: {
                'default': 'Molimo da unesete važeći base 64 enkodovan'
            },
            between: {
                'default': 'Molimo da unesete vrednost između %s i %s',
                notInclusive: 'Molimo da unesete vrednost strogo između %s i %s'
            },
            bic: {
                'default': 'Molimo da unesete ispravan BIC broj'
            },
            callback: {
                'default': 'Molimo da unesete važeću vrednost'
            },
            choice: {
                'default': 'Molimo da unesete važeću vrednost',
                less: 'Molimo da odaberete minimalno %s opciju(a)',
                more: 'Molimo da odaberete maksimalno %s opciju(a)',
                between: 'Molimo odaberite %s - %s opcije(a)'
            },
            color: {
                'default': 'Molimo da unesete ispravnu boju'
            },
            creditCard: {
                'default': 'Molimo da unesete ispravan broj kreditne kartice'
            },
            cusip: {
                'default': 'Molimo da unesete ispravan CUSIP broj'
            },
            cvv: {
                'default': 'Molimo da unesete ispravan CVV broj'
            },
            date: {
                'default': 'Molimo da unesete ispravan datum',
                min: 'Molimo da unesete datum posle %s',
                max: 'Molimo da unesete datum pre %s',
                range: 'Molimo da unesete datum od %s do %s'
            },
            different: {
                'default': 'Molimo da unesete drugu vrednost'
            },
            digits: {
                'default': 'Molimo da unesete samo cifre'
            },
            ean: {
                'default': 'Molimo da unesete ispravan EAN broj'
            },
            ein: {
                'default': 'Molimo da unesete ispravan EIN broj'
            },
            emailAddress: {
                'default': 'Molimo da unesete važeću e-mail adresu'
            },
            file: {
                'default': 'Molimo da unesete ispravan fajl'
            },
            greaterThan: {
                'default': 'Molimo da unesete vrednost veću ili jednaku od %s',
                notInclusive: 'Molimo da unesete vrednost veću od %s'
            },
            grid: {
                'default': 'Molimo da unesete ispravan GRId broj'
            },
            hex: {
                'default': 'Molimo da unesete ispravan heksadecimalan broj'
            },
            iban: {
                'default': 'Molimo da unesete ispravan IBAN broj',
                country: 'Molimo da unesete ispravan IBAN broj %s',
                countries: {
                    AD: 'Andore',
                    AE: 'Ujedinjenih Arapskih Emirata',
                    AL: 'Albanije',
                    AO: 'Angole',
                    AT: 'Austrije',
                    AZ: 'Azerbejdžana',
                    BA: 'Bosne i Hercegovine',
                    BE: 'Belgije',
                    BF: 'Burkina Fasa',
                    BG: 'Bugarske',
                    BH: 'Bahraina',
                    BI: 'Burundija',
                    BJ: 'Benina',
                    BR: 'Brazila',
                    CH: 'Švajcarske',
                    CI: 'Obale slonovače',
                    CM: 'Kameruna',
                    CR: 'Kostarike',
                    CV: 'Zelenorotskih Ostrva',
                    CY: 'Kipra',
                    CZ: 'Češke',
                    DE: 'Nemačke',
                    DK: 'Danske',
                    DO: 'Dominike',
                    DZ: 'Alžira',
                    EE: 'Estonije',
                    ES: 'Španije',
                    FI: 'Finske',
                    FO: 'Farskih Ostrva',
                    FR: 'Francuske',
                    GB: 'Engleske',
                    GE: 'Džordžije',
                    GI: 'Giblartara',
                    GL: 'Grenlanda',
                    GR: 'Grčke',
                    GT: 'Gvatemale',
                    HR: 'Hrvatske',
                    HU: 'Mađarske',
                    IE: 'Irske',
                    IL: 'Izraela',
                    IR: 'Irana',
                    IS: 'Islanda',
                    IT: 'Italije',
                    JO: 'Jordana',
                    KW: 'Kuvajta',
                    KZ: 'Kazahstana',
                    LB: 'Libana',
                    LI: 'Lihtenštajna',
                    LT: 'Litvanije',
                    LU: 'Luksemburga',
                    LV: 'Latvije',
                    MC: 'Monaka',
                    MD: 'Moldove',
                    ME: 'Crne Gore',
                    MG: 'Madagaskara',
                    MK: 'Makedonije',
                    ML: 'Malija',
                    MR: 'Mauritanije',
                    MT: 'Malte',
                    MU: 'Mauricijusa',
                    MZ: 'Mozambika',
                    NL: 'Holandije',
                    NO: 'Norveške',
                    PK: 'Pakistana',
                    PL: 'Poljske',
                    PS: 'Palestine',
                    PT: 'Portugala',
                    QA: 'Katara',
                    RO: 'Rumunije',
                    RS: 'Srbije',
                    SA: 'Saudijske Arabije',
                    SE: 'Švedske',
                    SI: 'Slovenije',
                    SK: 'Slovačke',
                    SM: 'San Marina',
                    SN: 'Senegala',
                    TL: 'Источни Тимор',
                    TN: 'Tunisa',
                    TR: 'Turske',
                    VG: 'Britanskih Devičanskih Ostrva',
                    XK: 'Република Косово'
                }
            },
            id: {
                'default': 'Molimo da unesete ispravan identifikacioni broj',
                country: 'Molimo da unesete ispravan identifikacioni broj %s',
                countries: {
                    BA: 'Bosne i Herzegovine',
                    BG: 'Bugarske',
                    BR: 'Brazila',
                    CH: 'Švajcarske',
                    CL: 'Čilea',
                    CN: 'Kine',
                    CZ: 'Češke',
                    DK: 'Danske',
                    EE: 'Estonije',
                    ES: 'Španije',
                    FI: 'Finske',
                    HR: 'Hrvatske',
                    IE: 'Irske',
                    IS: 'Islanda',
                    LT: 'Litvanije',
                    LV: 'Letonije',
                    ME: 'Crne Gore',
                    MK: 'Makedonije',
                    NL: 'Holandije',
                    PL: 'Poljske',
                    RO: 'Rumunije',
                    RS: 'Srbije',
                    SE: 'Švedske',
                    SI: 'Slovenije',
                    SK: 'Slovačke',
                    SM: 'San Marina',
                    TH: 'Tajlanda',
                    TR: 'Turske',
                    ZA: 'Južne Afrike'
                }
            },
            identical: {
                'default': 'Molimo da unesete istu vrednost'
            },
            imei: {
                'default': 'Molimo da unesete ispravan IMEI broj'
            },
            imo: {
                'default': 'Molimo da unesete ispravan IMO broj'
            },
            integer: {
                'default': 'Molimo da unesete ispravan broj'
            },
            ip: {
                'default': 'Molimo da unesete ispravnu IP adresu',
                ipv4: 'Molimo da unesete ispravnu IPv4 adresu',
                ipv6: 'Molimo da unesete ispravnu IPv6 adresu'
            },
            isbn: {
                'default': 'Molimo da unesete ispravan ISBN broj'
            },
            isin: {
                'default': 'Molimo da unesete ispravan ISIN broj'
            },
            ismn: {
                'default': 'Molimo da unesete ispravan ISMN broj'
            },
            issn: {
                'default': 'Molimo da unesete ispravan ISSN broj'
            },
            lessThan: {
                'default': 'Molimo da unesete vrednost manju ili jednaku od %s',
                notInclusive: 'Molimo da unesete vrednost manju od %s'
            },
            mac: {
                'default': 'Molimo da unesete ispravnu MAC adresu'
            },
            meid: {
                'default': 'Molimo da unesete ispravan MEID broj'
            },
            notEmpty: {
                'default': 'Molimo da unesete vrednost'
            },
            numeric: {
                'default': 'Molimo da unesete ispravan decimalni broj'
            },
            phone: {
                'default': 'Molimo da unesete ispravan broj telefona',
                country: 'Molimo da unesete ispravan broj telefona %s',
                countries: {
                    AE: 'Ujedinjenih Arapskih Emirata',
                    BG: 'Bugarske',
                    BR: 'Brazila',
                    CN: 'Kine',
                    CZ: 'Češke',
                    DE: 'Nemačke',
                    DK: 'Danske',
                    ES: 'Španije',
                    FR: 'Francuske',
                    GB: 'Engleske',
                    IN: 'Индија',
                    MA: 'Maroka',
                    NL: 'Holandije',
                    PK: 'Pakistana',
                    RO: 'Rumunije',
                    RU: 'Rusije',
                    SK: 'Slovačke',
                    TH: 'Tajlanda',
                    US: 'Amerike',
                    VE: 'Venecuele'
                }
            },
            promise: {
                'default': 'Molimo da unesete važeću vrednost'
            },
            regexp: {
                'default': 'Molimo da unesete vrednost koja se poklapa sa paternom'
            },
            remote: {
                'default': 'Molimo da unesete ispravnu vrednost'
            },
            rtn: {
                'default': 'Molimo da unesete ispravan RTN broj'
            },
            sedol: {
                'default': 'Molimo da unesete ispravan SEDOL broj'
            },
            siren: {
                'default': 'Molimo da unesete ispravan SIREN broj'
            },
            siret: {
                'default': 'Molimo da unesete ispravan SIRET broj'
            },
            step: {
                'default': 'Molimo da unesete ispravan korak od %s'
            },
            stringCase: {
                'default': 'Molimo da unesete samo mala slova',
                upper: 'Molimo da unesete samo velika slova'
            },
            stringLength: {
                'default': 'Molimo da unesete vrednost sa ispravnom dužinom',
                less: 'Molimo da unesete manje od %s karaktera',
                more: 'Molimo da unesete više od %s karaktera',
                between: 'Molimo da unesete vrednost dužine između %s i %s karaktera'
            },
            uri: {
                'default': 'Molimo da unesete ispravan URI'
            },
            uuid: {
                'default': 'Molimo da unesete ispravan UUID broj',
                version: 'Molimo da unesete ispravnu verziju UUID %s broja'
            },
            vat: {
                'default': 'Molimo da unesete ispravan VAT broj',
                country: 'Molimo da unesete ispravan VAT broj %s',
                countries: {
                    AT: 'Austrije',
                    BE: 'Belgije',
                    BG: 'Bugarske',
                    BR: 'Brazila',
                    CH: 'Švajcarske',
                    CY: 'Kipra',
                    CZ: 'Češke',
                    DE: 'Nemačke',
                    DK: 'Danske',
                    EE: 'Estonije',
                    ES: 'Španije',
                    FI: 'Finske',
                    FR: 'Francuske',
                    GB: 'Engleske',
                    GR: 'Grčke',
                    EL: 'Grčke',
                    HU: 'Mađarske',
                    HR: 'Hrvatske',
                    IE: 'Irske',
                    IS: 'Islanda',
                    IT: 'Italije',
                    LT: 'Litvanije',
                    LU: 'Luksemburga',
                    LV: 'Letonije',
                    MT: 'Malte',
                    NL: 'Holandije',
                    NO: 'Norveške',
                    PL: 'Poljske',
                    PT: 'Portugala',
                    RO: 'Romunje',
                    RU: 'Rusije',
                    RS: 'Srbije',
                    SE: 'Švedske',
                    SI: 'Slovenije',
                    SK: 'Slovačke',
                    VE: 'Venecuele',
                    ZA: 'Južne Afrike'
                }
            },
            vin: {
                'default': 'Molimo da unesete ispravan VIN broj'
            },
            zipCode: {
                'default': 'Molimo da unesete ispravan poštanski broj',
                country: 'Molimo da unesete ispravan poštanski broj %s',
                countries: {
                    AT: 'Austrije',
                    BG: 'Bugarske',
                    BR: 'Brazila',
                    CA: 'Kanade',
                    CH: 'Švajcarske',
                    CZ: 'Češke',
                    DE: 'Nemačke',
                    DK: 'Danske',
                    ES: 'Španije',
                    FR: 'Francuske',
                    GB: 'Engleske',
                    IE: 'Irske',
                    IN: 'Индија',
                    IT: 'Italije',
                    MA: 'Maroka',
                    NL: 'Holandije',
                    PL: 'Poljske',
                    PT: 'Portugala',
                    RO: 'Rumunije',
                    RU: 'Rusije',
                    SE: 'Švedske',
                    SG: 'Singapura',
                    SK: 'Slovačke',
                    US: 'Amerike'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Swedish language package
     * Translated by @ulsa
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'sv_SE': {
            base64: {
                'default': 'Vänligen mata in ett giltigt Base64-kodat värde'
            },
            between: {
                'default': 'Vänligen mata in ett värde mellan %s och %s',
                notInclusive: 'Vänligen mata in ett värde strikt mellan %s och %s'
            },
            bic: {
                'default': 'Vänligen mata in ett giltigt BIC-nummer'
            },
            callback: {
                'default': 'Vänligen mata in ett giltigt värde'
            },
            choice: {
                'default': 'Vänligen mata in ett giltigt värde',
                less: 'Vänligen välj minst %s alternativ',
                more: 'Vänligen välj max %s alternativ',
                between: 'Vänligen välj %s - %s alternativ'
            },
            color: {
                'default': 'Vänligen mata in en giltig färg'
            },
            creditCard: {
                'default': 'Vänligen mata in ett giltigt kredikortsnummer'
            },
            cusip: {
                'default': 'Vänligen mata in ett giltigt CUSIP-nummer'
            },
            cvv: {
                'default': 'Vänligen mata in ett giltigt CVV-nummer'
            },
            date: {
                'default': 'Vänligen mata in ett giltigt datum',
                min: 'Vänligen mata in ett datum efter %s',
                max: 'Vänligen mata in ett datum före %s',
                range: 'Vänligen mata in ett datum i intervallet %s - %s'
            },
            different: {
                'default': 'Vänligen mata in ett annat värde'
            },
            digits: {
                'default': 'Vänligen mata in endast siffror'
            },
            ean: {
                'default': 'Vänligen mata in ett giltigt EAN-nummer'
            },
            ein: {
                'default': 'Vänligen mata in ett giltigt EIN-nummer'
            },
            emailAddress: {
                'default': 'Vänligen mata in en giltig emailadress'
            },
            file: {
                'default': 'Vänligen välj en giltig fil'
            },
            greaterThan: {
                'default': 'Vänligen mata in ett värde större än eller lika med %s',
                notInclusive: 'Vänligen mata in ett värde större än %s'
            },
            grid: {
                'default': 'Vänligen mata in ett giltigt GRID-nummer'
            },
            hex: {
                'default': 'Vänligen mata in ett giltigt hexadecimalt tal'
            },
            iban: {
                'default': 'Vänligen mata in ett giltigt IBAN-nummer',
                country: 'Vänligen mata in ett giltigt IBAN-nummer i %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Förenade Arabemiraten',
                    AL: 'Albanien',
                    AO: 'Angola',
                    AT: 'Österrike',
                    AZ: 'Azerbadjan',
                    BA: 'Bosnien och Herzegovina',
                    BE: 'Belgien',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarien',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CI: 'Elfenbenskusten',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cypern',
                    CZ: 'Tjeckien',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    DO: 'Dominikanska Republiken',
                    DZ: 'Algeriet',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    FO: 'Färöarna',
                    FR: 'Frankrike',
                    GB: 'Storbritannien',
                    GE: 'Georgien',
                    GI: 'Gibraltar',
                    GL: 'Grönland',
                    GR: 'Greekland',
                    GT: 'Guatemala',
                    HR: 'Kroatien',
                    HU: 'Ungern',
                    IE: 'Irland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Island',
                    IT: 'Italien',
                    JO: 'Jordanien',
                    KW: 'Kuwait',
                    KZ: 'Kazakstan',
                    LB: 'Libanon',
                    LI: 'Lichtenstein',
                    LT: 'Litauen',
                    LU: 'Luxemburg',
                    LV: 'Lettland',
                    MC: 'Monaco',
                    MD: 'Moldovien',
                    ME: 'Montenegro',
                    MG: 'Madagaskar',
                    MK: 'Makedonien',
                    ML: 'Mali',
                    MR: 'Mauretanien',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Holland',
                    NO: 'Norge',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Rumänien',
                    RS: 'Serbien',
                    SA: 'Saudiarabien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakien',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Östtimor',
                    TN: 'Tunisien',
                    TR: 'Turkiet',
                    VG: 'Brittiska Jungfruöarna',
                    XK: 'Republiken Kosovo'
                }
            },
            id: {
                'default': 'Vänligen mata in ett giltigt identifikationsnummer',
                country: 'Vänligen mata in ett giltigt identifikationsnummer i %s',
                countries: {
                    BA: 'Bosnien och Hercegovina',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CL: 'Chile',
                    CN: 'Kina',
                    CZ: 'Tjeckien',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    LT: 'Litauen',
                    LV: 'Lettland',
                    ME: 'Montenegro',
                    MK: 'Makedonien',
                    NL: 'Nederländerna',
                    PL: 'Polen',
                    RO: 'Rumänien',
                    RS: 'Serbien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakien',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    TR: 'Turkiet',
                    ZA: 'Sydafrika'
                }
            },
            identical: {
                'default': 'Vänligen mata in samma värde'
            },
            imei: {
                'default': 'Vänligen mata in ett giltigt IMEI-nummer'
            },
            imo: {
                'default': 'Vänligen mata in ett giltigt IMO-nummer'
            },
            integer: {
                'default': 'Vänligen mata in ett giltigt heltal'
            },
            ip: {
                'default': 'Vänligen mata in en giltig IP-adress',
                ipv4: 'Vänligen mata in en giltig IPv4-adress',
                ipv6: 'Vänligen mata in en giltig IPv6-adress'
            },
            isbn: {
                'default': 'Vänligen mata in ett giltigt ISBN-nummer'
            },
            isin: {
                'default': 'Vänligen mata in ett giltigt ISIN-nummer'
            },
            ismn: {
                'default': 'Vänligen mata in ett giltigt ISMN-nummer'
            },
            issn: {
                'default': 'Vänligen mata in ett giltigt ISSN-nummer'
            },
            lessThan: {
                'default': 'Vänligen mata in ett värde mindre än eller lika med %s',
                notInclusive: 'Vänligen mata in ett värde mindre än %s'
            },
            mac: {
                'default': 'Vänligen mata in en giltig MAC-adress'
            },
            meid: {
                'default': 'Vänligen mata in ett giltigt MEID-nummer'
            },
            notEmpty: {
                'default': 'Vänligen mata in ett värde'
            },
            numeric: {
                'default': 'Vänligen mata in ett giltigt flyttal'
            },
            phone: {
                'default': 'Vänligen mata in ett giltigt telefonnummer',
                country: 'Vänligen mata in ett giltigt telefonnummer i %s',
                countries: {
                    AE: 'Förenade Arabemiraten',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CN: 'Kina',
                    CZ: 'Tjeckien',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spanien',
                    FR: 'Frankrike',
                    GB: 'Storbritannien',
                    IN: 'Indien',
                    MA: 'Marocko',
                    NL: 'Holland',
                    PK: 'Pakistan',
                    RO: 'Rumänien',
                    RU: 'Ryssland',
                    SK: 'Slovakien',
                    TH: 'Thailand',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Vänligen mata in ett giltigt värde'
            },
            regexp: {
                'default': 'Vänligen mata in ett värde som matchar uttrycket'
            },
            remote: {
                'default': 'Vänligen mata in ett giltigt värde'
            },
            rtn: {
                'default': 'Vänligen mata in ett giltigt RTN-nummer'
            },
            sedol: {
                'default': 'Vänligen mata in ett giltigt SEDOL-nummer'
            },
            siren: {
                'default': 'Vänligen mata in ett giltigt SIREN-nummer'
            },
            siret: {
                'default': 'Vänligen mata in ett giltigt SIRET-nummer'
            },
            step: {
                'default': 'Vänligen mata in ett giltigt steg av %s'
            },
            stringCase: {
                'default': 'Vänligen mata in endast små bokstäver',
                upper: 'Vänligen mata in endast stora bokstäver'
            },
            stringLength: {
                'default': 'Vänligen mata in ett värde med giltig längd',
                less: 'Vänligen mata in färre än %s tecken',
                more: 'Vänligen mata in fler än %s tecken',
                between: 'Vänligen mata in ett värde mellan %s och %s tecken långt'
            },
            uri: {
                'default': 'Vänligen mata in en giltig URI'
            },
            uuid: {
                'default': 'Vänligen mata in ett giltigt UUID-nummer',
                version: 'Vänligen mata in ett giltigt UUID-nummer av version %s'
            },
            vat: {
                'default': 'Vänligen mata in ett giltigt momsregistreringsnummer',
                country: 'Vänligen mata in ett giltigt momsregistreringsnummer i %s',
                countries: {
                    AT: 'Österrike',
                    BE: 'Belgien',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CY: 'Cypern',
                    CZ: 'Tjeckien',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    FR: 'Frankrike',
                    GB: 'Förenade Kungariket',
                    GR: 'Grekland',
                    EL: 'Grekland',
                    HU: 'Ungern',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    IT: 'Italien',
                    LT: 'Litauen',
                    LU: 'Luxemburg',
                    LV: 'Lettland',
                    MT: 'Malta',
                    NL: 'Nederländerna',
                    NO: 'Norge',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumänien',
                    RU: 'Ryssland',
                    RS: 'Serbien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakien',
                    VE: 'Venezuela',
                    ZA: 'Sydafrika'
                }
            },
            vin: {
                'default': 'Vänligen mata in ett giltigt VIN-nummer'
            },
            zipCode: {
                'default': 'Vänligen mata in ett giltigt postnummer',
                country: 'Vänligen mata in ett giltigt postnummer i %s',
                countries: {
                    AT: 'Österrike',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CA: 'Kanada',
                    CH: 'Schweiz',
                    CZ: 'Tjeckien',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spanien',
                    FR: 'Frankrike',
                    GB: 'Förenade Kungariket',
                    IE: 'Irland',
                    IN: 'Indien',
                    IT: 'Italien',
                    MA: 'Marocko',
                    NL: 'Nederländerna',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumänien',
                    RU: 'Ryssland',
                    SE: 'Sverige',
                    SG: 'Singapore',
                    SK: 'Slovakien',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Thai language package
     * Translated by @figgaro
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'th_TH': {
            base64: {
                'default': 'กรุณาระบุ base 64 encoded ให้ถูกต้อง'
            },
            between: {
                'default': 'กรุณาระบุค่าระหว่าง %s และ %s',
                notInclusive: 'กรุณาระบุค่าระหว่าง %s และ %s เท่านั้น'
            },
            bic: {
                'default': 'กรุณาระบุหมายเลข BIC ให้ถูกต้อง'
            },
            callback: {
                'default': 'กรุณาระบุค่าให้ถูก'
            },
            choice: {
                'default': 'กรุณาระบุค่าให้ถูกต้อง',
                less: 'โปรดเลือกตัวเลือก %s ที่ต่ำสุด',
                more: 'โปรดเลือกตัวเลือก %s ที่สูงสุด',
                between: 'กรุณาเลือก %s - %s ที่มีอยู่'
            },
            color: {
                'default': 'กรุณาระบุค่าสี color ให้ถูกต้อง'
            },
            creditCard: {
                'default': 'กรุณาระบุเลขที่บัตรเครดิตให้ถูกต้อง'
            },
            cusip: {
                'default': 'กรุณาระบุหมายเลข CUSIP ให้ถูกต้อง'
            },
            cvv: {
                'default': 'กรุณาระบุ CVV ให้ถูกต้อง'
            },
            date: {
                'default': 'กรุณาระบุวันที่ให้ถูกต้อง',
                min: 'ไม่สามารถระบุวันที่ได้ก่อน %s',
                max: 'ไม่สามารถระบุวันที่ได้หลังจาก %s',
                range: 'โปรดระบุวันที่ระหว่าง %s - %s'
            },
            different: {
                'default': 'กรุณาระบุค่าอื่นที่แตกต่าง'
            },
            digits: {
                'default': 'กรุณาระบุตัวเลขเท่านั้น'
            },
            ean: {
                'default': 'กรุณาระบุหมายเลข EAN ให้ถูกต้อง'
            },
            ein: {
                'default': 'กรุณาระบุหมายเลข EIN ให้ถูกต้อง'
            },
            emailAddress: {
                'default': 'กรุณาระบุอีเมล์ให้ถูกต้อง'
            },
            file: {
                'default': 'กรุณาเลือกไฟล์'
            },
            greaterThan: {
                'default': 'กรุณาระบุค่ามากกว่าหรือเท่ากับ %s',
                notInclusive: 'กรุณาระบุค่ามากกว่า %s'
            },
            grid: {
                'default': 'กรุณาระบุหมายลข GRId ให้ถูกต้อง'
            },
            hex: {
                'default': 'กรุณาระบุเลขฐานสิบหกให้ถูกต้อง'
            },
            iban: {
                'default': 'กรุณาระบุหมายเลข IBAN ให้ถูกต้อง',
                country: 'กรุณาระบุหมายเลข IBAN ใน %s',
                countries: {
                    AD: 'อันดอร์รา',
                    AE: 'สหรัฐอาหรับเอมิเรตส์',
                    AL: 'แอลเบเนีย',
                    AO: 'แองโกลา',
                    AT: 'ออสเตรีย',
                    AZ: 'อาเซอร์ไบจาน',
                    BA: 'บอสเนียและเฮอร์เซโก',
                    BE: 'ประเทศเบลเยียม',
                    BF: 'บูร์กินาฟาโซ',
                    BG: 'บัลแกเรีย',
                    BH: 'บาห์เรน',
                    BI: 'บุรุนดี',
                    BJ: 'เบนิน',
                    BR: 'บราซิล',
                    CH: 'สวิตเซอร์แลนด์',
                    CI: 'ไอวอรี่โคสต์',
                    CM: 'แคเมอรูน',
                    CR: 'คอสตาริกา',
                    CV: 'เคปเวิร์ด',
                    CY: 'ไซปรัส',
                    CZ: 'สาธารณรัฐเชค',
                    DE: 'เยอรมนี',
                    DK: 'เดนมาร์ก',
                    DO: 'สาธารณรัฐโดมินิกัน',
                    DZ: 'แอลจีเรีย',
                    EE: 'เอสโตเนีย',
                    ES: 'สเปน',
                    FI: 'ฟินแลนด์',
                    FO: 'หมู่เกาะแฟโร',
                    FR: 'ฝรั่งเศส',
                    GB: 'สหราชอาณาจักร',
                    GE: 'จอร์เจีย',
                    GI: 'ยิบรอลตา',
                    GL: 'กรีนแลนด์',
                    GR: 'กรีซ',
                    GT: 'กัวเตมาลา',
                    HR: 'โครเอเชีย',
                    HU: 'ฮังการี',
                    IE: 'ไอร์แลนด์',
                    IL: 'อิสราเอล',
                    IR: 'อิหร่าน',
                    IS: 'ไอซ์',
                    IT: 'อิตาลี',
                    JO: 'จอร์แดน',
                    KW: 'คูเวต',
                    KZ: 'คาซัคสถาน',
                    LB: 'เลบานอน',
                    LI: 'Liechtenstein',
                    LT: 'ลิทัวเนีย',
                    LU: 'ลักเซมเบิร์ก',
                    LV: 'ลัตเวีย',
                    MC: 'โมนาโก',
                    MD: 'มอลโดวา',
                    ME: 'มอนเตเนโก',
                    MG: 'มาดากัสการ์',
                    MK: 'มาซิโดเนีย',
                    ML: 'มาลี',
                    MR: 'มอริเตเนีย',
                    MT: 'มอลตา',
                    MU: 'มอริเชียส',
                    MZ: 'โมซัมบิก',
                    NL: 'เนเธอร์แลนด์',
                    NO: 'นอร์เวย์',
                    PK: 'ปากีสถาน',
                    PL: 'โปแลนด์',
                    PS: 'ปาเลสไตน์',
                    PT: 'โปรตุเกส',
                    QA: 'กาตาร์',
                    RO: 'โรมาเนีย',
                    RS: 'เซอร์เบีย',
                    SA: 'ซาอุดิอารเบีย',
                    SE: 'สวีเดน',
                    SI: 'สโลวีเนีย',
                    SK: 'สโลวาเกีย',
                    SM: 'ซานมาริโน',
                    SN: 'เซเนกัล',
                    TL: 'ติมอร์ตะวันออก',
                    TN: 'ตูนิเซีย',
                    TR: 'ตุรกี',
                    VG: 'หมู่เกาะบริติชเวอร์จิน',
                    XK: 'สาธารณรัฐโคโซโว'
                }
            },
            id: {
                'default': 'โปรดระบุเลขบัตรประจำตัวประชาชนให้ถูกต้อง',
                country: 'โปรดระบุเลขบัตรประจำตัวประชาชนใน %s ให้ถูกต้อง',
                countries: {
                    BA: 'บอสเนียและเฮอร์เซโก',
                    BG: 'บัลแกเรีย',
                    BR: 'บราซิล',
                    CH: 'วิตเซอร์แลนด์',
                    CL: 'ชิลี',
                    CN: 'จีน',
                    CZ: 'สาธารณรัฐเชค',
                    DK: 'เดนมาร์ก',
                    EE: 'เอสโตเนีย',
                    ES: 'สเปน',
                    FI: 'ฟินแลนด์',
                    HR: 'โครเอเชีย',
                    IE: 'ไอร์แลนด์',
                    IS: 'ไอซ์',
                    LT: 'ลิทัวเนีย',
                    LV: 'ลัตเวีย',
                    ME: 'มอนเตเนโก',
                    MK: 'มาซิโดเนีย',
                    NL: 'เนเธอร์แลนด์',
                    PL: 'โปแลนด์',
                    RO: 'โรมาเนีย',
                    RS: 'เซอร์เบีย',
                    SE: 'สวีเดน',
                    SI: 'สโลวีเนีย',
                    SK: 'สโลวาเกีย',
                    SM: 'ซานมาริโน',
                    TH: 'ไทย',
                    TR: 'ตุรกี',
                    ZA: 'แอฟริกาใต้'
                }
            },
            identical: {
                'default': 'โปรดระบุค่าให้ตรง'
            },
            imei: {
                'default': 'โปรดระบุหมายเลข IMEI ให้ถูกต้อง'
            },
            imo: {
                'default': 'โปรดระบุหมายเลข IMO ให้ถูกต้อง'
            },
            integer: {
                'default': 'โปรดระบุตัวเลขให้ถูกต้อง'
            },
            ip: {
                'default': 'โปรดระบุ IP address ให้ถูกต้อง',
                ipv4: 'โปรดระบุ IPv4 address ให้ถูกต้อง',
                ipv6: 'โปรดระบุ IPv6 address ให้ถูกต้อง'
            },
            isbn: {
                'default': 'โปรดระบุหมายเลข ISBN ให้ถูกต้อง'
            },
            isin: {
                'default': 'โปรดระบุหมายเลข ISIN ให้ถูกต้อง'
            },
            ismn: {
                'default': 'โปรดระบุหมายเลข ISMN ให้ถูกต้อง'
            },
            issn: {
                'default': 'โปรดระบุหมายเลข ISSN ให้ถูกต้อง'
            },
            lessThan: {
                'default': 'โปรดระบุค่าน้อยกว่าหรือเท่ากับ %s',
                notInclusive: 'โปรดระบุค่าน้อยกว่า %s'
            },
            mac: {
                'default': 'โปรดระบุหมายเลข MAC address ให้ถูกต้อง'
            },
            meid: {
                'default': 'โปรดระบุหมายเลข MEID ให้ถูกต้อง'
            },
            notEmpty: {
                'default': 'โปรดระบุค่า'
            },
            numeric: {
                'default': 'โปรดระบุเลขหน่วยหรือจำนวนทศนิยม ให้ถูกต้อง'
            },
            phone: {
                'default': 'โปรดระบุหมายเลขโทรศัพท์ให้ถูกต้อง',
                country: 'โปรดระบุหมายเลขโทรศัพท์ใน %s ให้ถูกต้อง',
                countries: {
                    AE: 'สหรัฐอาหรับเอมิเรตส์',
                    BG: 'บัลแกเรีย',
                    BR: 'บราซิล',
                    CN: 'จีน',
                    CZ: 'สาธารณรัฐเชค',
                    DE: 'เยอรมนี',
                    DK: 'เดนมาร์ก',
                    ES: 'สเปน',
                    FR: 'ฝรั่งเศส',
                    GB: 'สหราชอาณาจักร',
                    IN: 'อินเดีย',
                    MA: 'โมร็อกโก',
                    NL: 'เนเธอร์แลนด์',
                    PK: 'ปากีสถาน',
                    RO: 'โรมาเนีย',
                    RU: 'รัสเซีย',
                    SK: 'สโลวาเกีย',
                    TH: 'ไทย',
                    US: 'สหรัฐอเมริกา',
                    VE: 'เวเนซูเอลา'
                }
            },
            promise: {
                'default': 'กรุณาระบุค่าให้ถูก'
            },
            regexp: {
                'default': 'โปรดระบุค่าให้ตรงกับรูปแบบที่กำหนด'
            },
            remote: {
                'default': 'โปรดระบุค่าให้ถูกต้อง'
            },
            rtn: {
                'default': 'โปรดระบุหมายเลข RTN ให้ถูกต้อง'
            },
            sedol: {
                'default': 'โปรดระบุหมายเลข SEDOL ให้ถูกต้อง'
            },
            siren: {
                'default': 'โปรดระบุหมายเลข SIREN ให้ถูกต้อง'
            },
            siret: {
                'default': 'โปรดระบุหมายเลข SIRET ให้ถูกต้อง'
            },
            step: {
                'default': 'โปรดระบุลำดับของ %s'
            },
            stringCase: {
                'default': 'โปรดระบุตัวอักษรพิมพ์เล็กเท่านั้น',
                upper: 'โปรดระบุตัวอักษรพิมพ์ใหญ่เท่านั้น'
            },
            stringLength: {
                'default': 'ค่าที่ระบุยังไม่ครบตามจำนวนที่กำหนด',
                less: 'โปรดระบุค่าตัวอักษรน้อยกว่า %s ตัว',
                more: 'โปรดระบุค่าตัวอักษรมากกว่า %s ตัว',
                between: 'โปรดระบุค่าตัวอักษรระหว่าง %s ถึง %s ตัวอักษร'
            },
            uri: {
                'default': 'โปรดระบุค่า URI ให้ถูกต้อง'
            },
            uuid: {
                'default': 'โปรดระบุหมายเลข UUID ให้ถูกต้อง',
                version: 'โปรดระบุหมายเลข UUID ในเวอร์ชั่น %s'
            },
            vat: {
                'default': 'โปรดระบุจำนวนภาษีมูลค่าเพิ่ม',
                country: 'โปรดระบุจำนวนภาษีมูลค่าเพิ่มใน %s',
                countries: {
                    AT: 'ออสเตรีย',
                    BE: 'เบลเยี่ยม',
                    BG: 'บัลแกเรีย',
                    BR: 'บราซิล',
                    CH: 'วิตเซอร์แลนด์',
                    CY: 'ไซปรัส',
                    CZ: 'สาธารณรัฐเชค',
                    DE: 'เยอรมัน',
                    DK: 'เดนมาร์ก',
                    EE: 'เอสโตเนีย',
                    ES: 'สเปน',
                    FI: 'ฟินแลนด์',
                    FR: 'ฝรั่งเศส',
                    GB: 'สหราชอาณาจักร',
                    GR: 'กรีซ',
                    EL: 'กรีซ',
                    HU: 'ฮังการี',
                    HR: 'โครเอเชีย',
                    IE: 'ไอร์แลนด์',
                    IS: 'ไอซ์',
                    IT: 'อิตาลี',
                    LT: 'ลิทัวเนีย',
                    LU: 'ลักเซมเบิร์ก',
                    LV: 'ลัตเวีย',
                    MT: 'มอลตา',
                    NL: 'เนเธอร์แลนด์',
                    NO: 'นอร์เวย์',
                    PL: 'โปแลนด์',
                    PT: 'โปรตุเกส',
                    RO: 'โรมาเนีย',
                    RU: 'รัสเซีย',
                    RS: 'เซอร์เบีย',
                    SE: 'สวีเดน',
                    SI: 'สโลวีเนีย',
                    SK: 'สโลวาเกีย',
                    VE: 'เวเนซูเอลา',
                    ZA: 'แอฟริกาใต้'
                }
            },
            vin: {
                'default': 'โปรดระบุหมายเลข VIN ให้ถูกต้อง'
            },
            zipCode: {
                'default': 'โปรดระบุรหัสไปรษณีย์ให้ถูกต้อง',
                country: 'โปรดระบุรหัสไปรษณีย์ให้ถูกต้องใน %s',
                countries: {
                    AT: 'ออสเตรีย',
                    BG: 'บัลแกเรีย',
                    BR: 'บราซิล',
                    CA: 'แคนาดา',
                    CH: 'วิตเซอร์แลนด์',
                    CZ: 'สาธารณรัฐเชค',
                    DE: 'เยอรมนี',
                    DK: 'เดนมาร์ก',
                    ES: 'สเปน',
                    FR: 'ฝรั่งเศส',
                    GB: 'สหราชอาณาจักร',
                    IE: 'ไอร์แลนด์',
                    IN: 'อินเดีย',
                    IT: 'อิตาลี',
                    MA: 'โมร็อกโก',
                    NL: 'เนเธอร์แลนด์',
                    PL: 'โปแลนด์',
                    PT: 'โปรตุเกส',
                    RO: 'โรมาเนีย',
                    RU: 'รัสเซีย',
                    SE: 'สวีเดน',
                    SG: 'สิงคโปร์',
                    SK: 'สโลวาเกีย',
                    US: 'สหรัฐอเมริกา'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Turkish language package
     * Translated By @CeRBeR666
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'tr_TR': {
            base64: {
                'default': 'Lütfen 64 bit tabanına uygun bir giriş yapınız'
            },
            between: {
                'default': 'Lütfen %s ile %s arasında bir değer giriniz',
                notInclusive: 'Lütfen sadece %s ile %s arasında bir değer giriniz'
            },
            bic: {
                'default': 'Lütfen geçerli bir BIC numarası giriniz'
            },
            callback: {
                'default': 'Lütfen geçerli bir değer giriniz'
            },
            choice: {
                'default': 'Lütfen geçerli bir değer giriniz',
                less: 'Lütfen minimum %s kadar değer giriniz',
                more: 'Lütfen maksimum %s kadar değer giriniz',
                between: 'Lütfen %s - %s arası seçiniz'
            },
            color: {
                'default': 'Lütfen geçerli bir codu giriniz'
            },
            creditCard: {
                'default': 'Lütfen geçerli bir kredi kartı numarası giriniz'
            },
            cusip: {
                'default': 'Lütfen geçerli bir CUSIP numarası giriniz'
            },
            cvv: {
                'default': 'Lütfen geçerli bir CCV numarası giriniz'
            },
            date: {
                'default': 'Lütfen geçerli bir tarih giriniz',
                min: 'Lütfen %s tarihinden sonra bir tarih giriniz',
                max: 'Lütfen %s tarihinden önce bir tarih giriniz',
                range: 'Lütfen %s - %s aralığında bir tarih giriniz'
            },
            different: {
                'default': 'Lütfen farklı bir değer giriniz'
            },
            digits: {
                'default': 'Lütfen sadece sayı giriniz'
            },
            ean: {
                'default': 'Lütfen geçerli bir EAN numarası giriniz'
            },
            ein: {
                'default': 'Lütfen geçerli bir EIN numarası giriniz'
            },
            emailAddress: {
                'default': 'Lütfen geçerli bir E-Mail adresi giriniz'
            },
            file: {
                'default': 'Lütfen geçerli bir dosya seçiniz'
            },
            greaterThan: {
                'default': 'Lütfen %s ye eşit veya daha büyük bir değer giriniz',
                notInclusive: 'Lütfen %s den büyük bir değer giriniz'
            },
            grid: {
                'default': 'Lütfen geçerli bir GRId numarası giriniz'
            },
            hex: {
                'default': 'Lütfen geçerli bir Hexadecimal sayı giriniz'
            },
            iban: {
                'default': 'Lütfen geçerli bir IBAN numarası giriniz',
                country: 'Lütfen geçerli bir IBAN numarası giriniz içinde %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Birleşik Arap Emirlikleri',
                    AL: 'Arnavutluk',
                    AO: 'Angola',
                    AT: 'Avusturya',
                    AZ: 'Azerbaycan',
                    BA: 'Bosna Hersek',
                    BE: 'Belçika',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaristan',
                    BH: 'Bahreyn',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brezilya',
                    CH: 'İsviçre',
                    CI: 'Fildişi Sahili',
                    CM: 'Kamerun',
                    CR: 'Kosta Rika',
                    CV: 'Cape Verde',
                    CY: 'Kıbrıs',
                    CZ: 'Çek Cumhuriyeti',
                    DE: 'Almanya',
                    DK: 'Danimarka',
                    DO: 'Dominik Cumhuriyeti',
                    DZ: 'Cezayir',
                    EE: 'Estonya',
                    ES: 'İspanya',
                    FI: 'Finlandiya',
                    FO: 'Faroe Adaları',
                    FR: 'Fransa',
                    GB: 'İngiltere',
                    GE: 'Georgia',
                    GI: 'Cebelitarık',
                    GL: 'Grönland',
                    GR: 'Yunansitan',
                    GT: 'Guatemala',
                    HR: 'Hırvatistan',
                    HU: 'Macaristan',
                    IE: 'İrlanda',
                    IL: 'İsrail',
                    IR: 'İran',
                    IS: 'İzlanda',
                    IT: 'İtalya',
                    JO: 'Ürdün',
                    KW: 'Kuveit',
                    KZ: 'Kazakistan',
                    LB: 'Lübnan',
                    LI: 'Lihtenştayn',
                    LT: 'Litvanya',
                    LU: 'Lüksemburg',
                    LV: 'Letonya',
                    MC: 'Monako',
                    MD: 'Moldova',
                    ME: 'Karadağ',
                    MG: 'Madagaskar',
                    MK: 'Makedonya',
                    ML: 'Mali',
                    MR: 'Moritanya',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambik',
                    NL: 'Hollanda',
                    NO: 'Norveç',
                    PK: 'Pakistan',
                    PL: 'Polanya',
                    PS: 'Filistin',
                    PT: 'Portekiz',
                    QA: 'Katar',
                    RO: 'Romanya',
                    RS: 'Serbistan',
                    SA: 'Suudi Arabistan',
                    SE: 'İsveç',
                    SI: 'Slovenya',
                    SK: 'Slovakya',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Doğu Timor',
                    TN: 'Tunus',
                    TR: 'Turkiye',
                    VG: 'Virgin Adaları, İngiliz',
                    XK: 'Kosova Cumhuriyeti'
                }
            },
            id: {
                'default': 'Lütfen geçerli bir tanımlama numarası giriniz',
                country: 'Lütfen geçerli bir kimlik numarası giriniz içinde %s',
                countries: {
                    BA: 'Bosna Hersek',
                    BG: 'Bulgaristan',
                    BR: 'Brezilya',
                    CH: 'İsviçre',
                    CL: 'Şili',
                    CN: 'Çin',
                    CZ: 'Çek Cumhuriyeti',
                    DK: 'Danimarka',
                    EE: 'Estonya',
                    ES: 'İspanya',
                    FI: 'Finlandiya',
                    HR: 'Hırvatistan',
                    IE: 'İrlanda',
                    IS: 'İzlanda',
                    LT: 'Litvanya',
                    LV: 'Letonya',
                    ME: 'Karadağ',
                    MK: 'Makedonya',
                    NL: 'Hollanda',
                    PL: 'Polanya',
                    RO: 'Romanya',
                    RS: 'Sırbistan',
                    SE: 'İsveç',
                    SI: 'Slovenya',
                    SK: 'Slovakya',
                    SM: 'San Marino',
                    TH: 'Tayland',
                    TR: 'Turkiye',
                    ZA: 'Güney Afrika'
                }
            },
            identical: {
                'default': 'Lütfen aynı değeri giriniz'
            },
            imei: {
                'default': 'Lütfen geçerli bir IMEI numarası giriniz'
            },
            imo: {
                'default': 'Lütfen geçerli bir IMO numarası giriniz'
            },
            integer: {
                'default': 'Lütfen geçerli bir numara giriniz'
            },
            ip: {
                'default': 'Lütfen geçerli bir IP adresi giriniz',
                ipv4: 'Lütfen geçerli bir IPv4 adresi giriniz',
                ipv6: 'Lütfen geçerli bri IPv6 adresi giriniz'
            },
            isbn: {
                'default': 'Lütfen geçerli bir ISBN numarası giriniz'
            },
            isin: {
                'default': 'Lütfen geçerli bir ISIN numarası giriniz'
            },
            ismn: {
                'default': 'Lütfen geçerli bir ISMN numarası giriniz'
            },
            issn: {
                'default': 'Lütfen geçerli bir ISSN numarası giriniz'
            },
            lessThan: {
                'default': 'Lütfen %s den düşük veya eşit bir değer giriniz',
                notInclusive: 'Lütfen %s den büyük bir değer giriniz'
            },
            mac: {
                'default': 'Lütfen geçerli bir MAC Adresi giriniz'
            },
            meid: {
                'default': 'Lütfen geçerli bir MEID numarası giriniz'
            },
            notEmpty: {
                'default': 'Bir değer giriniz'
            },
            numeric: {
                'default': 'Lütfen geçerli bir float değer giriniz'
            },
            phone: {
                'default': 'Lütfen geçerli bir telefon numarası giriniz',
                country: 'Lütfen geçerli bir telefon numarası giriniz içinde %s',
                countries: {
                    AE: 'Birleşik Arap Emirlikleri',
                    BG: 'Bulgaristan',
                    BR: 'Brezilya',
                    CN: 'Çin',
                    CZ: 'Çek Cumhuriyeti',
                    DE: 'Almanya',
                    DK: 'Danimarka',
                    ES: 'İspanya',
                    FR: 'Fransa',
                    GB: 'İngiltere',
                    IN: 'Hindistan',
                    MA: 'Fas',
                    NL: 'Hollanda',
                    PK: 'Pakistan',
                    RO: 'Romanya',
                    RU: 'Rusya',
                    SK: 'Slovakya',
                    TH: 'Tayland',
                    US: 'Amerika',
                    VE: 'Venezüella'
                }
            },
            promise: {
                'default': 'Lütfen geçerli bir değer giriniz'
            },
            regexp: {
                'default': 'Lütfen uyumlu bir değer giriniz'
            },
            remote: {
                'default': 'Lütfen geçerli bir numara giriniz'
            },
            rtn: {
                'default': 'Lütfen geçerli bir RTN numarası giriniz'
            },
            sedol: {
                'default': 'Lütfen geçerli bir SEDOL numarası giriniz'
            },
            siren: {
                'default': 'Lütfen geçerli bir SIREN numarası giriniz'
            },
            siret: {
                'default': 'Lütfen geçerli bir SIRET numarası giriniz'
            },
            step: {
                'default': 'Lütfen geçerli bir %s adımı giriniz'
            },
            stringCase: {
                'default': 'Lütfen sadece küçük harf giriniz',
                upper: 'Lütfen sadece büyük harf giriniz'
            },
            stringLength: {
                'default': 'Lütfen geçerli uzunluktaki bir değer giriniz',
                less: 'Lütfen %s karakterden az değer giriniz',
                more: 'Lütfen %s karakterden fazla değer giriniz',
                between: 'Lütfen %s ile %s arası uzunlukta bir değer giriniz'
            },
            uri: {
                'default': 'Lütfen geçerli bir URL giriniz'
            },
            uuid: {
                'default': 'Lütfen geçerli bir UUID numarası giriniz',
                version: 'Lütfen geçerli bir UUID versiyon %s numarası giriniz'
            },
            vat: {
                'default': 'Lütfen geçerli bir VAT kodu giriniz',
                country: 'Lütfen geçerli bir vergi numarası giriniz içinde %s',
                countries: {
                    AT: 'Avustralya',
                    BE: 'Belçika',
                    BG: 'Bulgaristan',
                    BR: 'Brezilya',
                    CH: 'İsviçre',
                    CY: 'Kıbrıs',
                    CZ: 'Çek Cumhuriyeti',
                    DE: 'Almanya',
                    DK: 'Danimarka',
                    EE: 'Estonya',
                    ES: 'İspanya',
                    FI: 'Finlandiya',
                    FR: 'Fransa',
                    GB: 'İngiltere',
                    GR: 'Yunanistan',
                    EL: 'Yunanistan',
                    HU: 'Macaristan',
                    HR: 'Hırvatistan',
                    IE: 'Irlanda',
                    IS: 'İzlanda',
                    IT: 'Italya',
                    LT: 'Litvanya',
                    LU: 'Lüksemburg',
                    LV: 'Letonya',
                    MT: 'Malta',
                    NL: 'Hollanda',
                    NO: 'Norveç',
                    PL: 'Polonya',
                    PT: 'Portekiz',
                    RO: 'Romanya',
                    RU: 'Rusya',
                    RS: 'Sırbistan',
                    SE: 'İsveç',
                    SI: 'Slovenya',
                    SK: 'Slovakya',
                    VE: 'Venezüella',
                    ZA: 'Güney Afrika'
                }
            },
            vin: {
                'default': 'Lütfen geçerli bir VIN numarası giriniz'
            },
            zipCode: {
                'default': 'Lütfen geçerli bir posta kodu giriniz',
                country: 'Lütfen geçerli bir posta kodu giriniz içinde %s',
                countries: {
                    AT: 'Avustralya',
                    BG: 'Bulgaristan',
                    BR: 'Brezilya',
                    CA: 'Kanada',
                    CH: 'İsviçre',
                    CZ: 'Çek Cumhuriyeti',
                    DE: 'Almanya',
                    DK: 'Danimarka',
                    ES: 'İspanya',
                    FR: 'Fransa',
                    GB: 'İngiltere',
                    IE: 'Irlanda',
                    IN: 'Hindistan',
                    IT: 'İtalya',
                    MA: 'Fas',
                    NL: 'Hollanda',
                    PL: 'Polanya',
                    PT: 'Portekiz',
                    RO: 'Romanya',
                    RU: 'Rusya',
                    SE: 'İsveç',
                    SG: 'Singapur',
                    SK: 'Slovakya',
                    US: 'Amerika Birleşik Devletleri'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Ukrainian language package
     * Translated by @oleg-voloshyn
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ua_UA': {
            base64: {
                'default': 'Будь ласка, введіть коректний рядок base64'
            },
            between: {
                'default': 'Будь ласка, введіть значення від %s до %s',
                notInclusive: 'Будь ласка, введіть значення між %s і %s'
            },
            bic: {
                'default': 'Будь ласка, введіть правильний номер BIC'
            },
            callback: {
                'default': 'Будь ласка, введіть коректне значення'
            },
            choice: {
                'default': 'Будь ласка, введіть коректне значення',
                less: 'Будь ласка, виберіть хоча б %s опцій',
                more: 'Будь ласка, виберіть не більше %s опцій',
                between: 'Будь ласка, виберіть %s - %s опцій'
            },
            color: {
                'default': 'Будь ласка, введіть правильний номер кольору'
            },
            creditCard: {
                'default': 'Будь ласка, введіть правильний номер кредитної картки'
            },
            cusip: {
                'default': 'Будь ласка, введіть правильний номер CUSIP'
            },
            cvv: {
                'default': 'Будь ласка, введіть правильний номер CVV'
            },
            date: {
                'default': 'Будь ласка, введіть правильну дату',
                min: 'Будь ласка, введіть дату після %s',
                max: 'Будь ласка, введіть дату перед %s',
                range: 'Будь ласка, введіть дату у діапазоні %s - %s'
            },
            different: {
                'default': 'Будь ласка, введіть інше значення'
            },
            digits: {
                'default': 'Будь ласка, введіть тільки цифри'
            },
            ean: {
                'default': 'Будь ласка, введіть правильний номер EAN'
            },
            ein: {
                'default': 'Будь ласка, введіть правильний номер EIN'
            },
            emailAddress: {
                'default': 'Будь ласка, введіть правильну адресу e-mail'
            },
            file: {
                'default': 'Будь ласка, виберіть файл'
            },
            greaterThan: {
                'default': 'Будь ласка, введіть значення більше або рівне %s',
                notInclusive: 'Будь ласка, введіть значення більше %s'
            },
            grid: {
                'default': 'Будь ласка, введіть правильний номер GRId'
            },
            hex: {
                'default': 'Будь ласка, введіть правильний шістнадцятковий(16) номер'
            },
            iban: {
                'default': 'Будь ласка, введіть правильний номер IBAN',
                country: 'Будь ласка, введіть правильний номер IBAN в %s',
                countries: {
                    AD: 'Андоррі',
                    AE: 'Об\'єднаних Арабських Еміратах',
                    AL: 'Албанії',
                    AO: 'Анголі',
                    AT: 'Австрії',
                    AZ: 'Азербайджані',
                    BA: 'Боснії і Герцеговині',
                    BE: 'Бельгії',
                    BF: 'Буркіна-Фасо',
                    BG: 'Болгарії',
                    BH: 'Бахрейні',
                    BI: 'Бурунді',
                    BJ: 'Беніні',
                    BR: 'Бразилії',
                    CH: 'Швейцарії',
                    CI: 'Кот-д\'Івуарі',
                    CM: 'Камеруні',
                    CR: 'Коста-Ріці',
                    CV: 'Кабо-Верде',
                    CY: 'Кіпрі',
                    CZ: 'Чехії',
                    DE: 'Германії',
                    DK: 'Данії',
                    DO: 'Домінікані',
                    DZ: 'Алжирі',
                    EE: 'Естонії',
                    ES: 'Іспанії',
                    FI: 'Фінляндії',
                    FO: 'Фарерських островах',
                    FR: 'Франції',
                    GB: 'Великобританії',
                    GE: 'Грузії',
                    GI: 'Гібралтарі',
                    GL: 'Гренландії',
                    GR: 'Греції',
                    GT: 'Гватемалі',
                    HR: 'Хорватії',
                    HU: 'Венгрії',
                    IE: 'Ірландії',
                    IL: 'Ізраїлі',
                    IR: 'Ірані',
                    IS: 'Ісландії',
                    IT: 'Італії',
                    JO: 'Йорданії',
                    KW: 'Кувейті',
                    KZ: 'Казахстані',
                    LB: 'Лівані',
                    LI: 'Ліхтенштейні',
                    LT: 'Литві',
                    LU: 'Люксембурзі',
                    LV: 'Латвії',
                    MC: 'Монако',
                    MD: 'Молдові',
                    ME: 'Чорногорії',
                    MG: 'Мадагаскарі',
                    MK: 'Македонії',
                    ML: 'Малі',
                    MR: 'Мавританії',
                    MT: 'Мальті',
                    MU: 'Маврикії',
                    MZ: 'Мозамбіку',
                    NL: 'Нідерландах',
                    NO: 'Норвегії',
                    PK: 'Пакистані',
                    PL: 'Польщі',
                    PS: 'Палестині',
                    PT: 'Португалії',
                    QA: 'Катарі',
                    RO: 'Румунії',
                    RS: 'Сербії',
                    SA: 'Саудівської Аравії',
                    SE: 'Швеції',
                    SI: 'Словенії',
                    SK: 'Словаччині',
                    SM: 'Сан-Марино',
                    SN: 'Сенегалі',
                    TL: 'східний Тимор',
                    TN: 'Тунісі',
                    TR: 'Туреччині',
                    VG: 'Британських Віргінських островах',
                    XK: 'Республіка Косово'
                }
            },
            id: {
                'default': 'Будь ласка, введіть правильний ідентифікаційний номер',
                country: 'Будь ласка, введіть правильний ідентифікаційний номер в %s',
                countries: {
                    BA: 'Боснії і Герцеговині',
                    BG: 'Болгарії',
                    BR: 'Бразилії',
                    CH: 'Швейцарії',
                    CL: 'Чилі',
                    CN: 'Китаї',
                    CZ: 'Чехії',
                    DK: 'Данії',
                    EE: 'Естонії',
                    ES: 'Іспанії',
                    FI: 'Фінляндії',
                    HR: 'Хорватії',
                    IE: 'Ірландії',
                    IS: 'Ісландії',
                    LT: 'Литві',
                    LV: 'Латвії',
                    ME: 'Чорногорії',
                    MK: 'Македонії',
                    NL: 'Нідерландах',
                    PL: 'Польщі',
                    RO: 'Румунії',
                    RS: 'Сербії',
                    SE: 'Швеції',
                    SI: 'Словенії',
                    SK: 'Словаччині',
                    SM: 'Сан-Марино',
                    TH: 'Таїланді',
                    TR: 'Туреччині',
                    ZA: 'ПАР'
                }
            },
            identical: {
                'default': 'Будь ласка, введіть таке ж значення'
            },
            imei: {
                'default': 'Будь ласка, введіть правильний номер IMEI'
            },
            imo: {
                'default': 'Будь ласка, введіть правильний номер IMO'
            },
            integer: {
                'default': 'Будь ласка, введіть правильне ціле значення'
            },
            ip: {
                'default': 'Будь ласка, введіть правильну IP-адресу',
                ipv4: 'Будь ласка введіть правильну IPv4-адресу',
                ipv6: 'Будь ласка введіть правильну IPv6-адресу'
            },
            isbn: {
                'default': 'Будь ласка, введіть правильний номер ISBN'
            },
            isin: {
                'default': 'Будь ласка, введіть правильний номер ISIN'
            },
            ismn: {
                'default': 'Будь ласка, введіть правильний номер ISMN'
            },
            issn: {
                'default': 'Будь ласка, введіть правильний номер ISSN'
            },
            lessThan: {
                'default': 'Будь ласка, введіть значення менше або рівне %s',
                notInclusive: 'Будь ласка, введіть значення менше ніж %s'
            },
            mac: {
                'default': 'Будь ласка, введіть правильну MAC-адресу'
            },
            meid: {
                'default': 'Будь ласка, введіть правильний номер MEID'
            },
            notEmpty: {
                'default': 'Будь ласка, введіть значення'
            },
            numeric: {
                'default': 'Будь ласка, введіть коректне дійсне число'
            },
            phone: {
                'default': 'Будь ласка, введіть правильний номер телефону',
                country: 'Будь ласка, введіть правильний номер телефону в %s',
                countries: {
                    AE: 'Об\'єднаних Арабських Еміратах',
                    BG: 'Болгарії',
                    BR: 'Бразилії',
                    CN: 'Китаї',
                    CZ: 'Чехії',
                    DE: 'Германії',
                    DK: 'Данії',
                    ES: 'Іспанії',
                    FR: 'Франції',
                    GB: 'Великобританії',
                    IN: 'Індія',
                    MA: 'Марокко',
                    NL: 'Нідерландах',
                    PK: 'Пакистані',
                    RO: 'Румунії',
                    RU: 'Росії',
                    SK: 'Словаччині',
                    TH: 'Таїланді',
                    US: 'США',
                    VE: 'Венесуелі'
                }
            },
            promise: {
                'default': 'Будь ласка, введіть коректне значення'
            },
            regexp: {
                'default': 'Будь ласка, введіть значення відповідне до шаблону'
            },
            remote: {
                'default': 'Будь ласка, введіть правильне значення'
            },
            rtn: {
                'default': 'Будь ласка, введіть правильний номер RTN'
            },
            sedol: {
                'default': 'Будь ласка, введіть правильний номер SEDOL'
            },
            siren: {
                'default': 'Будь ласка, введіть правильний номер SIREN'
            },
            siret: {
                'default': 'Будь ласка, введіть правильний номер SIRET'
            },
            step: {
                'default': 'Будь ласка, введіть правильний крок %s'
            },
            stringCase: {
                'default': 'Будь ласка, вводите тільки малі літери',
                upper: 'Будь ласка, вводите тільки заголовні букви'
            },
            stringLength: {
                'default': 'Будь ласка, введіть значення коректної довжини',
                less: 'Будь ласка, введіть не більше %s символів',
                more: 'Будь ласка, введіть, не менше %s символів',
                between: 'Будь ласка, введіть рядок довжиною від %s до %s символів'
            },
            uri: {
                'default': 'Будь ласка, введіть правильний URI'
            },
            uuid: {
                'default': 'Будь ласка, введіть правильний номер UUID',
                version: 'Будь ласка, введіть правильний номер UUID версії %s'
            },
            vat: {
                'default': 'Будь ласка, введіть правильний номер VAT',
                country: 'Будь ласка, введіть правильний номер VAT в %s',
                countries: {
                    AT: 'Австрії',
                    BE: 'Бельгії',
                    BG: 'Болгарії',
                    BR: 'Бразилії',
                    CH: 'Швейцарії',
                    CY: 'Кіпрі',
                    CZ: 'Чехії',
                    DE: 'Германії',
                    DK: 'Данії',
                    EE: 'Естонії',
                    ES: 'Іспанії',
                    FI: 'Фінляндії',
                    FR: 'Франції',
                    GB: 'Великобританії',
                    GR: 'Греції',
                    EL: 'Греції',
                    HU: 'Венгрії',
                    HR: 'Хорватії',
                    IE: 'Ірландії',
                    IS: 'Ісландії',
                    IT: 'Італії',
                    LT: 'Литві',
                    LU: 'Люксембургі',
                    LV: 'Латвії',
                    MT: 'Мальті',
                    NL: 'Нідерландах',
                    NO: 'Норвегії',
                    PL: 'Польщі',
                    PT: 'Португалії',
                    RO: 'Румунії',
                    RU: 'Росії',
                    RS: 'Сербії',
                    SE: 'Швеції',
                    SI: 'Словенії',
                    SK: 'Словаччині',
                    VE: 'Венесуелі',
                    ZA: 'ПАР'
                }
            },
            vin: {
                'default': 'Будь ласка, введіть правильний номер VIN'
            },
            zipCode: {
                'default': 'Будь ласка, введіть правильний поштовий індекс',
                country: 'Будь ласка, введіть правильний поштовий індекс в %s',
                countries: {
                    AT: 'Австрії',
                    BG: 'Болгарії',
                    BR: 'Бразилії',
                    CA: 'Канаді',
                    CH: 'Швейцарії',
                    CZ: 'Чехії',
                    DE: 'Германії',
                    DK: 'Данії',
                    ES: 'Іспанії',
                    FR: 'Франції',
                    GB: 'Великобританії',
                    IE: 'Ірландії',
                    IN: 'Індія',
                    IT: 'Італії',
                    MA: 'Марокко',
                    NL: 'Нідерландах',
                    PL: 'Польщі',
                    PT: 'Португалії',
                    RO: 'Румунії',
                    RU: 'Росії',
                    SE: 'Швеції',
                    SG: 'Сингапурі',
                    SK: 'Словаччині',
                    US: 'США'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Vietnamese language package
     * Translated by @nghuuphuoc
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'vi_VN': {
            base64: {
                'default': 'Vui lòng nhập chuỗi mã hoá base64 hợp lệ'
            },
            between: {
                'default': 'Vui lòng nhập giá trị nằm giữa %s và %s',
                notInclusive: 'Vui lòng nhập giá trị nằm giữa %s và %s'
            },
            bic: {
                'default': 'Vui lòng nhập số BIC hợp lệ'
            },
            callback: {
                'default': 'Vui lòng nhập giá trị hợp lệ'
            },
            choice: {
                'default': 'Vui lòng nhập giá trị hợp lệ',
                less: 'Vui lòng chọn ít nhất %s lựa chọn',
                more: 'Vui lòng chọn nhiều nhất %s lựa chọn',
                between: 'Vui lòng chọn %s - %s lựa chọn'
            },
            color: {
                'default': 'Vui lòng nhập mã màu hợp lệ'
            },
            creditCard: {
                'default': 'Vui lòng nhập số thẻ tín dụng hợp lệ'
            },
            cusip: {
                'default': 'Vui lòng nhập số CUSIP hợp lệ'
            },
            cvv: {
                'default': 'Vui lòng nhập số CVV hợp lệ'
            },
            date: {
                'default': 'Vui lòng nhập ngày hợp lệ',
                min: 'Vui lòng nhập ngày sau %s',
                max: 'Vui lòng nhập ngày trước %s',
                range: 'Vui lòng nhập ngày trong khoảng %s - %s'
            },
            different: {
                'default': 'Vui lòng nhập một giá trị khác'
            },
            digits: {
                'default': 'Vui lòng chỉ nhập số'
            },
            ean: {
                'default': 'Vui lòng nhập số EAN hợp lệ'
            },
            ein: {
                'default': 'Vui lòng nhập số EIN hợp lệ'
            },
            emailAddress: {
                'default': 'Vui lòng nhập địa chỉ email hợp lệ'
            },
            file: {
                'default': 'Vui lòng chọn file hợp lệ'
            },
            greaterThan: {
                'default': 'Vui lòng nhập giá trị lớn hơn hoặc bằng %s',
                notInclusive: 'Vui lòng nhập giá trị lớn hơn %s'
            },
            grid: {
                'default': 'Vui lòng nhập số GRId hợp lệ'
            },
            hex: {
                'default': 'Vui lòng nhập số hexa hợp lệ'
            },
            iban: {
                'default': 'Vui lòng nhập số IBAN hợp lệ',
                country: 'Vui lòng nhập mã IBAN hợp lệ của %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Tiểu vương quốc Ả Rập thống nhất',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Áo',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia và Herzegovina',
                    BE: 'Bỉ',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazil',
                    CH: 'Thuỵ Sĩ',
                    CI: 'Bờ Biển Ngà',
                    CM: 'Cameroon',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Síp',
                    CZ: 'Séc',
                    DE: 'Đức',
                    DK: 'Đan Mạch',
                    DO: 'Dominican',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Tây Ban Nha',
                    FI: 'Phần Lan',
                    FO: 'Đảo Faroe',
                    FR: 'Pháp',
                    GB: 'Vương quốc Anh',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Greenland',
                    GR: 'Hy Lạp',
                    GT: 'Guatemala',
                    HR: 'Croatia',
                    HU: 'Hungary',
                    IE: 'Ireland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Iceland',
                    IT: 'Ý',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Lebanon',
                    LI: 'Liechtenstein',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Hà Lan',
                    NO: 'Na Uy',
                    PK: 'Pakistan',
                    PL: 'Ba Lan',
                    PS: 'Palestine',
                    PT: 'Bồ Đào Nha',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Ả Rập Xê Út',
                    SE: 'Thuỵ Điển',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TL: 'Đông Timor',
                    TN: 'Tunisia',
                    TR: 'Thổ Nhĩ Kỳ',
                    VG: 'Đảo Virgin, Anh quốc',
                    XK: 'Kosovo'
                }
            },
            id: {
                'default': 'Vui lòng nhập mã ID hợp lệ',
                country: 'Vui lòng nhập mã ID hợp lệ của %s',
                countries: {
                    BA: 'Bosnia và Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Thuỵ Sĩ',
                    CL: 'Chi Lê',
                    CN: 'Trung Quốc',
                    CZ: 'Séc',
                    DK: 'Đan Mạch',
                    EE: 'Estonia',
                    ES: 'Tây Ban Nha',
                    FI: 'Phần Lan',
                    HR: 'Croatia',
                    IE: 'Ireland',
                    IS: 'Iceland',
                    LT: 'Lithuania',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Hà Lan',
                    PL: 'Ba Lan',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Thuỵ Điển',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thái Lan',
                    TR: 'Thổ Nhĩ Kỳ',
                    ZA: 'Nam Phi'
                }
            },
            identical: {
                'default': 'Vui lòng nhập cùng giá trị'
            },
            imei: {
                'default': 'Vui lòng nhập số IMEI hợp lệ'
            },
            imo: {
                'default': 'Vui lòng nhập số IMO hợp lệ'
            },
            integer: {
                'default': 'Vui lòng nhập số hợp lệ'
            },
            ip: {
                'default': 'Vui lòng nhập địa chỉ IP hợp lệ',
                ipv4: 'Vui lòng nhập địa chỉ IPv4 hợp lệ',
                ipv6: 'Vui lòng nhập địa chỉ IPv6 hợp lệ'
            },
            isbn: {
                'default': 'Vui lòng nhập số ISBN hợp lệ'
            },
            isin: {
                'default': 'Vui lòng nhập số ISIN hợp lệ'
            },
            ismn: {
                'default': 'Vui lòng nhập số ISMN hợp lệ'
            },
            issn: {
                'default': 'Vui lòng nhập số ISSN hợp lệ'
            },
            lessThan: {
                'default': 'Vui lòng nhập giá trị nhỏ hơn hoặc bằng %s',
                notInclusive: 'Vui lòng nhập giá trị nhỏ hơn %s'
            },
            mac: {
                'default': 'Vui lòng nhập địa chỉ MAC hợp lệ'
            },
            meid: {
                'default': 'Vui lòng nhập số MEID hợp lệ'
            },
            notEmpty: {
                'default': 'Vui lòng nhập giá trị'
            },
            numeric: {
                'default': 'Vui lòng nhập số hợp lệ'
            },
            phone: {
                'default': 'Vui lòng nhập số điện thoại hợp lệ',
                country: 'Vui lòng nhập số điện thoại hợp lệ của %s',
                countries: {
                    AE: 'Tiểu vương quốc Ả Rập thống nhất',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CN: 'Trung Quốc',
                    CZ: 'Séc',
                    DE: 'Đức',
                    DK: 'Đan Mạch',
                    ES: 'Tây Ban Nha',
                    FR: 'Pháp',
                    GB: 'Vương quốc Anh',
                    IN: 'Ấn Độ',
                    MA: 'Maroc',
                    NL: 'Hà Lan',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Nga',
                    SK: 'Slovakia',
                    TH: 'Thái Lan',
                    US: 'Mỹ',
                    VE: 'Venezuela'
                }
            },
            promise: {
                'default': 'Vui lòng nhập giá trị hợp lệ'
            },
            regexp: {
                'default': 'Vui lòng nhập giá trị thích hợp với biểu mẫu'
            },
            remote: {
                'default': 'Vui lòng nhập giá trị hợp lệ'
            },
            rtn: {
                'default': 'Vui lòng nhập số RTN hợp lệ'
            },
            sedol: {
                'default': 'Vui lòng nhập số SEDOL hợp lệ'
            },
            siren: {
                'default': 'Vui lòng nhập số Siren hợp lệ'
            },
            siret: {
                'default': 'Vui lòng nhập số Siret hợp lệ'
            },
            step: {
                'default': 'Vui lòng nhập bước nhảy của %s'
            },
            stringCase: {
                'default': 'Vui lòng nhập ký tự thường',
                upper: 'Vui lòng nhập ký tự in hoa'
            },
            stringLength: {
                'default': 'Vui lòng nhập giá trị có độ dài hợp lệ',
                less: 'Vui lòng nhập ít hơn %s ký tự',
                more: 'Vui lòng nhập nhiều hơn %s ký tự',
                between: 'Vui lòng nhập giá trị có độ dài trong khoảng %s và %s ký tự'
            },
            uri: {
                'default': 'Vui lòng nhập địa chỉ URI hợp lệ'
            },
            uuid: {
                'default': 'Vui lòng nhập số UUID hợp lệ',
                version: 'Vui lòng nhập số UUID phiên bản %s hợp lệ'
            },
            vat: {
                'default': 'Vui lòng nhập số VAT hợp lệ',
                country: 'Vui lòng nhập số VAT hợp lệ của %s',
                countries: {
                    AT: 'Áo',
                    BE: 'Bỉ',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Thuỵ Sĩ',
                    CY: 'Síp',
                    CZ: 'Séc',
                    DE: 'Đức',
                    DK: 'Đan Mạch',
                    EE: 'Estonia',
                    ES: 'Tây Ban Nha',
                    FI: 'Phần Lan',
                    FR: 'Pháp',
                    GB: 'Vương quốc Anh',
                    GR: 'Hy Lạp',
                    EL: 'Hy Lạp',
                    HU: 'Hungari',
                    HR: 'Croatia',
                    IE: 'Ireland',
                    IS: 'Iceland',
                    IT: 'Ý',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Hà Lan',
                    NO: 'Na Uy',
                    PL: 'Ba Lan',
                    PT: 'Bồ Đào Nha',
                    RO: 'Romania',
                    RU: 'Nga',
                    RS: 'Serbia',
                    SE: 'Thuỵ Điển',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'Nam Phi'
                }
            },
            vin: {
                'default': 'Vui lòng nhập số VIN hợp lệ'
            },
            zipCode: {
                'default': 'Vui lòng nhập mã bưu điện hợp lệ',
                country: 'Vui lòng nhập mã bưu điện hợp lệ của %s',
                countries: {
                    AT: 'Áo',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CA: 'Canada',
                    CH: 'Thuỵ Sĩ',
                    CZ: 'Séc',
                    DE: 'Đức',
                    DK: 'Đan Mạch',
                    ES: 'Tây Ban Nha',
                    FR: 'Pháp',
                    GB: 'Vương quốc Anh',
                    IE: 'Ireland',
                    IN: 'Ấn Độ',
                    IT: 'Ý',
                    MA: 'Maroc',
                    NL: 'Hà Lan',
                    PL: 'Ba Lan',
                    PT: 'Bồ Đào Nha',
                    RO: 'Romania',
                    RU: 'Nga',
                    SE: 'Thuỵ Sĩ',
                    SG: 'Singapore',
                    SK: 'Slovakia',
                    US: 'Mỹ'
                }
            }
        }
    });
}(jQuery));
(function ($) {
    /**
     * Simplified Chinese language package
     * Translated by @shamiao
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'zh_CN': {
            base64: {
                'default': '请输入有效的Base64编码'
            },
            between: {
                'default': '请输入在 %s 和 %s 之间的数值',
                notInclusive: '请输入在 %s 和 %s 之间(不含两端)的数值'
            },
            bic: {
                'default': '请输入有效的BIC商品编码'
            },
            callback: {
                'default': '请输入有效的值'
            },
            choice: {
                'default': '请输入有效的值',
                less: '请至少选中 %s 个选项',
                more: '最多只能选中 %s 个选项',
                between: '请选择 %s 至 %s 个选项'
            },
            color: {
                'default': '请输入有效的颜色值'
            },
            creditCard: {
                'default': '请输入有效的信用卡号码'
            },
            cusip: {
                'default': '请输入有效的美国CUSIP代码'
            },
            cvv: {
                'default': '请输入有效的CVV代码'
            },
            date: {
                'default': '请输入有效的日期',
                min: '请输入 %s 或之后的日期',
                max: '请输入 %s 或以前的日期',
                range: '请输入 %s 和 %s 之间的日期'
            },
            different: {
                'default': '请输入不同的值'
            },
            digits: {
                'default': '请输入有效的数字'
            },
            ean: {
                'default': '请输入有效的EAN商品编码'
            },
            ein: {
                'default': '请输入有效的EIN商品编码'
            },
            emailAddress: {
                'default': '请输入有效的邮件地址'
            },
            file: {
                'default': '请选择有效的文件'
            },
            greaterThan: {
                'default': '请输入大于等于 %s 的数值',
                notInclusive: '请输入大于 %s 的数值'
            },
            grid: {
                'default': '请输入有效的GRId编码'
            },
            hex: {
                'default': '请输入有效的16进制数'
            },
            iban: {
                'default': '请输入有效的IBAN(国际银行账户)号码',
                country: '请输入有效的 %s 国家或地区的IBAN(国际银行账户)号码',
                countries: {
                    AD: '安道​​尔',
                    AE: '阿联酋',
                    AL: '阿尔巴尼亚',
                    AO: '安哥拉',
                    AT: '奥地利',
                    AZ: '阿塞拜疆',
                    BA: '波斯尼亚和黑塞哥维那',
                    BE: '比利时',
                    BF: '布基纳法索',
                    BG: '保加利亚',
                    BH: '巴林',
                    BI: '布隆迪',
                    BJ: '贝宁',
                    BR: '巴西',
                    CH: '瑞士',
                    CI: '科特迪瓦',
                    CM: '喀麦隆',
                    CR: '哥斯达黎加',
                    CV: '佛得角',
                    CY: '塞浦路斯',
                    CZ: '捷克共和国',
                    DE: '德国',
                    DK: '丹麦',
                    DO: '多米尼加共和国',
                    DZ: '阿尔及利亚',
                    EE: '爱沙尼亚',
                    ES: '西班牙',
                    FI: '芬兰',
                    FO: '法罗群岛',
                    FR: '法国',
                    GB: '英国',
                    GE: '格鲁吉亚',
                    GI: '直布罗陀',
                    GL: '格陵兰岛',
                    GR: '希腊',
                    GT: '危地马拉',
                    HR: '克罗地亚',
                    HU: '匈牙利',
                    IE: '爱尔兰',
                    IL: '以色列',
                    IR: '伊朗',
                    IS: '冰岛',
                    IT: '意大利',
                    JO: '约旦',
                    KW: '科威特',
                    KZ: '哈萨克斯坦',
                    LB: '黎巴嫩',
                    LI: '列支敦士登',
                    LT: '立陶宛',
                    LU: '卢森堡',
                    LV: '拉脱维亚',
                    MC: '摩纳哥',
                    MD: '摩尔多瓦',
                    ME: '黑山',
                    MG: '马达加斯加',
                    MK: '马其顿',
                    ML: '马里',
                    MR: '毛里塔尼亚',
                    MT: '马耳他',
                    MU: '毛里求斯',
                    MZ: '莫桑比克',
                    NL: '荷兰',
                    NO: '挪威',
                    PK: '巴基斯坦',
                    PL: '波兰',
                    PS: '巴勒斯坦',
                    PT: '葡萄牙',
                    QA: '卡塔尔',
                    RO: '罗马尼亚',
                    RS: '塞尔维亚',
                    SA: '沙特阿拉伯',
                    SE: '瑞典',
                    SI: '斯洛文尼亚',
                    SK: '斯洛伐克',
                    SM: '圣马力诺',
                    SN: '塞内加尔',
                    TL: '东帝汶',
                    TN: '突尼斯',
                    TR: '土耳其',
                    VG: '英属维尔京群岛',
                    XK: '科索沃共和国'
                }
            },
            id: {
                'default': '请输入有效的身份证件号码',
                country: '请输入有效的 %s 国家或地区的身份证件号码',
                countries: {
                    BA: '波黑',
                    BG: '保加利亚',
                    BR: '巴西',
                    CH: '瑞士',
                    CL: '智利',
                    CN: '中国',
                    CZ: '捷克共和国',
                    DK: '丹麦',
                    EE: '爱沙尼亚',
                    ES: '西班牙',
                    FI: '芬兰',
                    HR: '克罗地亚',
                    IE: '爱尔兰',
                    IS: '冰岛',
                    LT: '立陶宛',
                    LV: '拉脱维亚',
                    ME: '黑山',
                    MK: '马其顿',
                    NL: '荷兰',
                    PL: '波兰',
                    RO: '罗马尼亚',
                    RS: '塞尔维亚',
                    SE: '瑞典',
                    SI: '斯洛文尼亚',
                    SK: '斯洛伐克',
                    SM: '圣马力诺',
                    TH: '泰国',
                    TR: '土耳其',
                    ZA: '南非'
                }
            },
            identical: {
                'default': '请输入相同的值'
            },
            imei: {
                'default': '请输入有效的IMEI(手机串号)'
            },
            imo: {
                'default': '请输入有效的国际海事组织(IMO)号码'
            },
            integer: {
                'default': '请输入有效的整数值'
            },
            ip: {
                'default': '请输入有效的IP地址',
                ipv4: '请输入有效的IPv4地址',
                ipv6: '请输入有效的IPv6地址'
            },
            isbn: {
                'default': '请输入有效的ISBN(国际标准书号)'
            },
            isin: {
                'default': '请输入有效的ISIN(国际证券编码)'
            },
            ismn: {
                'default': '请输入有效的ISMN(印刷音乐作品编码)'
            },
            issn: {
                'default': '请输入有效的ISSN(国际标准杂志书号)'
            },
            lessThan: {
                'default': '请输入小于等于 %s 的数值',
                notInclusive: '请输入小于 %s 的数值'
            },
            mac: {
                'default': '请输入有效的MAC物理地址'
            },
            meid: {
                'default': '请输入有效的MEID(移动设备识别码)'
            },
            notEmpty: {
                'default': '请填写必填项目'
            },
            numeric: {
                'default': '请输入有效的数值，允许小数'
            },
            phone: {
                'default': '请输入有效的电话号码',
                country: '请输入有效的 %s 国家或地区的电话号码',
                countries: {
                    AE: '阿联酋',
                    BG: '保加利亚',
                    BR: '巴西',
                    CN: '中国',
                    CZ: '捷克共和国',
                    DE: '德国',
                    DK: '丹麦',
                    ES: '西班牙',
                    FR: '法国',
                    GB: '英国',
                    IN: '印度',
                    MA: '摩洛哥',
                    NL: '荷兰',
                    PK: '巴基斯坦',
                    RO: '罗马尼亚',
                    RU: '俄罗斯',
                    SK: '斯洛伐克',
                    TH: '泰国',
                    US: '美国',
                    VE: '委内瑞拉'
                }
            },
            promise: {
                'default': '请输入有效的值'
            },
            regexp: {
                'default': '请输入符合正则表达式限制的值'
            },
            remote: {
                'default': '请输入有效的值'
            },
            rtn: {
                'default': '请输入有效的RTN号码'
            },
            sedol: {
                'default': '请输入有效的SEDOL代码'
            },
            siren: {
                'default': '请输入有效的SIREN号码'
            },
            siret: {
                'default': '请输入有效的SIRET号码'
            },
            step: {
                'default': '请输入在基础值上，增加 %s 的整数倍的数值'
            },
            stringCase: {
                'default': '只能输入小写字母',
                upper: '只能输入大写字母'
            },
            stringLength: {
                'default': '请输入符合长度限制的值',
                less: '最多只能输入 %s 个字符',
                more: '需要输入至少 %s 个字符',
                between: '请输入 %s 至 %s 个字符'
            },
            uri: {
                'default': '请输入一个有效的URL地址'
            },
            uuid: {
                'default': '请输入有效的UUID',
                version: '请输入版本 %s 的UUID'
            },
            vat: {
                'default': '请输入有效的VAT(税号)',
                country: '请输入有效的 %s 国家或地区的VAT(税号)',
                countries: {
                    AT: '奥地利',
                    BE: '比利时',
                    BG: '保加利亚',
                    BR: '巴西',
                    CH: '瑞士',
                    CY: '塞浦路斯',
                    CZ: '捷克共和国',
                    DE: '德国',
                    DK: '丹麦',
                    EE: '爱沙尼亚',
                    ES: '西班牙',
                    FI: '芬兰',
                    FR: '法语',
                    GB: '英国',
                    GR: '希腊',
                    EL: '希腊',
                    HU: '匈牙利',
                    HR: '克罗地亚',
                    IE: '爱尔兰',
                    IS: '冰岛',
                    IT: '意大利',
                    LT: '立陶宛',
                    LU: '卢森堡',
                    LV: '拉脱维亚',
                    MT: '马耳他',
                    NL: '荷兰',
                    NO: '挪威',
                    PL: '波兰',
                    PT: '葡萄牙',
                    RO: '罗马尼亚',
                    RU: '俄罗斯',
                    RS: '塞尔维亚',
                    SE: '瑞典',
                    SI: '斯洛文尼亚',
                    SK: '斯洛伐克',
                    VE: '委内瑞拉',
                    ZA: '南非'
                }
            },
            vin: {
                'default': '请输入有效的VIN(美国车辆识别号码)'
            },
            zipCode: {
                'default': '请输入有效的邮政编码',
                country: '请输入有效的 %s 国家或地区的邮政编码',
                countries: {
                    AT: '奥地利',
                    BG: '保加利亚',
                    BR: '巴西',
                    CA: '加拿大',
                    CH: '瑞士',
                    CZ: '捷克共和国',
                    DE: '德国',
                    DK: '丹麦',
                    ES: '西班牙',
                    FR: '法国',
                    GB: '英国',
                    IE: '爱尔兰',
                    IN: '印度',
                    IT: '意大利',
                    MA: '摩洛哥',
                    NL: '荷兰',
                    PL: '波兰',
                    PT: '葡萄牙',
                    RO: '罗马尼亚',
                    RU: '俄罗斯',
                    SE: '瑞典',
                    SG: '新加坡',
                    SK: '斯洛伐克',
                    US: '美国'
                }
            }
        }
    });
}(jQuery));
(function($) {
    /**
     * Traditional Chinese language package
     * Translated by @tureki
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'zh_TW': {
            base64: {
                'default': '請輸入有效的Base64編碼'
            },
            between: {
                'default': '請輸入不小於 %s 且不大於 %s 的值',
                notInclusive: '請輸入不小於等於 %s 且不大於等於 %s 的值'
            },
            bic: {
                'default': '請輸入有效的BIC商品編碼'
            },
            callback: {
                'default': '請輸入有效的值'
            },
            choice: {
                'default': '請輸入有效的值',
                less: '最少選擇 %s 個選項',
                more: '最多選擇 %s 個選項',
                between: '請選擇 %s 至 %s 個選項'
            },
            color: {
                'default': '請輸入有效的元色碼'
            },
            creditCard: {
                'default': '請輸入有效的信用卡號碼'
            },
            cusip: {
                'default': '請輸入有效的CUSIP(美國證券庫斯普)號碼'
            },
            cvv: {
                'default': '請輸入有效的CVV(信用卡檢查碼)代碼'
            },
            date: {
                'default': '請輸入有效的日期',
                min: '請輸入 %s 或之後的日期',
                max: '請輸入 %s 或以前的日期',
                range: '請輸入 %s 至 %s 之間的日期'
            },
            different: {
                'default': '請輸入不同的值'
            },
            digits: {
                'default': '只能輸入數字'
            },
            ean: {
                'default': '請輸入有效的EAN商品編碼'
            },
            ein: {
                'default': '請輸入有效的EIN商品編碼'
            },
            emailAddress: {
                'default': '請輸入有效的EMAIL'
            },
            file: {
                'default': '請選擇有效的檔案'
            },
            greaterThan: {
                'default': '請輸入大於等於 %s 的值',
                notInclusive: '請輸入大於 %s 的值'
            },
            grid: {
                'default': '請輸入有效的GRId編碼'
            },
            hex: {
                'default': '請輸入有效的16位元碼'
            },
            iban: {
                'default': '請輸入有效的IBAN(國際銀行賬戶)號碼',
                country: '請輸入有效的 %s 國家的IBAN(國際銀行賬戶)號碼',
                countries: {
                    AD: '安道​​爾',
                    AE: '阿聯酋',
                    AL: '阿爾巴尼亞',
                    AO: '安哥拉',
                    AT: '奧地利',
                    AZ: '阿塞拜疆',
                    BA: '波斯尼亞和黑塞哥維那',
                    BE: '比利時',
                    BF: '布基納法索',
                    BG: '保加利亞',
                    BH: '巴林',
                    BI: '布隆迪',
                    BJ: '貝寧',
                    BR: '巴西',
                    CH: '瑞士',
                    CI: '象牙海岸',
                    CM: '喀麥隆',
                    CR: '哥斯達黎加',
                    CV: '佛得角',
                    CY: '塞浦路斯',
                    CZ: '捷克共和國',
                    DE: '德國',
                    DK: '丹麥',
                    DO: '多明尼加共和國',
                    DZ: '阿爾及利亞',
                    EE: '愛沙尼亞',
                    ES: '西班牙',
                    FI: '芬蘭',
                    FO: '法羅群島',
                    FR: '法國',
                    GB: '英國',
                    GE: '格魯吉亞',
                    GI: '直布羅陀',
                    GL: '格陵蘭島',
                    GR: '希臘',
                    GT: '危地馬拉',
                    HR: '克羅地亞',
                    HU: '匈牙利',
                    IE: '愛爾蘭',
                    IL: '以色列',
                    IR: '伊朗',
                    IS: '冰島',
                    IT: '意大利',
                    JO: '約旦',
                    KW: '科威特',
                    KZ: '哈薩克斯坦',
                    LB: '黎巴嫩',
                    LI: '列支敦士登',
                    LT: '立陶宛',
                    LU: '盧森堡',
                    LV: '拉脫維亞',
                    MC: '摩納哥',
                    MD: '摩爾多瓦',
                    ME: '蒙特內哥羅',
                    MG: '馬達加斯加',
                    MK: '馬其頓',
                    ML: '馬里',
                    MR: '毛里塔尼亞',
                    MT: '馬耳他',
                    MU: '毛里求斯',
                    MZ: '莫桑比克',
                    NL: '荷蘭',
                    NO: '挪威',
                    PK: '巴基斯坦',
                    PL: '波蘭',
                    PS: '巴勒斯坦',
                    PT: '葡萄牙',
                    QA: '卡塔爾',
                    RO: '羅馬尼亞',
                    RS: '塞爾維亞',
                    SA: '沙特阿拉伯',
                    SE: '瑞典',
                    SI: '斯洛文尼亞',
                    SK: '斯洛伐克',
                    SM: '聖馬力諾',
                    SN: '塞內加爾',
                    TL: '東帝汶',
                    TN: '突尼斯',
                    TR: '土耳其',
                    VG: '英屬維爾京群島',
                    XK: '科索沃共和國'
                }
            },
            id: {
                'default': '請輸入有效的身份證字號',
                country: '請輸入有效的 %s 身份證字號',
                countries: {
                    BA: '波赫',
                    BG: '保加利亞',
                    BR: '巴西',
                    CH: '瑞士',
                    CL: '智利',
                    CN: '中國',
                    CZ: '捷克共和國',
                    DK: '丹麥',
                    EE: '愛沙尼亞',
                    ES: '西班牙',
                    FI: '芬蘭',
                    HR: '克羅地亞',
                    IE: '愛爾蘭',
                    IS: '冰島',
                    LT: '立陶宛',
                    LV: '拉脫維亞',
                    ME: '蒙特內哥羅',
                    MK: '馬其頓',
                    NL: '荷蘭',
                    PL: '波蘭',
                    RO: '羅馬尼亞',
                    RS: '塞爾維亞',
                    SE: '瑞典',
                    SI: '斯洛文尼亞',
                    SK: '斯洛伐克',
                    SM: '聖馬力諾',
                    TH: '泰國',
                    TR: '土耳其',
                    ZA: '南非'
                }
            },
            identical: {
                'default': '請輸入相同的值'
            },
            imei: {
                'default': '請輸入有效的IMEI(手機序列號)'
            },
            imo: {
                'default': '請輸入有效的國際海事組織(IMO)號碼'
            },
            integer: {
                'default': '請輸入有效的整數'
            },
            ip: {
                'default': '請輸入有效的IP位址',
                ipv4: '請輸入有效的IPv4位址',
                ipv6: '請輸入有效的IPv6位址'
            },
            isbn: {
                'default': '請輸入有效的ISBN(國際標準書號)'
            },
            isin: {
                'default': '請輸入有效的ISIN(國際證券號碼)'
            },
            ismn: {
                'default': '請輸入有效的ISMN(國際標準音樂編號)'
            },
            issn: {
                'default': '請輸入有效的ISSN(國際標準期刊號)'
            },
            lessThan: {
                'default': '請輸入小於等於 %s 的值',
                notInclusive: '請輸入小於 %s 的值'
            },
            mac: {
                'default': '請輸入有效的MAC位址'
            },
            meid: {
                'default': '請輸入有效的MEID(行動設備識別碼)'
            },
            notEmpty: {
                'default': '請填寫必填欄位'
            },
            numeric: {
                'default': '請輸入有效的數字(含浮點數)'
            },
            phone: {
                'default': '請輸入有效的電話號碼',
                country: '請輸入有效的 %s 國家的電話號碼',
                countries: {
                    AE: '阿聯酋',
                    BG: '保加利亞',
                    BR: '巴西',
                    CN: '中国',
                    CZ: '捷克共和國',
                    DE: '德國',
                    DK: '丹麥',
                    ES: '西班牙',
                    FR: '法國',
                    GB: '英國',
                    IN: '印度',
                    MA: '摩洛哥',
                    NL: '荷蘭',
                    PK: '巴基斯坦',
                    RO: '罗马尼亚',
                    RU: '俄羅斯',
                    SK: '斯洛伐克',
                    TH: '泰國',
                    US: '美國',
                    VE: '委内瑞拉'
                }
            },
            promise: {
                'default': '請輸入有效的值'
            },
            regexp: {
                'default': '請輸入符合正規表示式所限制的值'
            },
            remote: {
                'default': '請輸入有效的值'
            },
            rtn: {
                'default': '請輸入有效的RTN號碼'
            },
            sedol: {
                'default': '請輸入有效的SEDOL代碼'
            },
            siren: {
                'default': '請輸入有效的SIREN號碼'
            },
            siret: {
                'default': '請輸入有效的SIRET號碼'
            },
            step: {
                'default': '請輸入 %s 的倍數'
            },
            stringCase: {
                'default': '只能輸入小寫字母',
                upper: '只能輸入大寫字母'
            },
            stringLength: {
                'default': '請輸入符合長度限制的值',
                less: '請輸入小於 %s 個字',
                more: '請輸入大於 %s 個字',
                between: '請輸入 %s 至 %s 個字'
            },
            uri: {
                'default': '請輸入一個有效的鏈接'
            },
            uuid: {
                'default': '請輸入有效的UUID',
                version: '請輸入版本 %s 的UUID'
            },
            vat: {
                'default': '請輸入有效的VAT(增值税)',
                country: '請輸入有效的 %s 國家的VAT(增值税)',
                countries: {
                    AT: '奧地利',
                    BE: '比利時',
                    BG: '保加利亞',
                    BR: '巴西',
                    CH: '瑞士',
                    CY: '塞浦路斯',
                    CZ: '捷克共和國',
                    DE: '德國',
                    DK: '丹麥',
                    EE: '愛沙尼亞',
                    ES: '西班牙',
                    FI: '芬蘭',
                    FR: '法語',
                    GB: '英國',
                    GR: '希臘',
                    EL: '希臘',
                    HU: '匈牙利',
                    HR: '克羅地亞',
                    IE: '愛爾蘭',
                    IS: '冰島',
                    IT: '意大利',
                    LT: '立陶宛',
                    LU: '盧森堡',
                    LV: '拉脫維亞',
                    MT: '馬耳他',
                    NL: '荷蘭',
                    NO: '挪威',
                    PL: '波蘭',
                    PT: '葡萄牙',
                    RO: '羅馬尼亞',
                    RU: '俄羅斯',
                    RS: '塞爾維亞',
                    SE: '瑞典',
                    SI: '斯洛文尼亞',
                    SK: '斯洛伐克',
                    VE: '委内瑞拉',
                    ZA: '南非'
                }
            },
            vin: {
                'default': '請輸入有效的VIN(車輛識別號碼)'
            },
            zipCode: {
                'default': '請輸入有效的郵政編碼',
                country: '請輸入有效的 %s 國家的郵政編碼',
                countries: {
                    AT: '奧地利',
                    BG: '保加利亞',
                    BR: '巴西',
                    CA: '加拿大',
                    CH: '瑞士',
                    CZ: '捷克共和國',
                    DE: '德國',
                    DK: '丹麥',
                    ES: '西班牙',
                    FR: '法國',
                    GB: '英國',
                    IE: '愛爾蘭',
                    IN: '印度',
                    IT: '意大利',
                    MA: '摩洛哥',
                    NL: '荷蘭',
                    PL: '波蘭',
                    PT: '葡萄牙',
                    RO: '羅馬尼亞',
                    RU: '俄羅斯',
                    SE: '瑞典',
                    SG: '新加坡',
                    SK: '斯洛伐克',
                    US: '美國'
                }
            }
        }
    });
}(jQuery));

/*!
 * Client Side Validations - v9.3.3 (https://github.com/DavyJonesLocker/client_side_validations)
 * Copyright (c) 2017 Geremia Taglialatela, Brian Cardarella
 * Licensed under MIT (http://opensource.org/licenses/mit-license.php)
 */


(function() {
  var $, ClientSideValidations, initializeOnEvent, validateElement, validateForm, validatorsFor,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  $.fn.disableClientSideValidations = function() {
    ClientSideValidations.disable(this);
    return this;
  };

  $.fn.enableClientSideValidations = function() {
    this.filter(ClientSideValidations.selectors.forms).each(function() {
      return ClientSideValidations.enablers.form(this);
    });
    this.filter(ClientSideValidations.selectors.inputs).each(function() {
      return ClientSideValidations.enablers.input(this);
    });
    return this;
  };

  $.fn.resetClientSideValidations = function() {
    this.filter(ClientSideValidations.selectors.forms).each(function() {
      return ClientSideValidations.reset(this);
    });
    return this;
  };

  $.fn.validate = function() {
    this.filter(ClientSideValidations.selectors.forms).each(function() {
      return $(this).enableClientSideValidations();
    });
    return this;
  };

  $.fn.isValid = function(validators) {
    var obj;
    obj = $(this[0]);
    if (obj.is('form')) {
      return validateForm(obj, validators);
    } else {
      return validateElement(obj, validatorsFor(this[0].name, validators));
    }
  };

  initializeOnEvent = (window.Turbolinks != null) && window.Turbolinks.supported ? window.Turbolinks.EVENTS != null ? 'page:change' : 'turbolinks:load' : 'ready';

  validatorsFor = function(name, validators) {
    var captures, validator, validator_name;
    if (validators.hasOwnProperty(name)) {
      return validators[name];
    }
    name = name.replace(/\[(\w+_attributes)\]\[[\da-z_]+\](?=\[(?:\w+_attributes)\])/g, '[$1][]');
    if (captures = name.match(/\[(\w+_attributes)\].*\[(\w+)\]$/)) {
      for (validator_name in validators) {
        validator = validators[validator_name];
        if (validator_name.match("\\[" + captures[1] + "\\].*\\[\\]\\[" + captures[2] + "\\]$")) {
          name = name.replace(/\[[\da-z_]+\]\[(\w+)\]$/g, '[][$1]');
        }
      }
    }
    return validators[name] || {};
  };

  validateForm = function(form, validators) {
    var valid;
    form.trigger('form:validate:before.ClientSideValidations');
    valid = true;
    form.find(ClientSideValidations.selectors.validate_inputs).each(function() {
      if (!$(this).isValid(validators)) {
        valid = false;
      }
      return true;
    });
    if (valid) {
      form.trigger('form:validate:pass.ClientSideValidations');
    } else {
      form.trigger('form:validate:fail.ClientSideValidations');
    }
    form.trigger('form:validate:after.ClientSideValidations');
    return valid;
  };

  validateElement = function(element, validators) {
    var afterValidate, destroyInputName, executeValidators, failElement, local, passElement, remote;
    element.trigger('element:validate:before.ClientSideValidations');
    passElement = function() {
      return element.trigger('element:validate:pass.ClientSideValidations').data('valid', null);
    };
    failElement = function(message) {
      element.trigger('element:validate:fail.ClientSideValidations', message).data('valid', false);
      return false;
    };
    afterValidate = function() {
      return element.trigger('element:validate:after.ClientSideValidations').data('valid') !== false;
    };
    executeValidators = function(context) {
      var fn, i, kind, len, message, ref, valid, validator;
      valid = true;
      for (kind in context) {
        fn = context[kind];
        if (validators[kind]) {
          ref = validators[kind];
          for (i = 0, len = ref.length; i < len; i++) {
            validator = ref[i];
            if (message = fn.call(context, element, validator)) {
              valid = failElement(message);
              break;
            }
          }
          if (!valid) {
            break;
          }
        }
      }
      return valid;
    };
    if (element.attr('name').search(/\[([^\]]*?)\]$/) >= 0) {
      destroyInputName = element.attr('name').replace(/\[([^\]]*?)\]$/, '[_destroy]');
      if ($("input[name='" + destroyInputName + "']").val() === '1') {
        passElement();
        return afterValidate();
      }
    }
    if (element.data('changed') === false) {
      return afterValidate();
    }
    element.data('changed', false);
    local = ClientSideValidations.validators.local;
    remote = ClientSideValidations.validators.remote;
    if (executeValidators(local) && executeValidators(remote)) {
      passElement();
    }
    return afterValidate();
  };

  ClientSideValidations = {
    callbacks: {
      element: {
        after: function(element, eventData) {},
        before: function(element, eventData) {},
        fail: function(element, message, addError, eventData) {
          return addError();
        },
        pass: function(element, removeError, eventData) {
          return removeError();
        }
      },
      form: {
        after: function(form, eventData) {},
        before: function(form, eventData) {},
        fail: function(form, eventData) {},
        pass: function(form, eventData) {}
      }
    },
    enablers: {
      form: function(form) {
        var $form, binding, event, ref;
        $form = $(form);
        form.ClientSideValidations = {
          settings: $form.data('clientSideValidations'),
          addError: function(element, message) {
            return ClientSideValidations.formBuilders[form.ClientSideValidations.settings.html_settings.type].add(element, form.ClientSideValidations.settings.html_settings, message);
          },
          removeError: function(element) {
            return ClientSideValidations.formBuilders[form.ClientSideValidations.settings.html_settings.type].remove(element, form.ClientSideValidations.settings.html_settings);
          }
        };
        ref = {
          'submit.ClientSideValidations': function(eventData) {
            if (!$form.isValid(form.ClientSideValidations.settings.validators)) {
              eventData.preventDefault();
              eventData.stopImmediatePropagation();
            }
          },
          'ajax:beforeSend.ClientSideValidations': function(eventData) {
            if (eventData.target === this) {
              $form.isValid(form.ClientSideValidations.settings.validators);
            }
          },
          'form:validate:after.ClientSideValidations': function(eventData) {
            ClientSideValidations.callbacks.form.after($form, eventData);
          },
          'form:validate:before.ClientSideValidations': function(eventData) {
            ClientSideValidations.callbacks.form.before($form, eventData);
          },
          'form:validate:fail.ClientSideValidations': function(eventData) {
            ClientSideValidations.callbacks.form.fail($form, eventData);
          },
          'form:validate:pass.ClientSideValidations': function(eventData) {
            ClientSideValidations.callbacks.form.pass($form, eventData);
          }
        };
        for (event in ref) {
          binding = ref[event];
          $form.on(event, binding);
        }
        return $form.find(ClientSideValidations.selectors.inputs).each(function() {
          return ClientSideValidations.enablers.input(this);
        });
      },
      input: function(input) {
        var $form, $input, binding, event, form, ref;
        $input = $(input);
        form = input.form;
        $form = $(form);
        ref = {
          'focusout.ClientSideValidations': function() {
            $(this).isValid(form.ClientSideValidations.settings.validators);
          },
          'change.ClientSideValidations': function() {
            $(this).data('changed', true);
          },
          'element:validate:after.ClientSideValidations': function(eventData) {
            ClientSideValidations.callbacks.element.after($(this), eventData);
          },
          'element:validate:before.ClientSideValidations': function(eventData) {
            ClientSideValidations.callbacks.element.before($(this), eventData);
          },
          'element:validate:fail.ClientSideValidations': function(eventData, message) {
            var element;
            element = $(this);
            ClientSideValidations.callbacks.element.fail(element, message, function() {
              return form.ClientSideValidations.addError(element, message);
            }, eventData);
          },
          'element:validate:pass.ClientSideValidations': function(eventData) {
            var element;
            element = $(this);
            ClientSideValidations.callbacks.element.pass(element, function() {
              return form.ClientSideValidations.removeError(element);
            }, eventData);
          }
        };
        for (event in ref) {
          binding = ref[event];
          $input.filter(':not(:radio):not([id$=_confirmation])').each(function() {
            return $(this).attr('data-validate', true);
          }).on(event, binding);
        }
        $input.filter(':checkbox').on('change.ClientSideValidations', function() {
          $(this).isValid(form.ClientSideValidations.settings.validators);
        });
        return $input.filter('[id$=_confirmation]').each(function() {
          var confirmationElement, element, ref1, results;
          confirmationElement = $(this);
          element = $form.find("#" + (this.id.match(/(.+)_confirmation/)[1]) + ":input");
          if (element[0]) {
            ref1 = {
              'focusout.ClientSideValidations': function() {
                element.data('changed', true).isValid(form.ClientSideValidations.settings.validators);
              },
              'keyup.ClientSideValidations': function() {
                element.data('changed', true).isValid(form.ClientSideValidations.settings.validators);
              }
            };
            results = [];
            for (event in ref1) {
              binding = ref1[event];
              results.push($("#" + (confirmationElement.attr('id'))).on(event, binding));
            }
            return results;
          }
        });
      }
    },
    formBuilders: {
      'ActionView::Helpers::FormBuilder': {
        add: function(element, settings, message) {
          var form, inputErrorField, label, labelErrorField;
          form = $(element[0].form);
          if (element.data('valid') !== false && (form.find("label.message[for='" + (element.attr('id')) + "']")[0] == null)) {
            inputErrorField = $(settings.input_tag);
            labelErrorField = $(settings.label_tag);
            label = form.find("label[for='" + (element.attr('id')) + "']:not(.message)");
            if (element.attr('autofocus')) {
              element.attr('autofocus', false);
            }
            element.before(inputErrorField);
            inputErrorField.find('span#input_tag').replaceWith(element);
            inputErrorField.find('label.message').attr('for', element.attr('id'));
            labelErrorField.find('label.message').attr('for', element.attr('id'));
            labelErrorField.insertAfter(label);
            labelErrorField.find('label#label_tag').replaceWith(label);
          }
          return form.find("label.message[for='" + (element.attr('id')) + "']").text(message);
        },
        remove: function(element, settings) {
          var errorFieldClass, form, inputErrorField, label, labelErrorField;
          form = $(element[0].form);
          errorFieldClass = $(settings.input_tag).attr('class');
          inputErrorField = element.closest("." + (errorFieldClass.replace(/\ /g, ".")));
          label = form.find("label[for='" + (element.attr('id')) + "']:not(.message)");
          labelErrorField = label.closest("." + errorFieldClass);
          if (inputErrorField[0]) {
            inputErrorField.find("#" + (element.attr('id'))).detach();
            inputErrorField.replaceWith(element);
            label.detach();
            return labelErrorField.replaceWith(label);
          }
        }
      }
    },
    patterns: {
      numericality: function(number_format) {
        return new RegExp("^(-|\\+)?(?:\\d+|\\d{1,3}(?:\\" + number_format.delimiter + "\\d{3})+)(?:\\" + number_format.separator + "\\d*)?$");
      }
    },
    selectors: {
      inputs: ':input:not(button):not([type="submit"])[name]:visible:enabled',
      validate_inputs: ':input:enabled:visible[data-validate]',
      forms: 'form[data-client-side-validations]'
    },
    validators: {
      all: function() {
        return $.extend({}, local, remote);
      },
      local: {
        absence: function(element, options) {
          if (!/^\s*$/.test(element.val() || '')) {
            return options.message;
          }
        },
        presence: function(element, options) {
          if (/^\s*$/.test(element.val() || '')) {
            return options.message;
          }
        },
        acceptance: function(element, options) {
          var ref;
          switch (element.attr('type')) {
            case 'checkbox':
              if (!element.prop('checked')) {
                return options.message;
              }
              break;
            case 'text':
              if (element.val() !== (((ref = options.accept) != null ? ref.toString() : void 0) || '1')) {
                return options.message;
              }
          }
        },
        format: function(element, options) {
          var message;
          message = this.presence(element, options);
          if (message) {
            if (options.allow_blank === true) {
              return;
            }
            return message;
          }
          if (options["with"] && !new RegExp(options["with"].source, options["with"].options).test(element.val())) {
            return options.message;
          }
          if (options.without && new RegExp(options.without.source, options.without.options).test(element.val())) {
            return options.message;
          }
        },
        numericality: function(element, options) {
          var $form, CHECKS, check, checkValue, fn, number_format, operator, val;
          $form = $(element[0].form);
          val = $.trim(element.val());
          number_format = $form[0].ClientSideValidations.settings.number_format;
          if (!ClientSideValidations.patterns.numericality(number_format).test(val)) {
            if (options.allow_blank === true && this.presence(element, {
              message: options.messages.numericality
            })) {
              return;
            }
            return options.messages.numericality;
          }
          val = val.replace(new RegExp("\\" + number_format.delimiter, 'g'), '').replace(new RegExp("\\" + number_format.separator, 'g'), '.');
          if (options.only_integer && !/^[+-]?\d+$/.test(val)) {
            return options.messages.only_integer;
          }
          CHECKS = {
            greater_than: '>',
            greater_than_or_equal_to: '>=',
            equal_to: '==',
            less_than: '<',
            less_than_or_equal_to: '<='
          };
          for (check in CHECKS) {
            operator = CHECKS[check];
            if (!(options[check] != null)) {
              continue;
            }
            checkValue = !isNaN(parseFloat(options[check])) && isFinite(options[check]) ? options[check] : $form.find("[name*=" + options[check] + "]").length === 1 ? $form.find("[name*=" + options[check] + "]").val() : void 0;
            if ((checkValue == null) || checkValue === '') {
              return;
            }
            fn = new Function("return " + val + " " + operator + " " + checkValue);
            if (!fn()) {
              return options.messages[check];
            }
          }
          if (options.odd && !(parseInt(val, 10) % 2)) {
            return options.messages.odd;
          }
          if (options.even && (parseInt(val, 10) % 2)) {
            return options.messages.even;
          }
        },
        length: function(element, options) {
          var CHECKS, blankOptions, check, fn, message, operator, tokenized_length, tokenizer;
          tokenizer = options.js_tokenizer || "split('')";
          tokenized_length = new Function('element', "return (element.val()." + tokenizer + " || '').length")(element);
          CHECKS = {
            is: '==',
            minimum: '>=',
            maximum: '<='
          };
          blankOptions = {};
          blankOptions.message = options.is ? options.messages.is : options.minimum ? options.messages.minimum : void 0;
          message = this.presence(element, blankOptions);
          if (message) {
            if (options.allow_blank === true) {
              return;
            }
            return message;
          }
          for (check in CHECKS) {
            operator = CHECKS[check];
            if (!options[check]) {
              continue;
            }
            fn = new Function("return " + tokenized_length + " " + operator + " " + options[check]);
            if (!fn()) {
              return options.messages[check];
            }
          }
        },
        exclusion: function(element, options) {
          var lower, message, option, ref, upper;
          message = this.presence(element, options);
          if (message) {
            if (options.allow_blank === true) {
              return;
            }
            return message;
          }
          if (options["in"]) {
            if (ref = element.val(), indexOf.call((function() {
              var i, len, ref1, results;
              ref1 = options["in"];
              results = [];
              for (i = 0, len = ref1.length; i < len; i++) {
                option = ref1[i];
                results.push(option.toString());
              }
              return results;
            })(), ref) >= 0) {
              return options.message;
            }
          }
          if (options.range) {
            lower = options.range[0];
            upper = options.range[1];
            if (element.val() >= lower && element.val() <= upper) {
              return options.message;
            }
          }
        },
        inclusion: function(element, options) {
          var lower, message, option, ref, upper;
          message = this.presence(element, options);
          if (message) {
            if (options.allow_blank === true) {
              return;
            }
            return message;
          }
          if (options["in"]) {
            if (ref = element.val(), indexOf.call((function() {
              var i, len, ref1, results;
              ref1 = options["in"];
              results = [];
              for (i = 0, len = ref1.length; i < len; i++) {
                option = ref1[i];
                results.push(option.toString());
              }
              return results;
            })(), ref) >= 0) {
              return;
            }
            return options.message;
          }
          if (options.range) {
            lower = options.range[0];
            upper = options.range[1];
            if (element.val() >= lower && element.val() <= upper) {
              return;
            }
            return options.message;
          }
        },
        confirmation: function(element, options) {
          var confirmation_value, value;
          value = element.val();
          confirmation_value = $("#" + (element.attr('id')) + "_confirmation").val();
          if (!options.case_sensitive) {
            value = value.toLowerCase();
            confirmation_value = confirmation_value.toLowerCase();
          }
          if (value !== confirmation_value) {
            return options.message;
          }
        },
        uniqueness: function(element, options) {
          var form, matches, name, name_prefix, name_suffix, valid, value;
          name = element.attr('name');
          if (/_attributes\]\[\d/.test(name)) {
            matches = name.match(/^(.+_attributes\])\[\d+\](.+)$/);
            name_prefix = matches[1];
            name_suffix = matches[2];
            value = element.val();
            if (name_prefix && name_suffix) {
              form = element.closest('form');
              valid = true;
              form.find(":input[name^=\"" + name_prefix + "\"][name$=\"" + name_suffix + "\"]").each(function() {
                if ($(this).attr('name') !== name) {
                  if ($(this).val() === value) {
                    valid = false;
                    return $(this).data('notLocallyUnique', true);
                  } else {
                    if ($(this).data('notLocallyUnique')) {
                      return $(this).removeData('notLocallyUnique').data('changed', true);
                    }
                  }
                }
              });
              if (!valid) {
                return options.message;
              }
            }
          }
        }
      },
      remote: {}
    },
    disable: function(target) {
      var $target;
      $target = $(target);
      $target.off('.ClientSideValidations');
      if ($target.is('form')) {
        return ClientSideValidations.disable($target.find(':input'));
      } else {
        $target.removeData('valid');
        $target.removeData('changed');
        return $target.filter(':input').each(function() {
          return $(this).removeAttr('data-validate');
        });
      }
    },
    reset: function(form) {
      var $form, key;
      $form = $(form);
      ClientSideValidations.disable(form);
      for (key in form.ClientSideValidations.settings.validators) {
        form.ClientSideValidations.removeError($form.find("[name='" + key + "']"));
      }
      return ClientSideValidations.enablers.form(form);
    }
  };

  $(document).on(initializeOnEvent, function() {
    return $(ClientSideValidations.selectors.forms).validate();
  });

  window.ClientSideValidations = ClientSideValidations;

}).call(this);

/*!
 * Client Side Validations - SimpleForm - v6.3.0 (https://github.com/DavyJonesLocker/client_side_validations-simple_form)
 * Copyright (c) 2017 Geremia Taglialatela, Brian Cardarella
 * Licensed under MIT (http://opensource.org/licenses/mit-license.php)
 */


(function() {
  ClientSideValidations.formBuilders['SimpleForm::FormBuilder'] = {
    add: function(element, settings, message) {
      return this.wrapper(settings.wrapper).add.call(this, element, settings, message);
    },
    remove: function(element, settings) {
      return this.wrapper(settings.wrapper).remove.call(this, element, settings);
    },
    wrapper: function(name) {
      return this.wrappers[name] || this.wrappers["default"];
    },
    wrappers: {
      "default": {
        add: function(element, settings, message) {
          var errorElement, wrapper;
          wrapper = element.closest(settings.wrapper_tag + "." + (settings.wrapper_class.replace(/\ /g, '.')));
          errorElement = wrapper.find(settings.error_tag + "." + (settings.error_class.replace(/\ /g, '.')));
          if (!errorElement.length) {
            errorElement = $("<" + settings.error_tag + "/>", {
              "class": settings.error_class,
              text: message
            });
            wrapper.append(errorElement);
          }
          wrapper.addClass(settings.wrapper_error_class);
          return errorElement.text(message);
        },
        remove: function(element, settings) {
          var errorElement, wrapper;
          wrapper = element.closest(settings.wrapper_tag + "." + (settings.wrapper_class.replace(/\ /g, '.')) + "." + settings.wrapper_error_class);
          errorElement = wrapper.find(settings.error_tag + "." + (settings.error_class.replace(/\ /g, '.')));
          wrapper.removeClass(settings.wrapper_error_class);
          return errorElement.remove();
        }
      }
    }
  };

}).call(this);
(function() {


}).call(this);
(function() {


}).call(this);
/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */

( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.2.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( ">tbody", elem )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with computed style
	var valueIsBorderBox,
		styles = getStyles( elem ),
		val = curCSS( elem, name, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Computed unit is not pixels. Stop here and return.
	if ( rnumnonpx.test( val ) ) {
		return val;
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = isBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ name ] );

	// Fall back to offsetWidth/Height when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	if ( val === "auto" ) {
		val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
	}

	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var doc, docElem, rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		doc = elem.ownerDocument;
		docElem = doc.documentElement;
		win = doc.defaultView;

		return {
			top: rect.top + win.pageYOffset - docElem.clientTop,
			left: rect.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( jQuery.isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );
(function($, undefined) {

/**
 * Unobtrusive scripting adapter for jQuery
 * https://github.com/rails/jquery-ujs
 *
 * Requires jQuery 1.8.0 or later.
 *
 * Released under the MIT license
 *
 */

  // Cut down on the number of issues from people inadvertently including jquery_ujs twice
  // by detecting and raising an error when it happens.
  'use strict';

  if ( $.rails !== undefined ) {
    $.error('jquery-ujs has already been loaded!');
  }

  // Shorthand to make it a little easier to call public rails functions from within rails.js
  var rails;
  var $document = $(document);

  $.rails = rails = {
    // Link elements bound by jquery-ujs
    linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]',

    // Button elements bound by jquery-ujs
    buttonClickSelector: 'button[data-remote]:not([form]):not(form button), button[data-confirm]:not([form]):not(form button)',

    // Select elements bound by jquery-ujs
    inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',

    // Form elements bound by jquery-ujs
    formSubmitSelector: 'form',

    // Form input elements bound by jquery-ujs
    formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])',

    // Form input elements disabled during form submission
    disableSelector: 'input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled',

    // Form input elements re-enabled after form submission
    enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled',

    // Form required input elements
    requiredInputSelector: 'input[name][required]:not([disabled]), textarea[name][required]:not([disabled])',

    // Form file input elements
    fileInputSelector: 'input[name][type=file]:not([disabled])',

    // Link onClick disable selector with possible reenable after remote submission
    linkDisableSelector: 'a[data-disable-with], a[data-disable]',

    // Button onClick disable selector with possible reenable after remote submission
    buttonDisableSelector: 'button[data-remote][data-disable-with], button[data-remote][data-disable]',

    // Up-to-date Cross-Site Request Forgery token
    csrfToken: function() {
     return $('meta[name=csrf-token]').attr('content');
    },

    // URL param that must contain the CSRF token
    csrfParam: function() {
     return $('meta[name=csrf-param]').attr('content');
    },

    // Make sure that every Ajax request sends the CSRF token
    CSRFProtection: function(xhr) {
      var token = rails.csrfToken();
      if (token) xhr.setRequestHeader('X-CSRF-Token', token);
    },

    // Make sure that all forms have actual up-to-date tokens (cached forms contain old ones)
    refreshCSRFTokens: function(){
      $('form input[name="' + rails.csrfParam() + '"]').val(rails.csrfToken());
    },

    // Triggers an event on an element and returns false if the event result is false
    fire: function(obj, name, data) {
      var event = $.Event(name);
      obj.trigger(event, data);
      return event.result !== false;
    },

    // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm
    confirm: function(message) {
      return confirm(message);
    },

    // Default ajax function, may be overridden with custom function in $.rails.ajax
    ajax: function(options) {
      return $.ajax(options);
    },

    // Default way to get an element's href. May be overridden at $.rails.href.
    href: function(element) {
      return element[0].href;
    },

    // Checks "data-remote" if true to handle the request through a XHR request.
    isRemote: function(element) {
      return element.data('remote') !== undefined && element.data('remote') !== false;
    },

    // Submits "remote" forms and links with ajax
    handleRemote: function(element) {
      var method, url, data, withCredentials, dataType, options;

      if (rails.fire(element, 'ajax:before')) {
        withCredentials = element.data('with-credentials') || null;
        dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType);

        if (element.is('form')) {
          method = element.data('ujs:submit-button-formmethod') || element.attr('method');
          url = element.data('ujs:submit-button-formaction') || element.attr('action');
          data = $(element[0]).serializeArray();
          // memoized value from clicked submit button
          var button = element.data('ujs:submit-button');
          if (button) {
            data.push(button);
            element.data('ujs:submit-button', null);
          }
          element.data('ujs:submit-button-formmethod', null);
          element.data('ujs:submit-button-formaction', null);
        } else if (element.is(rails.inputChangeSelector)) {
          method = element.data('method');
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + '&' + element.data('params');
        } else if (element.is(rails.buttonClickSelector)) {
          method = element.data('method') || 'get';
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + '&' + element.data('params');
        } else {
          method = element.data('method');
          url = rails.href(element);
          data = element.data('params') || null;
        }

        options = {
          type: method || 'GET', data: data, dataType: dataType,
          // stopping the "ajax:beforeSend" event will cancel the ajax request
          beforeSend: function(xhr, settings) {
            if (settings.dataType === undefined) {
              xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
            }
            if (rails.fire(element, 'ajax:beforeSend', [xhr, settings])) {
              element.trigger('ajax:send', xhr);
            } else {
              return false;
            }
          },
          success: function(data, status, xhr) {
            element.trigger('ajax:success', [data, status, xhr]);
          },
          complete: function(xhr, status) {
            element.trigger('ajax:complete', [xhr, status]);
          },
          error: function(xhr, status, error) {
            element.trigger('ajax:error', [xhr, status, error]);
          },
          crossDomain: rails.isCrossDomain(url)
        };

        // There is no withCredentials for IE6-8 when
        // "Enable native XMLHTTP support" is disabled
        if (withCredentials) {
          options.xhrFields = {
            withCredentials: withCredentials
          };
        }

        // Only pass url to `ajax` options if not blank
        if (url) { options.url = url; }

        return rails.ajax(options);
      } else {
        return false;
      }
    },

    // Determines if the request is a cross domain request.
    isCrossDomain: function(url) {
      var originAnchor = document.createElement('a');
      originAnchor.href = location.href;
      var urlAnchor = document.createElement('a');

      try {
        urlAnchor.href = url;
        // This is a workaround to a IE bug.
        urlAnchor.href = urlAnchor.href;

        // If URL protocol is false or is a string containing a single colon
        // *and* host are false, assume it is not a cross-domain request
        // (should only be the case for IE7 and IE compatibility mode).
        // Otherwise, evaluate protocol and host of the URL against the origin
        // protocol and host.
        return !(((!urlAnchor.protocol || urlAnchor.protocol === ':') && !urlAnchor.host) ||
          (originAnchor.protocol + '//' + originAnchor.host ===
            urlAnchor.protocol + '//' + urlAnchor.host));
      } catch (e) {
        // If there is an error parsing the URL, assume it is crossDomain.
        return true;
      }
    },

    // Handles "data-method" on links such as:
    // <a href="/users/5" data-method="delete" rel="nofollow" data-confirm="Are you sure?">Delete</a>
    handleMethod: function(link) {
      var href = rails.href(link),
        method = link.data('method'),
        target = link.attr('target'),
        csrfToken = rails.csrfToken(),
        csrfParam = rails.csrfParam(),
        form = $('<form method="post" action="' + href + '"></form>'),
        metadataInput = '<input name="_method" value="' + method + '" type="hidden" />';

      if (csrfParam !== undefined && csrfToken !== undefined && !rails.isCrossDomain(href)) {
        metadataInput += '<input name="' + csrfParam + '" value="' + csrfToken + '" type="hidden" />';
      }

      if (target) { form.attr('target', target); }

      form.hide().append(metadataInput).appendTo('body');
      form.submit();
    },

    // Helper function that returns form elements that match the specified CSS selector
    // If form is actually a "form" element this will return associated elements outside the from that have
    // the html form attribute set
    formElements: function(form, selector) {
      return form.is('form') ? $(form[0].elements).filter(selector) : form.find(selector);
    },

    /* Disables form elements:
      - Caches element value in 'ujs:enable-with' data store
      - Replaces element text with value of 'data-disable-with' attribute
      - Sets disabled property to true
    */
    disableFormElements: function(form) {
      rails.formElements(form, rails.disableSelector).each(function() {
        rails.disableFormElement($(this));
      });
    },

    disableFormElement: function(element) {
      var method, replacement;

      method = element.is('button') ? 'html' : 'val';
      replacement = element.data('disable-with');

      if (replacement !== undefined) {
        element.data('ujs:enable-with', element[method]());
        element[method](replacement);
      }

      element.prop('disabled', true);
      element.data('ujs:disabled', true);
    },

    /* Re-enables disabled form elements:
      - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
      - Sets disabled property to false
    */
    enableFormElements: function(form) {
      rails.formElements(form, rails.enableSelector).each(function() {
        rails.enableFormElement($(this));
      });
    },

    enableFormElement: function(element) {
      var method = element.is('button') ? 'html' : 'val';
      if (element.data('ujs:enable-with') !== undefined) {
        element[method](element.data('ujs:enable-with'));
        element.removeData('ujs:enable-with'); // clean up cache
      }
      element.prop('disabled', false);
      element.removeData('ujs:disabled');
    },

   /* For 'data-confirm' attribute:
      - Fires `confirm` event
      - Shows the confirmation dialog
      - Fires the `confirm:complete` event

      Returns `true` if no function stops the chain and user chose yes; `false` otherwise.
      Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.
      Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function
      return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.
   */
    allowAction: function(element) {
      var message = element.data('confirm'),
          answer = false, callback;
      if (!message) { return true; }

      if (rails.fire(element, 'confirm')) {
        try {
          answer = rails.confirm(message);
        } catch (e) {
          (console.error || console.log).call(console, e.stack || e);
        }
        callback = rails.fire(element, 'confirm:complete', [answer]);
      }
      return answer && callback;
    },

    // Helper function which checks for blank inputs in a form that match the specified CSS selector
    blankInputs: function(form, specifiedSelector, nonBlank) {
      var foundInputs = $(),
        input,
        valueToCheck,
        radiosForNameWithNoneSelected,
        radioName,
        selector = specifiedSelector || 'input,textarea',
        requiredInputs = form.find(selector),
        checkedRadioButtonNames = {};

      requiredInputs.each(function() {
        input = $(this);
        if (input.is('input[type=radio]')) {

          // Don't count unchecked required radio as blank if other radio with same name is checked,
          // regardless of whether same-name radio input has required attribute or not. The spec
          // states https://www.w3.org/TR/html5/forms.html#the-required-attribute
          radioName = input.attr('name');

          // Skip if we've already seen the radio with this name.
          if (!checkedRadioButtonNames[radioName]) {

            // If none checked
            if (form.find('input[type=radio]:checked[name="' + radioName + '"]').length === 0) {
              radiosForNameWithNoneSelected = form.find(
                'input[type=radio][name="' + radioName + '"]');
              foundInputs = foundInputs.add(radiosForNameWithNoneSelected);
            }

            // We only need to check each name once.
            checkedRadioButtonNames[radioName] = radioName;
          }
        } else {
          valueToCheck = input.is('input[type=checkbox],input[type=radio]') ? input.is(':checked') : !!input.val();
          if (valueToCheck === nonBlank) {
            foundInputs = foundInputs.add(input);
          }
        }
      });
      return foundInputs.length ? foundInputs : false;
    },

    // Helper function which checks for non-blank inputs in a form that match the specified CSS selector
    nonBlankInputs: function(form, specifiedSelector) {
      return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank
    },

    // Helper function, needed to provide consistent behavior in IE
    stopEverything: function(e) {
      $(e.target).trigger('ujs:everythingStopped');
      e.stopImmediatePropagation();
      return false;
    },

    //  Replace element's html with the 'data-disable-with' after storing original html
    //  and prevent clicking on it
    disableElement: function(element) {
      var replacement = element.data('disable-with');

      if (replacement !== undefined) {
        element.data('ujs:enable-with', element.html()); // store enabled state
        element.html(replacement);
      }

      element.bind('click.railsDisable', function(e) { // prevent further clicking
        return rails.stopEverything(e);
      });
      element.data('ujs:disabled', true);
    },

    // Restore element to its original state which was disabled by 'disableElement' above
    enableElement: function(element) {
      if (element.data('ujs:enable-with') !== undefined) {
        element.html(element.data('ujs:enable-with')); // set to old enabled state
        element.removeData('ujs:enable-with'); // clean up cache
      }
      element.unbind('click.railsDisable'); // enable element
      element.removeData('ujs:disabled');
    }
  };

  if (rails.fire($document, 'rails:attachBindings')) {

    $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }});

    // This event works the same as the load event, except that it fires every
    // time the page is loaded.
    //
    // See https://github.com/rails/jquery-ujs/issues/357
    // See https://developer.mozilla.org/en-US/docs/Using_Firefox_1.5_caching
    $(window).on('pageshow.rails', function () {
      $($.rails.enableSelector).each(function () {
        var element = $(this);

        if (element.data('ujs:disabled')) {
          $.rails.enableFormElement(element);
        }
      });

      $($.rails.linkDisableSelector).each(function () {
        var element = $(this);

        if (element.data('ujs:disabled')) {
          $.rails.enableElement(element);
        }
      });
    });

    $document.on('ajax:complete', rails.linkDisableSelector, function() {
        rails.enableElement($(this));
    });

    $document.on('ajax:complete', rails.buttonDisableSelector, function() {
        rails.enableFormElement($(this));
    });

    $document.on('click.rails', rails.linkClickSelector, function(e) {
      var link = $(this), method = link.data('method'), data = link.data('params'), metaClick = e.metaKey || e.ctrlKey;
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      if (!metaClick && link.is(rails.linkDisableSelector)) rails.disableElement(link);

      if (rails.isRemote(link)) {
        if (metaClick && (!method || method === 'GET') && !data) { return true; }

        var handleRemote = rails.handleRemote(link);
        // Response from rails.handleRemote() will either be false or a deferred object promise.
        if (handleRemote === false) {
          rails.enableElement(link);
        } else {
          handleRemote.fail( function() { rails.enableElement(link); } );
        }
        return false;

      } else if (method) {
        rails.handleMethod(link);
        return false;
      }
    });

    $document.on('click.rails', rails.buttonClickSelector, function(e) {
      var button = $(this);

      if (!rails.allowAction(button) || !rails.isRemote(button)) return rails.stopEverything(e);

      if (button.is(rails.buttonDisableSelector)) rails.disableFormElement(button);

      var handleRemote = rails.handleRemote(button);
      // Response from rails.handleRemote() will either be false or a deferred object promise.
      if (handleRemote === false) {
        rails.enableFormElement(button);
      } else {
        handleRemote.fail( function() { rails.enableFormElement(button); } );
      }
      return false;
    });

    $document.on('change.rails', rails.inputChangeSelector, function(e) {
      var link = $(this);
      if (!rails.allowAction(link) || !rails.isRemote(link)) return rails.stopEverything(e);

      rails.handleRemote(link);
      return false;
    });

    $document.on('submit.rails', rails.formSubmitSelector, function(e) {
      var form = $(this),
        remote = rails.isRemote(form),
        blankRequiredInputs,
        nonBlankFileInputs;

      if (!rails.allowAction(form)) return rails.stopEverything(e);

      // Skip other logic when required values are missing or file upload is present
      if (form.attr('novalidate') === undefined) {
        if (form.data('ujs:formnovalidate-button') === undefined) {
          blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector, false);
          if (blankRequiredInputs && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {
            return rails.stopEverything(e);
          }
        } else {
          // Clear the formnovalidate in case the next button click is not on a formnovalidate button
          // Not strictly necessary to do here, since it is also reset on each button click, but just to be certain
          form.data('ujs:formnovalidate-button', undefined);
        }
      }

      if (remote) {
        nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);
        if (nonBlankFileInputs) {
          // Slight timeout so that the submit button gets properly serialized
          // (make it easy for event handler to serialize form without disabled values)
          setTimeout(function(){ rails.disableFormElements(form); }, 13);
          var aborted = rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]);

          // Re-enable form elements if event bindings return false (canceling normal form submission)
          if (!aborted) { setTimeout(function(){ rails.enableFormElements(form); }, 13); }

          return aborted;
        }

        rails.handleRemote(form);
        return false;

      } else {
        // Slight timeout so that the submit button gets properly serialized
        setTimeout(function(){ rails.disableFormElements(form); }, 13);
      }
    });

    $document.on('click.rails', rails.formInputClickSelector, function(event) {
      var button = $(this);

      if (!rails.allowAction(button)) return rails.stopEverything(event);

      // Register the pressed submit button
      var name = button.attr('name'),
        data = name ? {name:name, value:button.val()} : null;

      var form = button.closest('form');
      if (form.length === 0) {
        form = $('#' + button.attr('form'));
      }
      form.data('ujs:submit-button', data);

      // Save attributes from button
      form.data('ujs:formnovalidate-button', button.attr('formnovalidate'));
      form.data('ujs:submit-button-formaction', button.attr('formaction'));
      form.data('ujs:submit-button-formmethod', button.attr('formmethod'));
    });

    $document.on('ajax:send.rails', rails.formSubmitSelector, function(event) {
      if (this === event.target) rails.disableFormElements($(this));
    });

    $document.on('ajax:complete.rails', rails.formSubmitSelector, function(event) {
      if (this === event.target) rails.enableFormElements($(this));
    });

    $(function(){
      rails.refreshCSRFTokens();
    });
  }

})( jQuery );
/* ========================================================================
 * Bootstrap: transition.js v3.3.7
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);
/* ========================================================================
 * Bootstrap: alert.js v3.3.7
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.7'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector === '#' ? [] : selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);
/* ========================================================================
 * Bootstrap: button.js v3.3.7
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.7'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d).prop(d, true)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d).prop(d, false)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target).closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"], input[type="checkbox"]'))) {
        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
        e.preventDefault()
        // The target component still receive the focus
        if ($btn.is('input,button')) $btn.trigger('focus')
        else $btn.find('input:visible,button:visible').first().trigger('focus')
      }
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);
/* ========================================================================
 * Bootstrap: carousel.js v3.3.7
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.7'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);
/* ========================================================================
 * Bootstrap: collapse.js v3.3.7
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.7'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.7
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.7'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);
/* ========================================================================
 * Bootstrap: modal.js v3.3.7
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.7'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (document !== e.target &&
            this.$element[0] !== e.target &&
            !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);
/* ========================================================================
 * Bootstrap: tab.js v3.3.7
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.7'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);
/* ========================================================================
 * Bootstrap: affix.js v3.3.7
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.7'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.7
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.7'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.7
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.7'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.
        that.$element
          .removeAttr('aria-describedby')
          .trigger('hidden.bs.' + that.type)
      }
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var isSvg = window.SVGElement && el instanceof window.SVGElement
    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
    // See https://github.com/twbs/bootstrap/issues/20280
    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
      that.$element = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);
/* ========================================================================
 * Bootstrap: popover.js v3.3.7
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */



+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.7'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);












// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, or any plugin's
// vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file. JavaScript code in this file should be added after the last require_* statement.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//










;
